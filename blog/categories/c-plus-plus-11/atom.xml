<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++11 | Ranting @ 741 MHz]]></title>
  <link href="http://741MHz.com/blog/categories/c-plus-plus-11/atom.xml" rel="self"/>
  <link href="http://741MHz.com/"/>
  <updated>2013-12-01T22:53:55-05:00</updated>
  <id>http://741MHz.com/</id>
  <author>
    <name><![CDATA[741MHz.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++11 Static Assert]]></title>
    <link href="http://741MHz.com/static-assert/"/>
    <updated>2013-05-07T00:00:00-04:00</updated>
    <id>http://741MHz.com/static-assert</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Assertions is one of they key features of almost every programming language that help programmers verify their assumptions made when writing the code.
In C, assertion mechanism is provided by <a href="http://man7.org/linux/man-pages/man3/assert.3.html">assert()</a> preprocessor macro defined by <a href="http://en.wikipedia.org/wiki/Assert.h">assert.h</a> header file. C++ programs can also use it by including &ldquo;<a href="http://en.cppreference.com/w/cpp/header/cassert">cassert</a>&rdquo; header file. As an added benefit, assertions also serve as documentation of the internal details of the program enhancing the code maintainability. Here is a simple C++11 example:</p>

<p>```c++</p>

<h1>include <iostream></h1>

<h1>include <cassert></h1>

<p>int main(int argc, char* argv[]) {</p>

<pre><code>for (int i = 0; i &lt; argc; ++i) {
    assert(argv[i] != nullptr);
    std::cout &lt;&lt; argv[i] &lt;&lt; std::endl;
}
</code></pre>

<p>}
```
GNU C library also provides a convenient function to check for error numbers called &ldquo;<a href="http://man7.org/linux/man-pages/man3/assert_perror.3.html">assert_perror()</a>&rdquo;.</p>

<p>There are at least 71 more programming language that provide assertion mechanism. You can check them out along with examples at <a href="http://rosettacode.org/wiki/Assertions">http://rosettacode.org/wiki/Assertions</a></p>

<h2>The Problem</h2>

<p>The <code>assert()</code> macro in both C and C++ would only check for errors at <a href="http://en.wikipedia.org/wiki/Run_time_(program_lifecycle_phase">execution time</a>) when the program is actually running. By definition that implies that:</p>

<ul>
<li>It adds some overhead to the program execution (time, size or both).</li>
<li>The assertion may not be exercised leaving a program undetected for a while (in the worse case, the program may pass a testing stage only to be discover by the end user later).</li>
</ul>


<p>The above two points sound like are necessary evil. But what if we could get rid of those tradeoffs?</p>

<p>There are cases when there is enough information during <a href="http://en.wikipedia.org/wiki/Compile_time">compile-time</a> to detect a possible error. For example, macro definitions and <a href="http://msdn.microsoft.com/en-us/library/tby3xex3(v=vs.110">constant expressions</a>.aspx) are things that do not exist in compile-time.</p>

<p>If only there was a way to check constant expressions in compile-time it would have been always preferred over runtime checking.</p>

<p>Luckily, programmers have figured out a few different ways to do this.</p>

<h2>Workarounds</h2>

<h3>Preprocessor Assertions</h3>

<p>Both C and C++ preprocessors have <code>#error</code> directive that can be used to abort compilation with an error. It can be used to perform compile-time assertions.</p>

<p>For example, consider a simple C program that reads data from into a buffer whose size is specified using a standard <a href="http://www.gnu.org/software/libc/manual/html_node/Controlling-Buffering.html"><code>BUFSIZ</code> macro</a> and the programmer wants to make sure that buffer is at least 1024 bytes large. The code using assertions might look like this:</p>

<p>```c++</p>

<h1>include <cstdio></h1>

<h1>include <cassert></h1>

<p>int main(int argc, char* argv[]) {</p>

<pre><code>// Allocate buffer on stack:
char mybuffer[BUFSIZ];

// Make sure we have at least 1024 bytes:
assert(sizeof(mybuffer) &gt;= 1024);

// Read data into "mybuffer"...
</code></pre>

<p>}
```</p>

<p>Given that <code>BUFSIZ</code> is a macro, a better solution would be to use preprocessor and its <code>#error</code> directive to check for this at compile-time instead:</p>

<p>```c++</p>

<h1>include <cstdio></h1>

<h1>if BUFSIZ &lt; 1024</h1>

<h1>error Buffer size is too small</h1>

<h1>endif</h1>

<p>int main(int argc, char* argv[]) {</p>

<pre><code>// Allocate buffer on stack:
char mybuffer[BUFSIZ];

// Read data into "mybuffer"...
</code></pre>

<p>}
```</p>

<p>When the buffer size defined by <code>BUFSIZ</code> is large enough, the program would compile as normal. But when it isn&rsquo;t, the compile would refuse to compile the program spitting out an error that might look like this:</p>

<p><code>
$ g++ -Wall -pedantic ./assert_example.cc
./assert_example.cc:4:3: error: Buffer size is too small
</code></p>

<p>Unfortunately, this mechanism can be used with binary operands only. In other words, something like this would not work by definition:</p>

<p>```c
char mybuffer[BUFSIZ];</p>

<h1>if sizeof(mybuffer) &lt; 1024</h1>

<h1>error Buffer size is too small</h1>

<h1>endif</h1>

<p>```</p>

<p>This is because preprocessor knows nothing about <code>sizeof</code> operator and cannot use the result of this expression to compare it against 1024.</p>

<p>Of course, being limited to macros usage only is a big problem. And so people accepted the challenge and came up with another way to overcome this limitation&hellip;</p>

<h3>Negative Buffer Size</h3>

<p>C and C++ developers have been relying on the fact that it is impossible to have a buffer of negative size in order to implement compile time assertions. The mechanism is very simple &ndash; evaluate a constant expression and yield <code>1</code> if it evaluates as <code>true</code>, or <code>-1</code> otherwise, and use the result as size of the buffer. For example, let&rsquo;s say we want to make sure that size of the integer is exactly 4 bytes, we could write code like this:</p>

<p><code>c
typedef char assert_int_size[sizeof(int) == 4 ? 1 : -1];
</code></p>

<p>This approach, however, has its own limitations.</p>

<p>In C, it can be used in both function and non-function scopes, but cannot be used inside structs and unions.</p>

<p>Unlike C, C++ allows to have typedef statements, but there is another problem &ndash; if the static assertion is not dependent upon one or more template parameters, then the compiler is permitted to evaluate the static assertion at the point it is first seen, irrespective of whether the template is ever instantiated. In other words &ndash; it is hard to use with templates as programmers should always remember to use a template type in a condition.</p>

<h2>Core Language Support</h2>

<p>Over the years people have been working around issues associated with different workarounds to implement static assertions and realized that there is no way to implement them without a proper core language support.</p>

<h3>C++</h3>

<p>In 2004, Robert Klarer, Dr. John Maddock, Beman Dawes and Howard Hinnant wrote a proposal for adding a static assertion mechanism to the Core Language, known as <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1720.html">N1720</a>.</p>

<p>The proposal was accepted into the C++11 language specification and is implemented by the majority of C++ compilers today as &ldquo;<a href="http://en.cppreference.com/w/cpp/language/static_assert">static_assert()</a>&rdquo; keyword/function.</p>

<p>It comes with no strings attached and accepts two parameters &ndash; a compile-time expressions that is evaluates to either <code>true</code> or <code>false</code> and a message. If the expression evaluates to <code>false</code>, the compilation is aborted and specified message is shown as an error message. <code>static_assert()</code> can be used in any scope, including templates. For example:</p>

<p>```c++ Static Assert Example</p>

<h1>include <cstdio></h1>

<p>static_assert(BUFSIZ >= 1024, &ldquo;Buffer size is too small&rdquo;);</p>

<p>template <typename T>
struct Foo {</p>

<pre><code>static_assert(sizeof(int) == 4, "Int size is not 4 bytes");
</code></pre>

<p>};</p>

<p>int main(int argc, char* argv[]) {</p>

<pre><code>// Allocate buffer on stack:
char mybuffer[BUFSIZ];
static_assert(sizeof(mybuffer) &gt;= 1024, "Buffer size is too small");

// Read data into "mybuffer"...
</code></pre>

<p>}
```</p>

<h3>C</h3>

<p>In C, static assertions are introduced as part of <a href="http://en.wikipedia.org/wiki/C11_(C_standard_revision">ISO/IEC 9899:2011 standard</a>), informally known as C11. The mechanism is exactly the same as in C++, but the function name is <code>_Static_assert()</code>. For example:</p>

<p>```c C11 Static Assert Example</p>

<h1>include &lt;stdio.h></h1>

<p>_Static_assert(BUFSIZ >= 1024, &ldquo;Buffer size is too small&rdquo;);</p>

<p>struct Foo {</p>

<pre><code>char data[BUFSIZ];
</code></pre>

<p>};</p>

<p>union Bar {</p>

<pre><code>int x;
char y[4];
</code></pre>

<p>};</p>

<p>_Static_assert(sizeof(union Bar) == 4, &ldquo;Size of int is not 4 bytes&rdquo;);</p>

<p>int main(int argc, char* argv[]) {</p>

<pre><code>// Allocate buffer on stack:
char mybuffer[BUFSIZ];
_Static_assert(sizeof(mybuffer) &gt;= 1024, "Buffer size is too small");

// Read data into "mybuffer"...
</code></pre>

<p>}
```</p>

<p>It still cannot be used inside structs and unions, though.</p>

<h3>Note on error messages</h3>

<p>There is but one thing about <code>static_assert()</code> that can be pretty annoying &ndash; having to specify an error message even if it is an empty string. Of course, providing good error messages is the way to go. But there are a lot of cases when a condition used in assertion just does not need any extra words.</p>

<p>The first solution that immediately comes to mind is to use the macro like this:</p>

<p>```c++</p>

<h1>define STATIC_ASSERT(Expr) static_assert((Expr), #Expr)</h1>

<p>```</p>

<p>Note, however, that it won&rsquo;t work well with expressions that contain a comma, like this:</p>

<p><code>c++
STATIC_ASSERT(!std::is_same&lt;T, int&gt;::value);
</code></p>

<p>Of course, programmers can enclose an expression in extra pair of <code>()</code>, but there is a better to do this, using <a href="http://gcc.gnu.org/onlinedocs/cpp/Variadic-Macros.html">variadic macros</a>. Here is a complete example:</p>

<p>```c++</p>

<h1>include &lt;type_traits></h1>

<h1>define STATIC_ASSERT_IMPL(Expr) static_assert((Expr), #Expr)</h1>

<h1>define STATIC_ASSERT(&hellip;) STATIC_ASSERT_IMPL((<strong>VA_ARGS</strong>))</h1>

<p>template <typename T>
struct Foo final {</p>

<pre><code>STATIC_ASSERT(!std::is_same&lt;T, int&gt;::value);
</code></pre>

<p>};</p>

<p>int main(int argc, char* argv[]) {</p>

<pre><code>STATIC_ASSERT(sizeof(int) == 4);
</code></pre>

<p>}
```</p>

<h2>See Also</h2>

<ul>
<li><a href="http://www.robertgamble.net/2012/01/c11-static-assertions.html">C11 Static Assertions</a> by Robert Gamble</li>
<li><a href="http://docs.oracle.com/javase/1.4.2/docs/guide/lang/assert.html">Java: Programming with assertions</a></li>
<li><a href="http://www.boost.org/doc/libs/release/doc/html/boost_staticassert.html">Boost.StaticAssert library</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/vstudio/dd293588.aspx">MSDN on &ldquo;static_assert()&rdquo;</a></li>
<li><a href="http://www.drdobbs.com/compile-time-assertions/184401873">Compile-Time Assertions</a> by Ralf Holly</li>
</ul>


<h2>References</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/C11_(C_standard_revision">C11 (C Standard Revision)</a>)</li>
<li><a href="http://gcc.gnu.org/wiki/C11Status">GCC C11 Status</a></li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1720.html">N1720</a></li>
<li><a href="http://rosettacode.org/wiki/Assertions">Assertions</a> by RosettaCode.org</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++11 Final Override]]></title>
    <link href="http://741MHz.com/final-override/"/>
    <updated>2013-02-27T00:00:00-05:00</updated>
    <id>http://741MHz.com/final-override</id>
    <content type="html"><![CDATA[<h2>Preface</h2>

<p>The alternative name for this article is “How to protect yourself from others when it comes to polymorphism.” That is pretty much the primary purpose of two brand new C++ keywords introduced in C++11 — the <code>override</code> and <code>final</code>.</p>

<p>Those who have at least some experience in team-based C++ development must be aware of at least one of many pitfalls of polymorphism and virtual methods in particular. Let’s go over some of real-world problems that could easily force developers to run a debugger or read the code over and over again trying to figure out why the program is not working as expected.</p>

<h2>A Missing Virtual Function</h2>

<p>This could happen to anyone — there was a base class with a virtual function and developer has decided to overload it for a good reason. Everything was fine and the program worked as expected. But one day after, a fresh build simply stopped working, and the reason is not obvious. After spending some time debugging the program, it turned out that a function that should have been called does not appear to be called at all. What could be wrong?</p>

<p>Consider the following code where the Foo class is written by one developer while Bar was written by someone else and could even be part of another project:</p>

<p>```c++
class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

virtual int init() {
    do_very_important_stuff();
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

virtual int init() {
    Foo::init();
    do_some_more_important_stuff();
}
</code></pre>

<p>};
```</p>

<p>A few years later a new developer joins the company and accidentally removes a virtual keyword from the <code>init()</code> method’s declaration of class <em>Foo</em>. How that could even happen, you may ask? Maybe he was learning Emacs and executed a <em>replace-regexp</em> command without noticing all of the changes. Or maybe he just read the <em>Code Refactoring</em> book and decided to improve the code but couldn’t check all of the usages of class <em>Foo</em> because they were in a different repository that he didn’t have access to. Who knows? Things happen. As a result, the <code>Bar::init()</code> is no longer called because it does no longer override its base method. For example:</p>

<p>```c++</p>

<h1>include <iostream></h1>

<h1>include <memory></h1>

<p>class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

int init() {
    std::cout &lt;&lt; "Hello, World!\n";
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

virtual int init() {
    Foo::init();
    std::cout &lt;&lt; "The code is working!\n";
}
</code></pre>

<p>};</p>

<p>int main() {</p>

<pre><code>std::unique_ptr&lt;Foo&gt; foo(new Bar());
foo-&gt;init();
</code></pre>

<p>}
```</p>

<p>The above program will not print an expected “The code is working!” line and someone would definitely waste some time trying to figure out why, especially if the project has a few million lines of code.</p>

<h2>A Million Dollars Typo</h2>

<p>Typos can also cause a lot of troubles. For example, developers can misspell the name of the method when overriding:</p>

<p>```c++</p>

<h1>include <iostream></h1>

<h1>include <memory></h1>

<p>class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

virtual void doSomeVeryImportantWork() {
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

virtual void doSomeVeryInportantWork() {
    std::cout &lt;&lt; "The code is working!\n";
}
</code></pre>

<p>};</p>

<p>int main() {</p>

<pre><code>std::unique_ptr&lt;Foo&gt; foo(new Bar());
foo-&gt;doSomeVeryImportantWork();
</code></pre>

<p>}
```</p>

<p>The above program prints nothing despite the expectations and the reason is not immediately obvious.</p>

<h2>Signature Changes</h2>

<p>Signature change is another seemingly innocent change that may potentially waste a log of valuable time when not accounted for properly. For example, the base class’s <code>init()</code> function is changed from this:</p>

<pre><code>virtual void init() { }
</code></pre>

<p>… to this:</p>

<pre><code>virtual void init(int x = 0) {
}
</code></pre>

<p>The whole project still compiles just fine. Yet the program doesn’t work as expected anymore.</p>

<p>It’s also possible to accidentally override someone’s virtual function, etc. The list of such gotchas can go on and on. For those who can relate to this — you must know that you are not alone! C++ developers including myself have dealt with this and similar problems for the past few decades.</p>

<p>Luckily, since introduction of the C++11 the sun is shining on our side of the fence!</p>

<h2>We Override!</h2>

<p>Instead of using (or not using) a <code>virtual</code> keyword and assuming the base class has the method being overridden, we can now use the brand new <code>override</code> keyword. The compiler will then make sure that a method declared with that keyword really overrides the base method. And if that turns out to be not the case, the code won’t compile and the error would be caught during compilation, which is a lot better than debugging. The following is the new version of the first example:</p>

<p>```c++
class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

int init() override {
    Foo::init();
    std::cout &lt;&lt; "The code is working!\n";
}
</code></pre>

<p>};
```</p>

<p>The compilation fails if the base class`s init() method is no longer there:</p>

<pre><code>error: ‘int Bar::init()’ marked override, but does not override
</code></pre>

<h2>It’s Final!</h2>

<p>The second keyword is <code>final</code>. It is a little bit less useful but is still a good self-defense mechanism against unintended usage and/or code changes.</p>

<p>What it means is that a method marked as final is not only virtual and must override its base but that nobody else can further override it. For example:</p>

<p>```c++</p>

<h1>include <iostream></h1>

<h1>include <memory></h1>

<p>class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

virtual int init() {
    std::cout &lt;&lt; "Hello, World!\n";
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
~Bar() override { }

int init() final {
    Foo::init();
    std::cout &lt;&lt; "This code works!\n";
}
</code></pre>

<p>};</p>

<p>int main() {</p>

<pre><code>std::unique_ptr&lt;Foo&gt; foo(new Bar());
foo-&gt;init();
</code></pre>

<p>}
```</p>

<p>The above code is sound and secure. But if somebody else would try to write a class like this:</p>

<p>```c++
class BetterBar : public Bar {
public:</p>

<pre><code>BetterBar() { }
~BetterBar() override { }

int init() override {
    Bar::init();
    std::cout &lt;&lt; "Even better init() function!\n";
}
</code></pre>

<p>};
```</p>

<p>… a compiler would tell them that they are wrong by issuing an error: </p>

<pre><code>error: virtual function ‘virtual int BetterBar::init()’
error: overriding final function ‘virtual int Bar::init()’
</code></pre>

<p>The <code>final</code> keyword can also be applied to the whole class in order to prevent further derivation from it. For example:</p>

<p>```c++
class Bar final : public Foo {
  public:</p>

<pre><code>Bar() {}
</code></pre>

<p>&hellip;
```</p>

<p>If anyone tries to inherit from Bar, the compiler issues an error: </p>

<pre><code>error: cannot derive from ‘final’ base ‘Bar’ in derived type ‘BetterBar’
</code></pre>

<p>What is interesting is that almost the same effect can be achieved in a less obvious way by applying the <code>final</code> keyword to a virtual destructor of either base (which is not the same as <code>final</code> in this case because it introduces a virtual table) or any derived class:</p>

<p>```c++
class Foo { // You cannot derive from me!
public:</p>

<pre><code>Foo() { }
virtual ~Foo() final { }
</code></pre>

<p>};
```</p>

<p>Template containers from the standard C++ library might be good candidates to be marked with a final keyword, as it is generally not a good idea to derive from them in almost every case.</p>

<h2>Conclusion</h2>

<p>C++11 introduces two important keywords in relation to polymorphism and inheritance — the <code>override</code> and <code>final</code>. Using those keywords should become a habit of any C++ developer. It is worth using every time except when writing a base class. This will make the code clear, maintainable, and potentially save hours that would have been otherwise wasted chasing an error in debugger.</p>

<h2>References</h2>

<ul>
<li><a href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2009/n2928.htm">N2928</a> &ndash; Explicit Virtual Overrides</li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm">N3206</a> &ndash; Override control: Eliminating Attributes</li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm">N3272</a> &ndash; Follow-up on override control</li>
<li><a href="http://clang.llvm.org/cxx_status.html">Clang C++11 Status Report</a></li>
<li><a href="http://gcc.gnu.org/projects/cxx0x.html">GCC C++11 Status Report</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
