<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++11 | Ranting @ 741 MHz]]></title>
  <link href="http://741MHz.com/blog/categories/c-plus-plus-11/atom.xml" rel="self"/>
  <link href="http://741MHz.com/"/>
  <updated>2013-12-01T20:37:49-05:00</updated>
  <id>http://741MHz.com/</id>
  <author>
    <name><![CDATA[741MHz.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automatic Resource Management in Programming Languages]]></title>
    <link href="http://741MHz.com/raii/"/>
    <updated>2013-02-27T00:00:00-05:00</updated>
    <id>http://741MHz.com/raii</id>
    <content type="html"><![CDATA[<p>Many high-level programming languages provide software developers with the ability to automatically cleanup resources — automatically closing an open file when it is no longer used, freeing dynamically allocated memory, or anything else for that matter. This article touches on automatic resource management features available in modern programming languages. It shows some examples demonstrating why having this feature make it easier to write code, or how not using this feature may lead to potentially critical failures of the program. The primary focus is on C++ and C (surprise!) languages.</p>

<h2>C</h2>

<p>There are a few ways to automatically clean up resources in C# — a <code>finally</code> block and a <code>using</code> statement.</p>

<p>A <code>finally</code> block is a bit lower level than a using. It guarantees that all statements inside a <code>finally</code> block will be executed when the try block exists, even if unexpected exception occurs. For example:</p>

<p>```c#
ResourceType resource = expression; // Allocate, initialize or acquire some resource.
try {</p>

<pre><code>// Do something with it.
statement;
</code></pre>

<p>} finally {</p>

<pre><code>// Free, destroy or release a resource.
// This is guaranteed to happen.
((IDisposable)resource).Dispose();
</code></pre>

<p>}
```</p>

<p>Another and more convenient way of doing the same is to employ a <code>using</code> statement which guarantees that <code>Dispose()</code> method is called automatically upon leaving the scope of using block:</p>

<p>```c#
using (ResourceType resource = expression) {</p>

<pre><code>statement;
</code></pre>

<p>}
```</p>

<h2>Java</h2>

<p>Java also provides a finally block similar to that seen in C#:</p>

<p>```java
FileReader reader = null;
try {</p>

<pre><code>reader = new FileReader("/dev/null");
// Do something with a file...
</code></pre>

<p>} finally {</p>

<pre><code>if (reader != null)
reader.close();
</code></pre>

<p>}
```</p>

<p>Starting from version 7 Java introduces an AutoCloseable concept along with automatic resource cleanup, which are basically the same things as IDisposable and a using statement in C#:</p>

<p>```java
try (FileReader reader = new FileReader(&ldquo;/dev/null&rdquo;))
{</p>

<pre><code>// Do something with a file...
</code></pre>

<p>}
```</p>

<h2>Other Languages</h2>

<p>Since the concept of something being done automatically is quite popular, it is present in many other languages. Python has both a <a href="http://docs.python.org/2/reference/compound_stmts.html#finally"><code>finally</code> statement</a> and a <a href="http://docs.python.org/release/2.5.3/ref/with.html"><code>with</code> statement</a>. The same goes for Ruby. Of course, this is also available in derivative languages like Visual Basic that is built on top of .NET technology, Groovy that is built on Java, etc.</p>

<h2>C++ — The King of RAII</h2>

<p>As we have seen, many languages provide different syntax to do essentially the same thing. It is a great concept indeed. It changed the way programmers write code, significantly improved productivity. And behind every invention that we cannot imagine our lives without there is an author. So who is behind the automatic resource management?</p>

<p>The real name of this concept is <strong>Resource Acquisition Is Initialization</strong>, or simply <strong>RAII</strong>. It was invented by Bjarne Stroustrup, the original author of C++ programming language. And of course this concept first appeared in C++, way before C# or Java were created.</p>

<p>C++ is the king of RAII. Many concepts are built upon it. RAII is the reason why object destructors are called automatically. It is the reason why C++ developers don’t need to care much about freeing dynamically allocated memory or close a file descriptor that is no longer used. It is why, when handling an error, it is enough to simply throw an exception, or return an error code from a function, without writing tons of “cleanup” code or even thinking about the order in which resources must be cleaned up (which is usually done in opposite order of allocation). In fact, RAII should be used whenever possible to avoid serious errors or even cause a denial of service. For example, consider the following code:</p>

<p>```c++</p>

<h1>include <mutex></h1>

<h1>include <vector></h1>

<p>// Data structure that is supposed to be accessed by multiple threads.
struct shared_resource {</p>

<pre><code>std::mutex       mutex;
std::vector&lt;int&gt; data;
</code></pre>

<p>};</p>

<p>void foo(shared_resource &amp; res)
{</p>

<pre><code>// Acquire an exclusive lock to protect access to
// the object in multi-threaded environment.
res.mutex.lock();

// Modify the contents of the vector by adding 10 integers into it.
for (int i = 0; i &lt; 10; ++i)
    res.data.emplace_back(i);

// Once done changing the object, release the lock so that other threads
// can work with it. If we forget to unlock it, the process will basically
// hang trying to lock the mutex again, rendering our program useless.
res.mutex.unlock();
</code></pre>

<p>}
```</p>

<p>The above code is a classic example of an error that could lead to serious consequences. The problem is that anything could happen in between of <code>mutex.lock()</code> and <code>mutex.unlock()</code> statements, and the <code>mutex.unlock()</code> statement may not be executed shall <code>data.emplace_back()</code> throw an exception, leaving the program in the locked-up state.</p>

<p>Taking a good care of exceptions is a concept called <strong>exception safety</strong>. The above code is indeed not exception safe. However, this is not only about exceptions. For instance, if <code>emplace_back()</code> method was not throwing an exception and return code was used to signal an error, the erroneous code could have looked like this:</p>

<p>```c++
int foo(shared_resource &amp; res)
{</p>

<pre><code>res.mutex.lock();
for (int i = 0; i &lt; 10; ++i) {
    if (res.data.emplace_back(i) != 0) {
        return -1;
    }
}
res.mutex.unlock();
return 0;
</code></pre>

<p>}
```</p>

<p>Exception safety is out of the equation, yet the code is buggy. This is why RAII should (almost) always be used. The correct code should look like this:</p>

<p>```c++
void foo(shared_resource &amp; res)
{</p>

<pre><code>std::lock_guard&lt;std::mutex&gt; lock(res.mutex);
for (int i = 0; i &lt; 10; ++i)
    res.data.emplace_back(i);
</code></pre>

<p>}
```</p>

<p>In the above example, <a href="http://en.cppreference.com/w/cpp/thread/lock_guard"><code>std::lock_guard</code></a> object is locking a mutex in its constructor and unlocks it in its destructor. Thanks to RAII, the destructor is guaranteed to be called when the object goes out of scope no matter what. C++ is full of such “guard” objects. Many of them are part of the standard library, but developers can always create their own.</p>

<p>```c++</p>

<h1>include <cctype></h1>

<h1>include <fstream></h1>

<h1>include <iostream></h1>

<p>int main()
{</p>

<pre><code>std::ifstream file("test.txt");
char c;
while ((file &gt;&gt; c))
    std::cout &lt;&lt; (std::isalpha(c) ? c : '*');
</code></pre>

<p>}
```</p>

<p>In the above example, the file object will automatically close the file. In other words, C++ clearly wins this battle over RAII with all other languages since there is no need for any finally blocks, using statements or event Java’s new <code>try()</code> blocks.</p>

<p>What is interesting is that C#, Java, Python and other similar languages did not even have “using”-like statements for a long time. There was only <em>try-catch-finally</em> construct and programmers had no choice but to write a lot of boilerplate code. Albeit some programmers have consciously suffered from the lack of proper RAII support, many didn’t know that C++ not only supports RAII but also is the only language that does it properly. One day those guys wanted to write something in C++ and of course started to look for similar self-torture methods. Not able to find it, they asked Bjarne Stroustrup why doesn’t C++ provide a <code>finally</code> construct, and <a href="http://www.stroustrup.com/bs_faq2.html#finally">here is what he had to say</a>:</p>

<blockquote><p>Because C++ supports an alternative that is almost always better: The “resource acquisition is initialization” technique (TC++PL3 section 14.4). The basic idea is to represent a resource by a local object, so that the local object’s destructor will release the resource. That way, the programmer cannot forget to release the resource.
…
In a system, we need a “resource handle” class for each resource. However, we don’t have to have an “finally” clause for each acquisition of a resource. In realistic systems, there are far more resource acquisitions than kinds of resources, so the “resource acquisition is initialization” technique leads to less code than use of a “finally” construct.</p></blockquote>

<p>Boy was he right. Most today’s languages are now trying to resemble the same.</p>

<h2>RAII in C</h2>

<p>Everyone knows that C neither support exceptions nor it has a concept of RAII. That is not entirely true, but for the most part it is. You will not find anything about those features in C89, C99 or even C11 language standard specifications. Therefore, C developers have to be careful, disciplined, and clean up after themselves. Oftentimes, especially in somewhat low-level code like device driver, we can run into the code like this:</p>

<p>```c
static int pci_probe(struct pci_dev *pci_dev,</p>

<pre><code>                 const struct pci_device_id *dev_id)
</code></pre>

<p>{</p>

<pre><code>struct my_dev *dev;
int r;

dev = kzalloc(sizeof(struct my_dev), GFP_KERNEL);
if (unlikely(!dev))
    goto on_err;
pci_set_drvdata(pci_dev, dev);
dev-&gt;pci_dev = pci_dev;
r = pci_enable_device(pci_dev);
if (unlikely(r))
    goto on_enable_err;
pci_set_master(pci_dev);
pci_try_set_mwi(pci_dev);
dev-&gt;bar0 = ioremap_nocache(pci_resource_start(pci_dev, 0),
                            pci_resource_len(pci_dev, 0));
if (unlikely(!dev-&gt;bar0))
    goto on_bar0_map_err;
dev-&gt;bar2 = ioremap_nocache(pci_resource_start(pci_dev, 2),
                            pci_resource_len(pci_dev, 2));
if (unlikely(!dev-&gt;bar2))
    goto on_bar2_map_err;
r = a2gx_add_cdev(dev);
if (r)
    goto on_cdev_err;
return 0;
</code></pre>

<p>  on_cdev_err:</p>

<pre><code>iounmap(dev-&gt;bar2);
</code></pre>

<p>  on_bar2_map_err:</p>

<pre><code>iounmap(dev-&gt;bar0);
</code></pre>

<p>  on_bar0_map_err:</p>

<pre><code>pci_disable_device(pci_dev);
</code></pre>

<p>  on_enable_err:</p>

<pre><code>kfree(dev);
</code></pre>

<p>  on_err:</p>

<pre><code>return -1;
</code></pre>

<p>}
```</p>

<p>Many will find the above code difficult to read, hard to write, or both. Some would love to punch the author in the face for using goto. Others may not understand what is going on in there at all. But C is not just a programming language. C is a religion. For some, C code is a lot cleaner than anything else — nothing is hiding behind the scenes, what you see is what you get. The C code is usually thought trough — you have to think twice before you write it. In fact, some wouldn’t substitute it for anything else. At any rate, C developers usually cleanup after themselves.</p>

<p>On the other hand, the benefits or RAII are also obvious and there are people who would love to see a concept of RAII in C. But it is not a part of the language specification. However, imagine a world when programmers were not using things that are not standard. That world would have been terrible. Just imagine for a second that C++ developers wouldn’t have multi-threaded programs until C++11 standard was ratified with all of its quirks and perks like <code>std::thread</code>, <code>std::mutex</code>, <em>thread local storage</em> and so on.</p>

<p>Or how about not being able to specify symbol’s visibility or use other attributes? Luckily, being a non-standard feature doesn’t restrain people from using it. And as more people use some feature, more chances it has to be standardized. That said, C++11 now allows for generalized yet compiler-specific attributes, threading, static assertions, and tons of other stuff that was available before, was used before, too, but wasn’t a part of the standard. Well, now it is.</p>

<p>That being said, C also supports RAII. However, it is not part of the standard, at least not yet. Here is how it works — it is possible to specify a cleanup function for any auto function scope variable. In order to do that, a non-standard cleanup attribute must be specified. If you remember the example of a buggy non-exception-safe C++ function that uses a <em>mutex</em>, that code would look something like this in C:</p>

<p>```c
struct shared_resource {</p>

<pre><code>pthread_mutex_t   mutex;
struct int_vector data;
</code></pre>

<p>};</p>

<p>struct shared_resource {</p>

<pre><code>pthread_mutex_t   mutex;
struct int_vector data;
</code></pre>

<p>};</p>

<p>int int_vector_push_back(struct int_vector *data, int value);</p>

<p>int foo(struct shared_resource *res)
{</p>

<pre><code>int i;

if (pthread_mutex_lock(&amp;res-&gt;mutex) != 0)
    return -1; /* Oops, cannot lock the mutex. */
for (i = 0; i &lt; 10; ++i) {
    if (int_vector_push_back(&amp;res-&gt;data, i) != 0) {
        /* Oops, cannot add data into the vector! */
        return -1;
    }
}
pthread_mutex_unlock(&amp;res-&gt;mutex);
return 0; /* All is good */
</code></pre>

<p>}
```</p>

<p>Though it is a little bit hard to imagine that C programmer could write code like that. The code would probably look more like this (which is also functionally correct this time):</p>

<p>```c
int test(struct shared_resource *res)
{</p>

<pre><code>int r;
int i;

r = pthread_mutex_lock(&amp;res-&gt;mutex);
if (r)
    goto out;
for (i = 0; i &lt; 10; ++i) {
    r = int_vector_push_back(&amp;res-&gt;data, i);
    if (r)
        break;
}
pthread_mutex_unlock(&amp;res-&gt;mutex);
</code></pre>

<p>  out:</p>

<pre><code>return r;
</code></pre>

<p>}
```</p>

<p>Below is a RAII-like version of the code where mutex is guaranteed to be unlocked automatically, so it is possible to simply return from the function at any given point without worrying about it. This code closely resembles the behavior of a C++ example using <code>std::lock_guard</code> where <code>lock_guard_ctor</code> mimics <code>std::lock_guard::lock_guard</code> constructor that locks a <em>mutex</em>, and the <code>lock_guard_dtor</code> function is like <code>std::lock_guard::~lock_guard</code> destructor that unlocks the <em>mutex</em> (if it was locked) and is guaranteed to be called automatically:</p>

<p>```c
pthread_mutex_t <em>lock_guard_ctor(pthread_mutex_t </em>mutex) {</p>

<pre><code>return pthread_mutex_lock(mutex) == 0 ? mutex : NULL;
</code></pre>

<p>}</p>

<p>void lock_guard_dtor(pthread_mutex_t **mutex_ptr) {</p>

<pre><code>pthread_mutex_t *mutex = *mutex_ptr;
if (mutex != NULL)
    pthread_mutex_unlock(mutex);
</code></pre>

<p>}</p>

<p>int foo(struct shared_resource *res) {</p>

<pre><code>int i;
pthread_mutex_t *lock_guard
    __attribute__((cleanup(lock_guard_dtor)))
    = lock_guard_ctor(&amp;res-&gt;mutex);
if (lock_guard == NULL)
    return -1;
for (i = 0; i &lt; 10; ++i) {
    if (int_vector_push_back(&amp;res-&gt;data, i) != 0)
        return -1;
}
return 0;
</code></pre>

<p>}
```</p>

<p>The above code can also be simplified a bit with two simple steps. Step one is to have <code>lock_guard_ctor</code> and <code>lock_guard_dtor</code> functions defined somewhere else and be reusable. Because nobody writes custom constructors and destructor for a class every time they use it. Step number two is to get rid of a lot of typing by having a macro. For example, the common code that is written once could be:</p>

<p>```c</p>

<h1>include &lt;pthread.h></h1>

<p>extern pthread_mutex_t <em>lock_guard_ctor(pthread_mutex_t </em>mutex);
extern void lock_guard_dtor(pthread_mutex_t **mutex_ptr);</p>

<h1>define LOCK_GUARD(name, mutex)                   \</h1>

<pre><code>pthread_mutex_t * name                        \
    __attribute__((cleanup(lock_guard_dtor))) \
    = lock_guard_ctor((mutex))
</code></pre>

<p>```</p>

<p>And the code using this feature becomes a lot simpler:</p>

<p>```c
int foo(struct shared_resource *res)
{</p>

<pre><code>int i;
LOCK_GUARD(lock, &amp;res-&gt;mutex);
if (!lock)
    return -1;
for (i = 0; i &lt; 10; ++i) {
    if (int_vector_push_back(&amp;res-&gt;data, i) != 0)
        return -1;
}
return 0;
</code></pre>

<p>}
```</p>

<p>There are two possible ways for a compiler to implement a cleanup attribute. If exceptions are not enabled, it would generate the boilerplate code similar to that otherwise written by the programmer manually. If exceptions are enabled then compiler would generate the code that executes a cleanup function during the stack unwinding (yes, there are exceptions in C, too).</p>

<p>Note that cleanup attribute cannot be used for global variables. constructor and destructor attributes should be used instead. The constructor attribute causes the function to be called automatically before execution enters <code>main()</code>. Similarly, the destructor attribute causes the function to be called automatically after <code>main()</code> completes or <code>exit()</code> is called. Functions with these attributes are useful for initializing data that is used implicitly during the execution of the program. It is also possible to manually control the order of execution by specifying priority number (optional).</p>

<p>The techniques described above are available at least in today’s leading C compilers — GCC and Clang. Remember, the future of the language is in hands of its users. If you really like the feature and it is not standard — use it, spread the world, write a feedback to compiler developers and language standard committee. It will definitely help to make it into the next standard revision.</p>

<p>Let the force be with you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++11 Final Override]]></title>
    <link href="http://741MHz.com/final-override/"/>
    <updated>2013-02-27T00:00:00-05:00</updated>
    <id>http://741MHz.com/final-override</id>
    <content type="html"><![CDATA[<h2>Preface</h2>

<p>The alternative name for this article is “How to protect yourself from others when it comes to polymorphism.” That is pretty much the primary purpose of two brand new C++ keywords introduced in C++11 — the <code>override</code> and <code>final</code>.</p>

<p>Those who have at least some experience in team-based C++ development must be aware of at least one of many pitfalls of polymorphism and virtual methods in particular. Let’s go over some of real-world problems that could easily force developers to run a debugger or read the code over and over again trying to figure out why the program is not working as expected.</p>

<h2>A Missing Virtual Function</h2>

<p>This could happen to anyone — there was a base class with a virtual function and developer has decided to overload it for a good reason. Everything was fine and the program worked as expected. But one day after, a fresh build simply stopped working, and the reason is not obvious. After spending some time debugging the program, it turned out that a function that should have been called does not appear to be called at all. What could be wrong?</p>

<p>Consider the following code where the Foo class is written by one developer while Bar was written by someone else and could even be part of another project:</p>

<p>```c++
class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

virtual int init() {
    do_very_important_stuff();
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

virtual int init() {
    Foo::init();
    do_some_more_important_stuff();
}
</code></pre>

<p>};
```</p>

<p>A few years later a new developer joins the company and accidentally removes a virtual keyword from the <code>init()</code> method’s declaration of class <em>Foo</em>. How that could even happen, you may ask? Maybe he was learning Emacs and executed a <em>replace-regexp</em> command without noticing all of the changes. Or maybe he just read the <em>Code Refactoring</em> book and decided to improve the code but couldn’t check all of the usages of class <em>Foo</em> because they were in a different repository that he didn’t have access to. Who knows? Things happen. As a result, the <code>Bar::init()</code> is no longer called because it does no longer override its base method. For example:</p>

<p>```c++</p>

<h1>include <iostream></h1>

<h1>include <memory></h1>

<p>class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

int init() {
    std::cout &lt;&lt; "Hello, World!\n";
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

virtual int init() {
    Foo::init();
    std::cout &lt;&lt; "The code is working!\n";
}
</code></pre>

<p>};</p>

<p>int main() {</p>

<pre><code>std::unique_ptr&lt;Foo&gt; foo(new Bar());
foo-&gt;init();
</code></pre>

<p>}
```</p>

<p>The above program will not print an expected “The code is working!” line and someone would definitely waste some time trying to figure out why, especially if the project has a few million lines of code.</p>

<h2>A Million Dollars Typo</h2>

<p>Typos can also cause a lot of troubles. For example, developers can misspell the name of the method when overriding:</p>

<p>```c++</p>

<h1>include <iostream></h1>

<h1>include <memory></h1>

<p>class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

virtual void doSomeVeryImportantWork() {
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

virtual void doSomeVeryInportantWork() {
    std::cout &lt;&lt; "The code is working!\n";
}
</code></pre>

<p>};</p>

<p>int main() {</p>

<pre><code>std::unique_ptr&lt;Foo&gt; foo(new Bar());
foo-&gt;doSomeVeryImportantWork();
</code></pre>

<p>}
```</p>

<p>The above program prints nothing despite the expectations and the reason is not immediately obvious.</p>

<h2>Signature Changes</h2>

<p>Signature change is another seemingly innocent change that may potentially waste a log of valuable time when not accounted for properly. For example, the base class’s <code>init()</code> function is changed from this:</p>

<pre><code>virtual void init() { }
</code></pre>

<p>… to this:</p>

<pre><code>virtual void init(int x = 0) {
}
</code></pre>

<p>The whole project still compiles just fine. Yet the program doesn’t work as expected anymore.</p>

<p>It’s also possible to accidentally override someone’s virtual function, etc. The list of such gotchas can go on and on. For those who can relate to this — you must know that you are not alone! C++ developers including myself have dealt with this and similar problems for the past few decades.</p>

<p>Luckily, since introduction of the C++11 the sun is shining on our side of the fence!</p>

<h2>We Override!</h2>

<p>Instead of using (or not using) a <code>virtual</code> keyword and assuming the base class has the method being overridden, we can now use the brand new <code>override</code> keyword. The compiler will then make sure that a method declared with that keyword really overrides the base method. And if that turns out to be not the case, the code won’t compile and the error would be caught during compilation, which is a lot better than debugging. The following is the new version of the first example:</p>

<p>```c++
class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

int init() override {
    Foo::init();
    std::cout &lt;&lt; "The code is working!\n";
}
</code></pre>

<p>};
```</p>

<p>The compilation fails if the base class`s init() method is no longer there:</p>

<pre><code>error: ‘int Bar::init()’ marked override, but does not override
</code></pre>

<h2>It’s Final!</h2>

<p>The second keyword is <code>final</code>. It is a little bit less useful but is still a good self-defense mechanism against unintended usage and/or code changes.</p>

<p>What it means is that a method marked as final is not only virtual and must override its base but that nobody else can further override it. For example:</p>

<p>```c++</p>

<h1>include <iostream></h1>

<h1>include <memory></h1>

<p>class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

virtual int init() {
    std::cout &lt;&lt; "Hello, World!\n";
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
~Bar() override { }

int init() final {
    Foo::init();
    std::cout &lt;&lt; "This code works!\n";
}
</code></pre>

<p>};</p>

<p>int main() {</p>

<pre><code>std::unique_ptr&lt;Foo&gt; foo(new Bar());
foo-&gt;init();
</code></pre>

<p>}
```</p>

<p>The above code is sound and secure. But if somebody else would try to write a class like this:</p>

<p>```c++
class BetterBar : public Bar {
public:</p>

<pre><code>BetterBar() { }
~BetterBar() override { }

int init() override {
    Bar::init();
    std::cout &lt;&lt; "Even better init() function!\n";
}
</code></pre>

<p>};
```</p>

<p>… a compiler would tell them that they are wrong by issuing an error: </p>

<pre><code>error: virtual function ‘virtual int BetterBar::init()’
error: overriding final function ‘virtual int Bar::init()’
</code></pre>

<p>The <code>final</code> keyword can also be applied to the whole class in order to prevent further derivation from it. For example:</p>

<p>```c++
class Bar final : public Foo {
  public:</p>

<pre><code>Bar() {}
</code></pre>

<p>&hellip;
```</p>

<p>If anyone tries to inherit from Bar, the compiler issues an error: </p>

<pre><code>error: cannot derive from ‘final’ base ‘Bar’ in derived type ‘BetterBar’
</code></pre>

<p>What is interesting is that almost the same effect can be achieved in a less obvious way by applying the <code>final</code> keyword to a virtual destructor of either base (which is not the same as <code>final</code> in this case because it introduces a virtual table) or any derived class:</p>

<p>```c++
class Foo { // You cannot derive from me!
public:</p>

<pre><code>Foo() { }
virtual ~Foo() final { }
</code></pre>

<p>};
```</p>

<p>Template containers from the standard C++ library might be good candidates to be marked with a final keyword, as it is generally not a good idea to derive from them in almost every case.</p>

<h2>Conclusion</h2>

<p>C++11 introduces two important keywords in relation to polymorphism and inheritance — the <code>override</code> and <code>final</code>. Using those keywords should become a habit of any C++ developer. It is worth using every time except when writing a base class. This will make the code clear, maintainable, and potentially save hours that would have been otherwise wasted chasing an error in debugger.</p>

<h2>References</h2>

<ul>
<li><a href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2009/n2928.htm">N2928</a> &ndash; Explicit Virtual Overrides</li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm">N3206</a> &ndash; Override control: Eliminating Attributes</li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm">N3272</a> &ndash; Follow-up on override control</li>
<li><a href="http://clang.llvm.org/cxx_status.html">Clang C++11 Status Report</a></li>
<li><a href="http://gcc.gnu.org/projects/cxx0x.html">GCC C++11 Status Report</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
