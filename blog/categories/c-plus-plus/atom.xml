<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | Ranting @ 741 MHz]]></title>
  <link href="http://741MHz.com/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://741MHz.com/"/>
  <updated>2013-12-01T20:24:12-05:00</updated>
  <id>http://741MHz.com/</id>
  <author>
    <name><![CDATA[741MHz.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++11 Final Override]]></title>
    <link href="http://741MHz.com/final-override/"/>
    <updated>2013-02-27T00:00:00-05:00</updated>
    <id>http://741MHz.com/final-override</id>
    <content type="html"><![CDATA[<h2>Preface</h2>

<p>The alternative name for this article is “How to protect yourself from others when it comes to polymorphism.” That is pretty much the primary purpose of two brand new C++ keywords introduced in C++11 — the <code>override</code> and <code>final</code>.</p>

<p>Those who have at least some experience in team-based C++ development must be aware of at least one of many pitfalls of polymorphism and virtual methods in particular. Let’s go over some of real-world problems that could easily force developers to run a debugger or read the code over and over again trying to figure out why the program is not working as expected.</p>

<h2>A Missing Virtual Function</h2>

<p>This could happen to anyone — there was a base class with a virtual function and developer has decided to overload it for a good reason. Everything was fine and the program worked as expected. But one day after, a fresh build simply stopped working, and the reason is not obvious. After spending some time debugging the program, it turned out that a function that should have been called does not appear to be called at all. What could be wrong?</p>

<p>Consider the following code where the Foo class is written by one developer while Bar was written by someone else and could even be part of another project:</p>

<p>```c++
class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

virtual int init() {
    do_very_important_stuff();
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

virtual int init() {
    Foo::init();
    do_some_more_important_stuff();
}
</code></pre>

<p>};
```</p>

<p>A few years later a new developer joins the company and accidentally removes a virtual keyword from the <code>init()</code> method’s declaration of class <em>Foo</em>. How that could even happen, you may ask? Maybe he was learning Emacs and executed a <em>replace-regexp</em> command without noticing all of the changes. Or maybe he just read the <em>Code Refactoring</em> book and decided to improve the code but couldn’t check all of the usages of class <em>Foo</em> because they were in a different repository that he didn’t have access to. Who knows? Things happen. As a result, the <code>Bar::init()</code> is no longer called because it does no longer override its base method. For example:</p>

<p>```c++</p>

<h1>include <iostream></h1>

<h1>include <memory></h1>

<p>class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

int init() {
    std::cout &lt;&lt; "Hello, World!\n";
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

virtual int init() {
    Foo::init();
    std::cout &lt;&lt; "The code is working!\n";
}
</code></pre>

<p>};</p>

<p>int main() {</p>

<pre><code>std::unique_ptr&lt;Foo&gt; foo(new Bar());
foo-&gt;init();
</code></pre>

<p>}
```</p>

<p>The above program will not print an expected “The code is working!” line and someone would definitely waste some time trying to figure out why, especially if the project has a few million lines of code.</p>

<h2>A Million Dollars Typo</h2>

<p>Typos can also cause a lot of troubles. For example, developers can misspell the name of the method when overriding:</p>

<p>```c++</p>

<h1>include <iostream></h1>

<h1>include <memory></h1>

<p>class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

virtual void doSomeVeryImportantWork() {
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

virtual void doSomeVeryInportantWork() {
    std::cout &lt;&lt; "The code is working!\n";
}
</code></pre>

<p>};</p>

<p>int main() {</p>

<pre><code>std::unique_ptr&lt;Foo&gt; foo(new Bar());
foo-&gt;doSomeVeryImportantWork();
</code></pre>

<p>}
```</p>

<p>The above program prints nothing despite the expectations and the reason is not immediately obvious.</p>

<h2>Signature Changes</h2>

<p>Signature change is another seemingly innocent change that may potentially waste a log of valuable time when not accounted for properly. For example, the base class’s <code>init()</code> function is changed from this:</p>

<pre><code>virtual void init() { }
</code></pre>

<p>… to this:</p>

<pre><code>virtual void init(int x = 0) {
}
</code></pre>

<p>The whole project still compiles just fine. Yet the program doesn’t work as expected anymore.</p>

<p>It’s also possible to accidentally override someone’s virtual function, etc. The list of such gotchas can go on and on. For those who can relate to this — you must know that you are not alone! C++ developers including myself have dealt with this and similar problems for the past few decades.</p>

<p>Luckily, since introduction of the C++11 the sun is shining on our side of the fence!</p>

<h2>We Override!</h2>

<p>Instead of using (or not using) a <code>virtual</code> keyword and assuming the base class has the method being overridden, we can now use the brand new <code>override</code> keyword. The compiler will then make sure that a method declared with that keyword really overrides the base method. And if that turns out to be not the case, the code won’t compile and the error would be caught during compilation, which is a lot better than debugging. The following is the new version of the first example:</p>

<p>```c++
class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

int init() override {
    Foo::init();
    std::cout &lt;&lt; "The code is working!\n";
}
</code></pre>

<p>};
```</p>

<p>The compilation fails if the base class`s init() method is no longer there:</p>

<pre><code>error: ‘int Bar::init()’ marked override, but does not override
</code></pre>

<h2>It’s Final!</h2>

<p>The second keyword is <code>final</code>. It is a little bit less useful but is still a good self-defense mechanism against unintended usage and/or code changes.</p>

<p>What it means is that a method marked as final is not only virtual and must override its base but that nobody else can further override it. For example:</p>

<p>```c++</p>

<h1>include <iostream></h1>

<h1>include <memory></h1>

<p>class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

virtual int init() {
    std::cout &lt;&lt; "Hello, World!\n";
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
~Bar() override { }

int init() final {
    Foo::init();
    std::cout &lt;&lt; "This code works!\n";
}
</code></pre>

<p>};</p>

<p>int main() {</p>

<pre><code>std::unique_ptr&lt;Foo&gt; foo(new Bar());
foo-&gt;init();
</code></pre>

<p>}
```</p>

<p>The above code is sound and secure. But if somebody else would try to write a class like this:</p>

<p>```c++
class BetterBar : public Bar {
public:</p>

<pre><code>BetterBar() { }
~BetterBar() override { }

int init() override {
    Bar::init();
    std::cout &lt;&lt; "Even better init() function!\n";
}
</code></pre>

<p>};
```</p>

<p>… a compiler would tell them that they are wrong by issuing an error: </p>

<pre><code>error: virtual function ‘virtual int BetterBar::init()’
error: overriding final function ‘virtual int Bar::init()’
</code></pre>

<p>The <code>final</code> keyword can also be applied to the whole class in order to prevent further derivation from it. For example:</p>

<p>```c++
class Bar final : public Foo {
  public:</p>

<pre><code>Bar() {}
</code></pre>

<p>&hellip;
```</p>

<p>If anyone tries to inherit from Bar, the compiler issues an error: </p>

<pre><code>error: cannot derive from ‘final’ base ‘Bar’ in derived type ‘BetterBar’
</code></pre>

<p>What is interesting is that almost the same effect can be achieved in a less obvious way by applying the <code>final</code> keyword to a virtual destructor of either base (which is not the same as <code>final</code> in this case because it introduces a virtual table) or any derived class:</p>

<p>```c++
class Foo { // You cannot derive from me!
public:</p>

<pre><code>Foo() { }
virtual ~Foo() final { }
</code></pre>

<p>};
```</p>

<p>Template containers from the standard C++ library might be good candidates to be marked with a final keyword, as it is generally not a good idea to derive from them in almost every case.</p>

<h2>Conclusion</h2>

<p>C++11 introduces two important keywords in relation to polymorphism and inheritance — the <code>override</code> and <code>final</code>. Using those keywords should become a habit of any C++ developer. It is worth using every time except when writing a base class. This will make the code clear, maintainable, and potentially save hours that would have been otherwise wasted chasing an error in debugger.</p>

<h2>References</h2>

<ul>
<li><a href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2009/n2928.htm">N2928</a> &ndash; Explicit Virtual Overrides</li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm">N3206</a> &ndash; Override control: Eliminating Attributes</li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm">N3272</a> &ndash; Follow-up on override control</li>
<li><a href="http://clang.llvm.org/cxx_status.html">Clang C++11 Status Report</a></li>
<li><a href="http://gcc.gnu.org/projects/cxx0x.html">GCC C++11 Status Report</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Not To Write a Signal Handler]]></title>
    <link href="http://741MHz.com/signal-handler/"/>
    <updated>2013-01-15T00:00:00-05:00</updated>
    <id>http://741MHz.com/signal-handler</id>
    <content type="html"><![CDATA[<p>Back in the day, I was reading a book about UNIX® programming and have learned how to write a signal handler. It was a long time ago and I don’t remember the book, but to this day the way described in that book is something that shows up in Google’s top results when you search for “How to write a signal handler”. Here it is — a simple, elegant solution to the world’s toughest problem:</p>

<p>```c++ A simple, elegant solution to the world’s toughest problem.</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;signal.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;unistd.h></h1>

<p>static void my_sig_handler(int signum) {</p>

<pre><code>printf("Received interrupt signal!\n");
</code></pre>

<p>}</p>

<p>int main() {</p>

<pre><code>signal(SIGINT, my_sig_handler);
for (;;) {
    printf("Doing useful stuff...\n");
    sleep(1); /* Sleep is not only useful, it is essential! */
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>Now imagine for a second that instead of a simple invocation of <code>sleep()</code> in the body of the <code>main()</code> function, just after the <code>printf()</code>, there was some very important code running a life support system and someone’s life was really dependent on that. What would have happened? Someone would not have been alive for long — that’s for sure. And the terrible signal handling is to blame and here is why…</p>

<h2>You Have Been Warned</h2>

<p>Let’s take a quick look at Linux® manual page for a <code>signal()</code> call. You can find by typing <code>man 2 signal</code> in the command line, or by checking it out online, here — <a href="http://man7.org/linux/man-pages/man2/signal.2.html">http://man7.org/linux/man-pages/man2/signal.2.html</a>. The first sentence in the manual page introduces you to the <code>signal()</code> call. The second sentence, now in bold, warns you, and I quote:</p>

<blockquote><p>Avoid its use: use sigaction(2) instead.</p></blockquote>

<h2>Your Computer Might Take a Trip to a Grocery Store</h2>

<p>Continuing reading the manual page, the very first note under the NOTES section is this:</p>

<blockquote><p>The effects of signal() in a multithreaded process are unspecified.</p></blockquote>

<p>This is called <a href="http://en.wikipedia.org/wiki/Unspecified_behavior">Unspecified Behavior</a>. What it means is that standard does not say anything as for how the function should behave in a multi-threaded environment. Therefore, it may exhibit a different behavior on different systems including different versions of the same system, at discretion of those who implement it. Your mileage may vary.</p>

<p>Even if your code does not explicitly use multiple threads, you are still in danger — it might be used as part of a bigger program in multi-threaded environment. But even if that’s not that case — hey, tomorrow you might want to do that. Do you really want to screw yourself upfront by using this bad <code>signal()</code> function? Think twice.</p>

<h2>Asynchronicity &amp; Reentrancy</h2>

<p>Signals are asynchronous by their nature. Another signal may be delivered to the process while the previous signal is still being “processed”. Therefore, signal handler must not introduce unwanted side effects, must be fully reentrant and cannot use any non-reentrant code — neither explicitly nor implicitly. Now take a quick look at the famous example mentioned at the beginning — there is a nice <code>printf()</code> right in the signal handler code. This is a life threatening piece of code because <code>printf()</code> is non-reentrant. In other words, it is possible that <code>printf()</code> function will get interrupted before it finishes and get called again as part of another signal handler. If that case the program will simply <a href="http://en.wikipedia.org/wiki/Deadlock">deadlock</a>.</p>

<h2>Async-Signal-Safe Functions</h2>

<p>The section 7 of the manual page about signal (which you can see by typing <code>man 7 signal</code> in your terminal or read online here — <a href="http://man7.org/linux/man-pages/man7/signal.7.html">http://man7.org/linux/man-pages/man7/signal.7.html</a>) states the following:</p>

<blockquote><p><strong>Async-signal-safe functions</strong>
A signal handler function must be very careful, since processing elsewhere may be interrupted at some arbitrary point in the execution of the program. POSIX has the concept of “safe function”. If a signal interrupts the execution of an unsafe function, and handler calls an unsafe function, then the behavior of the program is undefined.</p></blockquote>

<p>And then it lists all async-signal-safe functions. So if you don’t know what functions are safe to use inside a signal handler and what functions are not — refer to that list and make sure you are not doing anything dangerous.</p>

<h2>Better Safe Than Sorry</h2>

<p>What is the best way not to become a drag addict? Not to take drugs in the first place. What is the best way to write a safe signal handler? Not to write it all. OK, I am just kidding. Seriously though — if you really want your signal handler to be safe and portable, consider not doing anything inside it except modifying a global <a href="http://en.wikipedia.org/wiki/Volatile_variable">volatile</a> variable of <a href="http://en.cppreference.com/w/cpp/utility/program/sig_atomic_t"><code>sig_atomic_t</code></a> type. Taking all of the above into account, below is an example of how a safe signal handler may look like in real life (note the absence of <code>signal()</code> function in the code):</p>

<p>```c++ Simple and safe signal handling</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;signal.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;unistd.h></h1>

<p>static volatile sig_atomic_t got_signal = 0;</p>

<p>static void my_sig_handler(int signo)
{</p>

<pre><code>got_signal = 1;
</code></pre>

<p>}</p>

<p>int main()
{</p>

<pre><code>struct sigaction sa;

memset(&amp;sa, 0, sizeof(struct sigaction));
sa.sa_handler = &amp;my_sig_handler;
if (sigaction(SIGINT, &amp;sa, NULL) == -1) {
    perror("sigaction");
    return EXIT_FAILURE;
}

for (;;) {
    if (got_signal) {
        got_signal = 0;
        printf("Received interrupt signal!\n");
    }
    printf("Doing useful stuff...\n");
    sleep(1); /* Sleep is not only useful, it is essential! */
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<h2>Modern Signal Handling</h2>

<p>It is the 2013th year in the Common Era at the moment of this writing and you might think that people should have came up with something better in terms of signal handling at this time. The truth is that they did. It is just not that well known yet due to a huge momentum of outdated information still overflowing the Internet.</p>

<h3>FreeBSD, NetBSD, OS X, iOS…</h3>

<p>In the above family of operating systems, the modern way of handling signals is to use <a href="http://en.wikipedia.org/wiki/Kqueue">Kqueue</a> — a scalable event notification mechanism. Here is an example:</p>

<p>```c++ Kqueue Signal Handling</p>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;sys/event.h></h1>

<h1>include &lt;sys/time.h></h1>

<h1>include &lt;signal.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;errno.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>int kq;
int i;
struct kevent ke;
struct timespec timeout;
struct sigaction sa;

/* Block the signal we want to process with kevent first.
   This is needed because kevent has lower precedence. */
memset(&amp;sa, 0, sizeof(struct sigaction));
sa.sa_handler = SIG_IGN;
sigaction(SIGINT, &amp;sa, NULL);

/* Create kqueue... */
kq = kqueue();
if (kq == -1) {
    return EXIT_FAILURE;
}
/* Add a signal event */
EV_SET(&amp;ke, SIGINT, EVFILT_SIGNAL, EV_ADD, 0, 0, NULL);
i = kevent(kq, &amp;ke, 1, NULL, 0, NULL);
if (i == -1)
    return EXIT_FAILURE;
/* Set a timeout (we no longer need to use a blocking sleep(1),
   and this is great! */
timeout.tv_sec = 1; /* To sleep for one second */
timeout.tv_nsec = 0;

/* Dispatch events */
for (;;) {
    i = kevent(kq, NULL, 0, &amp;ke, 1, &amp;timeout);
    if (i &gt; 0) {
        /* Got event(s) to dispatch. Note that we can do whatever the hell
           we want here because we are __not__ in the signal handler. */
        if (ke.ident == SIGINT) {
            printf("Received interrupt signal!\n");
        }
    } else if (i == 0) {
        /* Timeout elapsed */
        printf("Doing useful stuff...\n");
    } else if (i == -1) {
        if (errno == EINTR)
            continue; /* System call interrupted - just restart */
        return EXIT_FAILURE; /* Something went wrong. */
    }
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<h3>Linux</h3>

<p>Linux provides <code>signalfd()</code> for handling signals. The beauty of it is that it may be used by itself, or may be combined with event notification mechanisms such as <code>epoll()</code> and friends. The manual page for <code>signalfd()</code> comes with a good example, so I don’t even have to write one. Here it is:</p>

<p>```c++ Signalfd &amp; Epoll Signal Handling</p>

<h1>include &lt;sys/signalfd.h></h1>

<h1>include &lt;signal.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>define handle_error(msg)                               \</h1>

<pre><code>do { perror(msg); exit(EXIT_FAILURE); } while (0)
</code></pre>

<p>int
main(int argc, char *argv[])
{</p>

<pre><code>sigset_t mask;
int sfd;
struct signalfd_siginfo fdsi;
ssize_t s;

sigemptyset(&amp;mask);
sigaddset(&amp;mask, SIGINT);
sigaddset(&amp;mask, SIGQUIT);

/* Block signals so that they aren't handled
   according to their default dispositions */

if (sigprocmask(SIG_BLOCK, &amp;mask, NULL) == -1)
    handle_error("sigprocmask");

sfd = signalfd(-1, &amp;mask, 0);
if (sfd == -1)
    handle_error("signalfd");

for (;;) {
    s = read(sfd, &amp;fdsi, sizeof(struct signalfd_siginfo));
    if (s != sizeof(struct signalfd_siginfo))
        handle_error("read");

    if (fdsi.ssi_signo == SIGINT) {
        printf("Got SIGINT\n");
    } else if (fdsi.ssi_signo == SIGQUIT) {
        printf("Got SIGQUIT\n");
        exit(EXIT_SUCCESS);
    } else {
        printf("Read unexpected signal\n");
    }
}
</code></pre>

<p>}
```</p>

<h2>Make the world a better place!</h2>

<p>Please make the world a better place by writing correct and safe signal handling code.</p>

<p>Thank you very much for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erasing Vector The Smart Way]]></title>
    <link href="http://741MHz.com/vector-erase/"/>
    <updated>2013-01-14T00:00:00-05:00</updated>
    <id>http://741MHz.com/vector-erase</id>
    <content type="html"><![CDATA[<p>In the C++ world, <a href="http://en.cppreference.com/w/cpp/container/vector"><code>std::vector</code></a> is a <a href="http://en.wikipedia.org/wiki/Sequence_container_(C%2B%2B">sequence container</a>) that encapsulates <a href="http://en.wikipedia.org/wiki/Dynamic_array">dynamic size arrays</a>. One of the main perks of the vector is the fact that elements are stored <strong>contiguously</strong>. In other words, a pointer to an element of a vector may be passed to any function that expects a pointer to an element of array. Or simply put — <code>std::vector</code> is very close to a <a href="http://www.cplusplus.com/doc/tutorial/arrays/">plain old-school C-style array</a>, yet it provides developers with a lot of C++ perks like automatic memory management, bounds checking and more. Unfortunately, <code>std::vector</code> is so great that many developers are using it without really thinking too much about the underlying implementation and its downsides.</p>

<h2>Erase Trap</h2>

<p>A common programming task is to remove one or more elements from the vector. Luckily, <code>std::vector</code> provides a wonderful method called <code>erase()</code> that does exactly that. So what’s the big deal? It’s a trap!</p>

<p>C++ is just like medicine — it is both a cure and a disease. Vector is no exception. Its contiguous memory layout may heal, or it may kill. In this case it is a serial killer. Let’s see why.</p>

<h2>The Innocent Piece of Code</h2>

<p>Let’s take a look at the real-world example that I ran into a few days ago. The goal was to remove all even numbers from a vector, leaving only odd ones. Here is how it was implemented:</p>

<p>```c++
std::vector<int>::iterator it = array.begin();
while (it != array.end()) {</p>

<pre><code>if (*it % 2 == 0)
    it = array.erase(it);
else
    ++it;
</code></pre>

<p>}
```</p>

<p>Logically thinking, the code is very sound — every element is being checked and removed only if it matches a given criteria. Developer even took extra care not to access invalidated iterator. Sounds like a great job. Nice, simple, and it works. Or does it?</p>

<h2>The Problem</h2>

<p>No, it does not. There is one big problem with that code that makes it totally useless. It takes about 55 seconds to run on just one million random elements. Why does that happen, you may ask? The developer  fell into a common trap! That happened because the elements of the vector are stored contiguously, in a contiguous memory and the whole vector is shifted left every time an element is erased. In other words — one does not simply erase an element that is not at the end of the vector.</p>

<h2>The Solution</h2>

<p>Here is the right way of doing this:</p>

<p>```c++
array.erase(</p>

<pre><code>std::remove_if(
    array.begin(), array.end(), [](int v) {
        return v % 2 == 0;
    }
),
array.end()
</code></pre>

<p>);
```</p>

<p>The above code does the job in only 5 milliseconds. That is about eleven thousand times faster. What kind of sorcery is that? Very simple — <a href="http://en.cppreference.com/w/cpp/algorithm/remove"><code>std::remove_if()</code></a> does not erase elements from the vector. It does’t remove anything either. Just a good naming joke. So what the hell it does? It re-arranges elements in such a way that elements to be erased are moved towards the end of a vector. Once the job is done, all elements are erased from the vector with a single invocation of <code>erase()</code>. As a result, the whole vector is not shifted tens of thousands of times and runs a lot faster.</p>

<h2>The Conclusion</h2>

<p>There ain’t no such thing as a free lunch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Switch Statement Down to Machine Code]]></title>
    <link href="http://741MHz.com/switch/"/>
    <updated>2013-01-13T00:00:00-05:00</updated>
    <id>http://741MHz.com/switch</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Most of us know what a <a href="http://en.wikipedia.org/wiki/Switch_statement"><em>switch</em> statement</a> is and have probably been using it very often. No wonder why — switch statement is simple yet extremely expressive. It allows keeping the code compact while describing complex <a href="http://en.wikipedia.org/wiki/Control_flow">control flow</a>. Putting the <a href="http://en.wikipedia.org/wiki/Syntactic_sugar">syntactic sugar</a> aside, most developers also believe that using a switch statement results in a lot better, faster code. Not many knows if that is really true and why. The most common speculations supporting superior switch statement performance are:</p>

<ul>
<li>Compilers implement switch as a <a href="http://en.wikipedia.org/wiki/Branch_table">jump table</a> and it is faster than an average number of conditional branches that the code would have taken otherwise. Therefore, the code generated from switch expressions is executed faster than if-then-else.</li>
<li>Compilers generate a <a href="http://en.wikipedia.org/wiki/Binary_search_algorithm">binary lookup</a> table to match the input value when using switch statement. The binary search algorithm’s worst performance is O(log n). It is a faster than O(n) worst case performance of a <a href="http://en.wikipedia.org/wiki/Linear_search">linear search</a>. Therefore, switch is faster.</li>
</ul>


<p>It all sounds good in theory. Yet not many understand switch statements down to the machine code level and even less have checked what their compilers do. By the way, why cannot a compiler optimize an if-then-else code the same way it optimizes a switch? Maybe it can? Let’s find out!</p>

<p>We’ll use the two most popular production quality compilers — GCC (version 4.7.2, released 20 Sep 2012) and Clang (version 3.0, released December 01, 2011).</p>

<p>In both cases, we will be compiling the code for Intel® Xeon® <a href="http://ark.intel.com/products/47924/Intel-Xeon-Processor-E5630-12M-Cache-2_53-GHz-5_86-GTs-Intel-QPI">E5630</a> CPU with enabled compiler optimizations (either «-O2», «-O3» or «-Os»).</p>

<p>The knowledge of <a href="http://en.wikipedia.org/wiki/X86-64">x86_64</a> <a href="http://en.wikipedia.org/wiki/Assembly_language">assembly language</a> is not required but some understanding of what it is and how CPU process low-level instructions might be helpful.</p>

<h2>Simple Switch</h2>

<p>Let’s start by looking at a very simple switch statement. It has six case labels, does not have a default case, and has no fall-trough cases so each case is followed by a break statement:</p>

<p>```c++</p>

<h1>include &lt;time.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>srand(time(NULL));
switch (rand()) {
case 0:
    printf("zero\n");
    break;
case 1:
    printf("one\n");
    break;
case 2:
    printf("two\n");
    break;
case 3:
    printf("three\n");
    break;
case 4:
    printf("four\n");
    break;
case 5:
    printf("five\n");
    break;
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>It would be logical to assume that the above code would be translated into a jump table. To verify this assumption, we need to disassemble the binary generated by the compiler and check how the machine code looks like.</p>

<p>Below is a disassembly of the binary generated by GCC compiler. Each line has a comment on the right that starts with <code>;</code> character:</p>

<p><code>
4004f7:       cmp    eax,0x5                    ; Compare the value with 5.
4004fa:       ja     400518 &lt;main+0x38&gt;         ; Jump to exit if the value is greater than 5.
4004fc:       mov    eax,eax                    ; Clear 32 to 63 bits
4004fe:       xchg   ax,ax                      ; NOP
400500:       jmp    QWORD PTR [rax*8+0x400738] ; Jump to address 0x400738[%rax]
400507:       mov    edi,0x40072c               ; Set "five" as a parameter.
40050c:       call   400490 &lt;puts@plt&gt;          ; Call "puts()".
400511:       nop    DWORD PTR [rax+0x0]        ; NOP
400518:       xor    eax,eax                    ; Zero return code.
40051a:       add    rsp,0x8                    ; Pop stack (stack grows inward).
40051e:       ret                               ; Return from the main() function.
40051f:       mov    edi,0x400727               ; Set "four" as a parameter.
400524:       call   400490 &lt;puts@plt&gt;          ; Call "puts()".
400529:       jmp    400518 &lt;main+0x38&gt;         ; Jump to exit.
40052b:       mov    edi,0x400714               ; Set "three" as a parameter.
400530:       call   400490 &lt;puts@plt&gt;          ; Call "puts()".
400535:       jmp    400518 &lt;main+0x38&gt;         ; Jump to exit.
400537:       mov    edi,0x400719               ; Set "two" as a parameter.
40053c:       call   400490 &lt;puts@plt&gt;          ; Call "puts()".
400541:       jmp    400518 &lt;main+0x38&gt;         ; Jump to exit.
400543:       mov    edi,0x40071d               ; Set "one" as a parameter.
400548:       call   400490 &lt;puts@plt&gt;          ; Call "puts()".
40054d:       nop    DWORD PTR [rax]            ; NOP
400550:       jmp    400518 &lt;main+0x38&gt;         ; Jump to exit.
400552:       mov    edi,0x400721               ; Set "zero" as a parameter.
400557:       call   400490 &lt;puts@plt&gt;          ; Call "puts()".
40055c:       jmp    400518 &lt;main+0x38&gt;         ; Jump to exit.
40055e:       xchg   ax,ax                      ; Unreachable NOP (padding).
</code></p>

<p>As we can see, GCC has generated the code that uses an indirect jump transferring execution of the program to a code location depending on the input value using a combination of cmp and ja instructions. This is a simple case of a jump table.</p>

<p>To see what other compilers might do, let’s look at the disassembly of the same program compiler by Clang:</p>

<p><code>
4005a7: cmp    eax,0x5                     ; Compare the value with 5.
4005aa: ja     4005e2 &lt;main+0x52&gt;          ; Jump to exit if value is &gt; 5.
4005ac: mov    eax,eax                     ; Convert 32-bit to 64-bit (clear upper half).
4005ae: jmp    QWORD PTR [rax*8+0x4006e0]  ; Jump to a relative address using %rax as the index.
4005b5: mov    edi,0x400710                ; Push "zero" as parameter.
4005ba: jmp    4005dd &lt;main+0x4d&gt;          ; Go to print &amp; exit.
4005bc: mov    edi,0x400715                ; Push "one" as parameter.
4005c1: jmp    4005dd &lt;main+0x4d&gt;          ; Go to print &amp; exit.
4005c3: mov    edi,0x400719                ; Push "two" as parameter.
4005c8: jmp    4005dd &lt;main+0x4d&gt;          ; Go to print &amp; exit.
4005ca: mov    edi,0x40071d                ; Push "three" as parameter.
4005cf: jmp    4005dd &lt;main+0x4d&gt;          ; Go to print &amp; exit.
4005d1: mov    edi,0x400723                ; Push "four" as parameter.
4005d6: jmp    4005dd &lt;main+0x4d&gt;          ; Go to print &amp; exit.
4005d8: mov    edi,0x400728                ; Push "five" as parameter.
4005dd: call   400450 &lt;puts@plt&gt;           ; Call "puts()" (printing point).
4005e2: xor    eax,eax                     ; Zero return (exit point).
4005e4: pop    rbp                         ; Pop stack frame.
4005e5: ret                                ; Return
4005e6: nop    WORD PTR cs:[rax+rax*1+0x0] ; NOP (alignment/padding)
</code></p>

<p>From the above example, we can immediately tell that Clang has generated a more compact code by avoiding multiple calls to puts() function.</p>

<p>Interestingly enough, GCC can also eliminate multiple calls to puts() function and generate exactly the same code for the above switch statement as Clang does. To achieve this, we must specify «-Os» flag on the command line. This flags instructs the compiler to optimize the binary for small size.</p>

<p>Apart from this small difference in optimizing function calls, both compilers used a combination of cmp and ja functions to implement a jump table. From this we can draw a conclusion that for simple cases compilers do generate a jump table.</p>

<h2>Crafting a Jump Table</h2>

<p>To get a better understanding of a jump table mechanics, let’s consider creating one manually without using a switch statement. It is possible to create a jump table manually a few different ways.</p>

<p>The first way of writing a jump table is to use an assembler language. It is low level programming language that does not have high-level constructs such as if-then-else or switch, but it allows to use processor instructions directly, making it possible to manually employ “cmp”, “ja” or other instructions to implement a functional equivalent of the code generated by compilers. This would have been very time consuming, require much higher understanding of the assembly language, result in less portable and hard to maintain code.</p>

<p>It is also possible to code a logical equivalent of a jump table in C, without using a switch statement. To do this, we could create an array that holds function pointers, and then call a function using an index to this array. For example:</p>

<p>```c++</p>

<h1>include &lt;stdio.h></h1>

<p> 
static void zero(void) {</p>

<pre><code>puts("zero");
</code></pre>

<p>}
 
static void one(void) {</p>

<pre><code>puts("one");
</code></pre>

<p>}
 
static void two(void) {</p>

<pre><code>puts("two");
</code></pre>

<p>}
 
typedef void (*func)(void);
 
int main() {</p>

<pre><code>func table[] = { &amp;zero, &amp;one, &amp;two };
int i = 0;
/* Read the value of `i` from user
   input or other source */
table[i]();
</code></pre>

<p>}
```</p>

<p>This, however, would only be a logical equivalent of the jump table, but not a functional one. The main difference in functionality is that jump table transfers control to a specified location directly instead of calling a function.
To achieve a functional equivalent of the jump table in C or C++, we must structure the code in such a way as to avoid function calls. We must create an array of addresses where the control is to be transferred, instead of array of functions. One of the possible ways of doing this is to label our code and create an array that store labels instead of functions. For example:</p>

<p>```c++</p>

<h1>include &lt;time.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>    static const void *jump_table[] = {
            &amp;&amp;print_0, &amp;&amp;print_1, &amp;&amp;print_2,
            &amp;&amp;print_3, &amp;&amp;print_4, &amp;&amp;print_5
    };
    int v;

    srand(time(NULL));
    v = rand();
    if (v &lt; 0 || v &gt; 5)
            goto out;
    goto *jump_table[v];

print_0:
    printf("zero\n");
    goto out;
print_1:
    printf("one\n");
    goto out;
print_2:
    printf("two\n");
    goto out;
print_3:
    printf("three\n");
    goto out;
print_4:
    printf("four\n");
    goto out;
print_5:
    printf("five\n");
    goto out;
</code></pre>

<p>out:</p>

<pre><code>return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>The above code would result in exactly the same binary as produced by GCC for a simple switch statement example we have reviewed in the first chapter. It cannot be considered readable or easily maintainable, but it could have been used for performance reasons if C or C++ language did not have a switch statement construct.</p>

<p>Note that despite being used by low-level developers from time to time, the above code is not standard. It is neither standard C nor C++ is none of those languages support taking address of a label. Despite that, this feature is implemented as a nonstandard extension by most production grade C and C++ compilers.</p>

<h2>Trivial Switch</h2>

<p>Modern processors employ a wide variety of optimization techniques to speed up the execution of computer programs. One of those techniques is branch prediction. It tries to guess which way a branch of the logic will go before this is known for sure. In a high-level programming languages such as C, branches are formed by if-then-else structures, goto instructions, different kinds of loop statements, switch statement and other constructs.</p>

<p>How processors implement branch prediction is largely a trade secret. It is well known, however, that this technique is less efficient if processor runs into indirect branch instruction, such as that used in jump tables code. In other words, a single indirect jump instruction is relatively more expensive than a simple branch, such as generated by if-then construct.</p>

<p>This means that for some architectures, it is possible that a simple if-then-else statement with a few comparisons and direct jump instructions might theoretically execute faster than a single indirect jump instruction. In other words, if compilers always generate a jump table for a switch statement, then we could write a more efficient code (from execution time perspective) by avoiding using a switch and resorting to if-then-else.</p>

<p>The cost ratio of compare and jump instructions to indirect jump instruction is not known without experimentation. How much if-then-else branches can we take before its execution time would be slower than that of a single indirect jump? It is also not clear whether compilers take care of this or not. To find out, we must experiment. Since our initial switch statement had six case labels, we must keep reducing the number of labels, disassemble the resulting binary on every stage and compare the results to see if the generated code is functionally different.</p>

<h3>Five Cases</h3>

<p>The first step is to remove a single label from the switch, effectively reducing a number of case labels to five. By doing so, nothing has changed regarding how compilers handle switch statement in case with both GCC and Clang compilers.</p>

<h3>Four Cases</h3>

<p>Reducing a number of cases further results in some interesting changes. With only four cases in a switch, Clang continues to generate a jump table as in all previous cases. GCC, on the other hand, stops using a jump table and resorts to simple comparison equivalent to if-then-else. Below is a disassembled binary demonstrating what GCC does in this case:</p>

<p><code>
4004f4:  cmp    eax,0x1             ; Compare value with 1.
4004f7:  je     400514 &lt;main+0x34&gt;  ; If value is 1, go there
4004f9:  jg     400501 &lt;main+0x21&gt;  ; If value is greater than 1, compare more.
4004fb:  test   eax,eax             ; Could be &lt;= 0. Compare with 0.
4004fd:  je     40050d &lt;main+0x2d&gt;  ; Go ptint "zero" if matched or jump to exit
4004ff:  jmp    40052c &lt;main+0x4c&gt;  ; Jump to exit (value was not zero)
400501:  cmp    eax,0x2             ; Value was &gt; 1. Compare it with 2.
400504:  je     40051b &lt;main+0x3b&gt;  ; Matched, go print and exit.
400506:  cmp    eax,0x3             ; Was != 2. Compare with 3.
400509:  jne    40052c &lt;main+0x4c&gt;  ; Go to exit if not matched.
40050b:  jmp    400522 &lt;main+0x42&gt;  ; Value is three!!! Go print it.
40050d:  mov    edi,0x4006e4        ; Set "zero" as parameter.
400512:  jmp    400527 &lt;main+0x47&gt;  ; Go call "puts()" and exit.
400514:  mov    edi,0x4006e9        ; End up here if value is 1.
400519:  jmp    400527 &lt;main+0x47&gt;  ; Go call "puts()" and exit.
40051b:  mov    edi,0x4006ed        ; Value was 2. Set...
400520:  jmp    400527 &lt;main+0x47&gt;  ; ... "two" as parameter and go print.
400522:  mov    edi,0x4006f1        ; Set "three" as argument to "puts()".
400527:  call   400490 &lt;puts@plt&gt;   ; Call "puts()".
40052c:  xor    eax,eax             ; Zero register with return value.
40052e:  pop    rdx                 ; Pop stack
40052f:  ret                        ; Return control to the caller.
</code></p>

<p>As we can see, there is no longer an indirect jump. Instead, the input is compared with every possible value using a set of compare and jump instructions.</p>

<h3>Three and Less Cases</h3>

<p>With only three cases in a switch, Clang starts generating the same code as GCC does starting at four — comparison instructions are used instead of a jump table.
By reducing a number of cases further down to one, the same result is observed with both compilers.</p>

<h3>Note on GCC</h3>

<p>GCC compiler allows users to control the cutoff between doing switch statements as a series of if-then-else statements and using a jump table since version 4.7. The threshold controlling this behavior can be specified as a command line option.</p>

<h3>Conclusion</h3>

<p>From the above experiments, we can conclude that both GCC and Clang compilers are well aware that indirect jumps are relatively expensive.</p>

<p>Both compilers are trying to avoid a jump table if the number of case labels in the switch is small enough to justify using a chain of compare and jump instructions.</p>

<p>The only difference between the two compilers is they use a different cost ratio when deciding on using a jump table. GCC drops the idea of jump table starting at 4 case labels down to 1. Clang drops the jump table approach at 3 swithc cases and below.</p>

<p>This of course is purely an implementation detail and can change from one platform to another, or between different versions of the compiler.</p>

<h2>Default Case</h2>

<p>Does having a switch statement with a default case affect the mechanism used to implement a switch statement in machine code?</p>

<p>Unlike hardware description languages like Verilog where there could be no default case in a switch, the software logic always has a default case that transfers a control flow further. It might be explicitly specified with a special default case label, or be implicitly generated by a compiler.</p>

<p>Therefore, the presence or absence of an explicit default case does not make a difference. The only case when not specifying a default case explicitly is beneficial is when switch is performed on enumeration. In that case, compiler may warn a programmer if switch does not handle all possible values of enumeration. This is strictly a static analysis feature that is helpful to developers but does not affect compiler’s decision about the implementation mechanism of a switch statement in any way.</p>

<h2>Large Values</h2>

<p>Not all switch cases have their values starting at 0. Some may have them start at one, two or even a million. Since jump tables are essentially represented as arrays, and all arrays in both C and C++ languages start with 0. We certainly cannot create an array of 101 elements only to have the last entry at index 100 to hold a valid jump address. So how does having large values in the switch affect the generated code?</p>

<h3>Continuous Range</h3>

<p>Let’s first take a look at a very simple example where all case values of a switch are continues:</p>

<p>```c++</p>

<h1>include &lt;time.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>srand(time(NULL));
switch (rand()) {
  case 1986000:
      printf("zero\n");
      break;
  case 1986001:
      printf("one\n");
      break;
  case 1986002:
      printf("two\n");
      break;
  case 1986003:
      printf("three\n");
      break;
  case 1986004:
      printf("four\n");
      break;
  case 1986005:
      printf("five\n");
      break;
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>As you can see, the minimum value in the switch is 198,600,000. Some programmers think that, because compiler build a jump table from case values and the input to a switch statement might be used as an index to a jump table, having large values will not work and result in less efficient code. So what they are trying to help the compiler optimize the code by writing it like this:</p>

<p>```c++</p>

<h1>include &lt;time.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>srand(time(NULL));
switch (rand() - 1986000) {
  case 0:
      printf("zero\n");
      break;
  case 1:
      printf("one\n");
      break;
  case 2:
      printf("two\n");
      break;
  case 3:
      printf("three\n");
      break;
  case 4:
      printf("four\n");
      break;
  case 5:
      printf("five\n");
      break;
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>In other words, they subtract N from input value to make the resulting range start from 0. Is this a good optimization?</p>

<p>Both GCC and Clang are production grade compilers. It is extremely rare to run into a situation where programmer needs to optimize such a simple case manually, unless programmer knows something that compiler cannot possibly guess from context. Therefore, it would be logical to assume that both GCC and Clang should handle the above optimization automatically. To verify this, below is a disassembled binary code generated by GCC from the code without a manual optimization:</p>

<p><code>
4004f2:       call   4004d0 &lt;rand@plt&gt; ; Call "rand()".
4004f7:       sub    eax,0x1e4dd0      ; Subtract "1986000" from the result.
4004fc:       cmp    eax,0x5           ; Compare with 5 and do the rest as before.
</code></p>

<p>The code generated by the Clang looks exactly the same:</p>

<p><code>
4005a2:       call   400490 &lt;rand@plt&gt; ; Call "rand()".
4005a7:       add    eax,0xffe1b230    ; Add "4292981296" to the result.
4005ac:       cmp    eax,0x5           ; Compare with 5 and do the rest as before.
</code></p>

<p>This proves that compilers are smart enough to perform basic optimization on switch statements whose values are not starting with 0.</p>

<h3>Sparse Values</h3>

<p>So far we have looked at simple switch statements whose case values were continuous. They either started from 0 or other numbers and incremented continuously without gaps in between.</p>

<p>The Wikipedia article on switch statement quotes a research paper:</p>

<blockquote><p>To optimize a switch statement, the programmer must use a very compact range of possible values to test.</p></blockquote>

<p>What happens if that is not possible or if programmer does something differently? Does it mean that a switch statement would not be optimized in any way?</p>

<p>There are two common types of values distribution in sparse switches. The first is when values can still be grouped together. For example, values of 10, 11, 12, 100 and 101 can grouped into two compact ranges, [10-12] and [100-101]. The second case is when no grouping can be done whatsoever.</p>

<p>Let’s test those two cases and find out what optimizations are performed by the compiler, if any.</p>

<h4>Distant Ranges</h4>

<p>Consider the following switch statement with values in [0-5] and [10000-10002] ranges:</p>

<p>```c++</p>

<h1>include &lt;time.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>srand(time(NULL));
switch (rand()) {
  case 0:
      printf("zero\n");
      break;
  case 1:
      printf("one\n");
      break;
  case 2:
      printf("two\n");
      break;
  case 3:
      printf("three\n");
      break;
  case 4:
      printf("four\n");
      break;
  case 5:
      printf("five\n");
      break;

  case 10000:
  case 10001:
  case 10002:
      printf("10K!\n");
      break;
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>Below is the disassembled binary code generated for the above code by GCC:</p>

<p><code>
4004f7:   cmp    eax,0x3             ; Comparison #1: Compare with 3.
4004fa:   je     40056e &lt;main+0x8e&gt;  ; It is 3! Print &amp; exit.
4004fc:   nop    DWORD PTR [rax+0x0]
400500:   jle    40051f &lt;main+0x3f&gt;  ; Is it &lt; 3? Go to comparison #3.
400502:   cmp    eax,0x5             ; Comparison #2: Compare with 4.
400505:   je     400553 &lt;main+0x73&gt;  ; It is 4! Print &amp; exit.
400507:   jl     400537 &lt;main+0x57&gt;  ; Is it &lt; 4? Goto comparison #4.
400509:   sub    eax,0x2710          ; Subtract 10000.
40050e:   cmp    eax,0x2             ; Comparison #5: Compare with 2.
400511:   ja     400530 &lt;main+0x50&gt;  ; It is &gt;2. Just exit (no match).
400513:   mov    edi,0x400741        ; Set "10K!" as a parameter
400518:   call   400490 &lt;puts@plt&gt;   ; Call "puts()".
40051d:   jmp    400530 &lt;main+0x50&gt;  ; Go to exit.
40051f:   cmp    eax,0x1             ; Comparison #3: Compare with 1.
400522:   je     400562 &lt;main+0x82&gt;  ; It is 1! Go print it.
400524:   jle    400543 &lt;main+0x63&gt;  ; It is less than 1. Go to comparison #6.
400526:   mov    edi,0x40072d        ; The value is 2 (by exclusion),
40052b:   call   400490 &lt;puts@plt&gt;   ; ... print "2" and exit.
400530:   xor    eax,eax
400532:   add    rsp,0x8
400536:   ret
400537:   mov    edi,0x400737
40053c:   call   400490 &lt;puts@plt&gt;
400541:   jmp    400530 &lt;main+0x50&gt;
400543:   test   eax,eax             ; Comparison #6
400545:   jne    400530 &lt;main+0x50&gt;  ; Nope. No match here. Go to exit.
400547:   mov    edi,0x400724        ; Print "zero" and exit.
</code></p>

<p>As we can see, the generated code seems to be less efficient compared to that of jump table. By looking closer at the program flow we can see that GCC has implemented a binary search algorithm. It is still well optimized compared to a simple chain of compare and jump instructions generated by if-then-else.</p>

<p>Clang takes a different approach in handling the above code:</p>

<p><code>
4005a7:   cmp    eax,0x270f
4005ac:   jg     4005e6 &lt;main+0x56&gt;
4005ae:   cmp    eax,0x5
4005b1:   ja     4005fb &lt;main+0x6b&gt;
4005b3:   mov    eax,eax
4005b5:   jmp    QWORD PTR [rax*8+0x4006f0]
4005bc:   mov    edi,0x400720
4005c1:   jmp    4005f6 &lt;main+0x66&gt;
4005c3:   mov    edi,0x400725
4005c8:   jmp    4005f6 &lt;main+0x66&gt;
4005ca:   mov    edi,0x400729
4005cf:   jmp    4005f6 &lt;main+0x66&gt;
4005d1:   mov    edi,0x40072d
4005d6:   jmp    4005f6 &lt;main+0x66&gt;
4005d8:   mov    edi,0x400733
4005dd:   jmp    4005f6 &lt;main+0x66&gt;
4005df:   mov    edi,0x400738
4005e4:   jmp    4005f6 &lt;main+0x66&gt;
4005e6:   lea    eax,[rax-0x2710]
4005ec:   cmp    eax,0x3
4005ef:   jae    4005fb &lt;main+0x6b&gt;
4005f1:   mov    edi,0x40073d
4005f6:   call   400450 &lt;puts@plt&gt;
4005fb:   xor    eax,eax
4005fd:   pop    rbp
4005fe:   ret
</code></p>

<p>The code generated by Clang is a little bit more tricky compared to GCC. First it compares the input value with 9999. If the value is greater, it normalizes it by subtracting 10000 using “lea“ instruction, and then checks if the value is within [0-3) range. If it is, the “10K” is then printed. Otherwise, the function returns. If value is less than 9999, it ensures the value is in [0-5] range and uses a jump table. Very clever, isn’t it?</p>

<h4>Sparse Values</h4>

<p>The second common switch pattern is when values are sparse enough so that they cannot be grouped together. For example:</p>

<p>```c++</p>

<h1>include &lt;time.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>srand(time(NULL));
switch (rand()) {
  case 0: printf("0!\n"); break;
  case 50: printf("50!\n"); break;
  case 100: printf("100!\n"); break;
  case 150: printf("150!\n"); break;
  case 200: printf("200!\n"); break;
  case 250: printf("250!\n"); break;
  case 300: printf("Spartans!\n"); break;
  case 350: printf("350!\n"); break;
  case 400: printf("400!\n"); break;
  case 450: printf("400!\n"); break;
  case 500: printf("400!\n"); break;

  case 10000:
  case 10001:
  case 10002:
  case 10003:
  case 10004:
  case 10005:
      printf("10K!\n");
      break;
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>For the above code, both GCC and Clang compilers have generated a binary search algorithm.
Changing the order of case labels in the switch did not affect the generated code — both compilers have analyzed all the specified values before making optimization decisions.</p>

<h2>Fall Through Switch</h2>

<p>So far we have looked at switch statements with no fall through cases, where each case had a trivial code. There are of course more complex scenarios.</p>

<p>What happens if we introduce fall through switch? What if we make each case statement to have complex control flows? What if we do both of the above?</p>

<p>The answer is simple — it does not fundamentally change the way compilers implement switch statements. The same approach of mixing comparison, range checking, binary search and jump table logic is still used.</p>

<p>What it affects, however, is how compiler rearranges the control flow. It may group some logic together, or split it. Redundant code might be reduced, or it might get duplicated intentionally to reduce a number of jump instructions. The code might be placed at different addresses, compiler might also generate different jump instructions to achieve the most compact and fast code. All those optimizations techniques are not unique to switch statements and are being used with other language constructs.</p>

<h2>Outsmarting Compilers</h2>

<p>Every discussion about code micro-optimization, which switch statements are usually part of, shall start with a word of warning. Outsmarting a production quality compiler these days is a nearly impossible task. A programmer should not even try to optimize the code that is not proven to be a bottleneck by carefully profiling the whole program. If a piece of code is proven to be slow and there is an obvious optimization that compiler has failed to perform, shop for a better compiler. Start by optimizing the logic and not the code — doing less steps where possible, avoiding chaotic dynamic memory manipulations, using well designed data structures will pay off more than any micro-optimization.</p>

<p>If, however, a switch statement turns out to be one of the biggest bottlenecks of the code, there might be ways to improve it. To do that, it is vital to know more information about the possible values passed into a switch than compiler knows about or may figure out from context. If there is nothing known about the input value — don’t bother optimizing, there is no way of implementing a general case better than a compiler.</p>

<h3>Improving a Switch</h3>

<p>Consider the following example:</p>

<p>```c++
switch (value) {
  case 0:</p>

<pre><code>  do_very_important_stuff_0();
  break;
</code></pre>

<p>  case 1:</p>

<pre><code>  do_not_important_stuff_1();
  break;
</code></pre>

<p>  case 2:</p>

<pre><code>  do_not_important_stuff_2();
  break;
</code></pre>

<p>  case 3:</p>

<pre><code>  do_not_important_stuff_3();
  break;
</code></pre>

<p>  case 4:</p>

<pre><code>  do_not_important_stuff_4();
  break;
</code></pre>

<p>  case 5:</p>

<pre><code>  do_very_important_stuff_5();
  break;
</code></pre>

<p>}
```</p>

<p>The above switch statement will be implemented using a jump table. It is impossible to do better unless it is known that most of the time the value is either 0 or 5, and can turn out to be 1, 2 or 3 only in some rare conditions that almost never happen. If that is the case, there is no way that compiler may know about it (unless of course we use profiler feedback optimization, which is not always possible). So how to optimize this for that particular case?</p>

<p>We remember that an indirect call is more expensive than two-three comparisons, at least for our given platform. This was proven during our earlier experiments with reducing a number of cases in a switch. Given that our critical path in the above examples consists of only two values — 0 and 5, the code can be optimized by not using those two statements in a switch case to avoid an expensive indirect jump. For example:</p>

<p>```c++
if (value == 0) {</p>

<pre><code>do_very_important_stuff_0();
</code></pre>

<p>} else if (value == 5) {</p>

<pre><code>do_very_important_stuff_5();
</code></pre>

<p>} else {</p>

<pre><code>switch (value) {
  case 1:
      do_not_important_stuff_1();
      break;
  case 2:
      do_not_important_stuff_2();
      break;
  case 3:
      do_not_important_stuff_3();
      break;
  case 4:
      do_not_important_stuff_4();
      break;
}
</code></pre>

<p>}
```</p>

<p>If there are only two or three possible input values, the same technique can be used to improve switch statements that compiler implements using a binary search approach. If, however, the input value may vary, improving a switch performance turns into nothing more but improving a search algorithm. The programmer will have to analyze the most common set of input values, select or invent the search algorithm with better average performance or better performance for more important inputs, and manually implement the switch functionality using handcrafted if-then-else statements, creating a jump table manually (as described in chapter 3), or both.</p>

<h3>Switch vs High-Level Search</h3>

<p>Some developers occasionally get concerned whether it is better to use a switch statement or a higher-level search algorithms like, for example, a hash lookup implemented by the std::unordered_map class from C++ Standard Library.</p>

<h4>Hash Lookup</h4>

<p>Compared to dynamic hash lookup tables, statically generated lookup code for a pre-defined ranges of values will always be better than any other hash table implementation given that switch statements can only work with constant simple numeric POD types.</p>

<h4>Binary Search</h4>

<p>Ordered lookup algorithms such as those commonly used with std::map can theoretically be more efficient than a switch statement. The runtime overhead of those algorithms, however, may render them useless compared to a simple, low-level switch implementation. This may also depend on a nature of the input. Therefore, there is no general answer to this question and developers must test both implementations to determine which one is better in any particular case.</p>

<h2>If-then-else Recognition</h2>

<p>By experimenting with different switch statements we have ensured that compilers do a wonderful optimization job. It almost does not matter how programmers describe the switch it in the code — compiler will always generate nearly perfect generic lookup algorithms, rearrange code as needed, group or duplicate statements and apply other techniques to make the code most efficient.</p>

<p>C programming language is very high-level and it might seem that in many cases it should not matter how the control flow is described and the same optimization might be applied as long as a resulting program is functionally the same. This raises a question of whether compiler will do the same optimizations if programmer is using if-then-else. In theory, it might be the same, or might be different. But instead of guessing, let’s find out.</p>

<p>Below is a C program that is equivalent to our simple switch example:</p>

<p>```c++</p>

<h1>include &lt;time.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>int v;

srand(time(NULL));
v = rand();

if (v == 0) {
    printf("zero\n");
} else if (v == 1) {
    printf("one\n");
} else if (v == 2) {
    printf("two\n");
} else if (v == 3) {
    printf("three\n");
} else if (v == 4) {
    printf("four\n");
} else if (v == 5) {
    printf("five\n");
}

return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>GCC did not generate an equivalent code to that of a switch statement. A set of compare instructions is used instead. Here is a relevant snippet of the binary code:</p>

<p><code>
4004f7:   test   eax,eax
4004f9:   je     40051e &lt;main+0x3e&gt;
4004fb:   cmp    eax,0x1
4004fe:   xchg   ax,ax
400500:   je     400536 &lt;main+0x56&gt;
400502:   cmp    eax,0x2
400505:   je     400542 &lt;main+0x62&gt;
400507:   cmp    eax,0x3
40050a:   je     40054e &lt;main+0x6e&gt;
40050c:   cmp    eax,0x4
40050f:   nop
400510:   je     40055a &lt;main+0x7a&gt;
400512:   cmp    eax,0x5
400515:   je     40052a &lt;main+0x4a&gt;
</code></p>

<p>Clang compiler, on the other hand, has generated a jump table:</p>

<p><code>
4005a7:   cmp    eax,0x5
4005aa:   ja     4005e2 &lt;main+0x52&gt;
4005ae:   jmp    QWORD PTR [rax*8+0x4006e0]
</code></p>

<p>Therefore, we can draw a conclusion that compilers can and sometimes do optimize if-then-else statements the same way they optimize switch statements.</p>

<p>Whether it makes sense or not is another question. At first, it may seem like Clang has done a lot better job than GCC. However, this automatically prevents developer from performing optimizations described in the previous chapter by making it impossible to use comparison in the fast path of the program. This also prevents developers from manually providing branch prediction hints because switch cases, unlike if-then-else branches, cannot be explicitly prioritized. Since compilers cannot know for sure if switch was replaced by if-then-else statement on purpose, automatically replacing if-then-else with switch might discard programmer’s optimization efforts and worsen the runtime efficiency of the program.</p>

<h2>Summary</h2>

<p>We have learned how decent compilers transform higher-level switch statements into a low level machine code, reviewed a number of different examples along with optimization techniques applied by the compilers.</p>

<p>We also discussed a few optimization techniques that can be applied in certain situations to improve the application performance by using a special mix of switch and if-then-else statements.</p>

<p>I hope that it would helps us, developers, to better understand what switch statements are, what they can be used for and how they work, as well as adding some practical backup to some very common speculative talks about switch statement optimizations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unreasonable Effectiveness of C]]></title>
    <link href="http://741MHz.com/unreasonable-effectiveness-of-c/"/>
    <updated>2013-01-10T00:00:00-05:00</updated>
    <id>http://741MHz.com/unreasonable-effectiveness-of-c</id>
    <content type="html"><![CDATA[<p>It is always nice to run into like-minded people. Today I ran into <a href="http://damienkatz.net/">Damien Katz</a>, CTO at <a href="http://www.couchbase.com/">Couchbase</a>,  and his brilliant story about why C is a beautiful high-level language. For a big fan of C like me it would have been a crime not to share this story. If you agree that OOP is a hype and a disease or if you think that C++ is a horrible language then you will definitely enjoy it:</p>

<blockquote><p>For years I’ve tried my damnedest to get away from C. Too simple, too many details to manage, too old and crufty, too low level. I’ve had intense and torrid love affairs with Java, C++, and Erlang. I’ve built things I’m proud of with all of them, and yet each has broken my heart. They’ve made promises they couldn’t keep, created cultures that focus on the wrong things, and made devastating tradeoffs that eventually make you suffer painfully. And I keep crawling back to C.</p></blockquote>

<p><a href="http://damienkatz.net/2013/01/the_unreasonable_effectiveness_of_c.html">[Read the full story&hellip;]</a></p>

<p>While we are at it, you may also enjoy:</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Object-oriented_programming#Criticism">Object Oriented Programming Criticism</a></li>
<li><a href="http://article.gmane.org/gmane.comp.version-control.git/57918">Linus Torvalds opinion on C++</a> — you are full of bullshit!</li>
</ul>

]]></content>
  </entry>
  
</feed>
