<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | Ranting @ 741 MHz]]></title>
  <link href="http://741MHz.com/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://741MHz.com/"/>
  <updated>2013-12-01T21:38:07-05:00</updated>
  <id>http://741MHz.com/</id>
  <author>
    <name><![CDATA[741MHz.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use free and delete correctly.]]></title>
    <link href="http://741MHz.com/free-delete/"/>
    <updated>2013-03-13T00:00:00-04:00</updated>
    <id>http://741MHz.com/free-delete</id>
    <content type="html"><![CDATA[<p>The Internet is full of programming jokes <a href="http://bash.org/?946461">like this one</a>:</p>

<blockquote><p>&lt;@joosa> how do you say float in java? just 1.5f?<br/>
&lt;@Gliptic> FloatFactoryFactory.getInstance (FloatFactoryFactory.defaultInstanceDescriptionString).getFactory (Locale.getLocale (“en-US”)).createBuilder ().setString (“1.5″).getResult ()</p></blockquote>

<p>Java people please read on, that’s only a joke! More often than not the jokes are directed at those using higher-level programming languages. This is a little unfair because C programmers (and C++ ones for that matter) write some funny code, too. For example:</p>

<p>```c
void foo(void *ptr) {</p>

<pre><code>if (ptr)
    free(ptr);
</code></pre>

<p>}
```</p>

<p>This perhaps could be a joke or maybe even an interview question. What’s wrong with the above C code (assuming everything else including the usage is correct)? It turns out that many can’t spot anything. If you do — congratulations! For those who don’t, let’s read the <a href="http://man7.org/linux/man-pages/man3/free.3.html">documentation of <code>free()</code> function</a>:</p>

<blockquote><p>The free() function frees the memory space pointed to by ptr, which must have been returned by a previous call to malloc(), calloc() or realloc(). Otherwise, or if free(ptr) has already been called before, undefined behavior occurs. If ptr is NULL, no operation is performed.</p></blockquote>

<p>In other words, there is no need to check if pointer is not NULL. The same applies to C++ programmers who often check for <strike><code>NULL</code></strike> <code>nullptr</code> before calling <code>delete</code>. If you don’t trust manual pages, check out §7.20.3/2 of the C standard that states the following:</p>

<blockquote><p>The free function causes the space pointed to by ptr to be deallocated, that is, made available for further allocation. If ptr is a null pointer, no action occurs. Otherwise, if the argument does not match a pointer earlier returned by the calloc, malloc, or realloc function, or if the space has been deallocated by a call to free or realloc, the behavior is undefined.</p></blockquote>

<p>For C++, see §5.3.5/2:</p>

<blockquote><p>… if the value of the operand of delete is the null pointer the operation has no effect.</p></blockquote>

<p>Possibly, an extra checking for NULL was a necessity some 20 years ago, according to some Internet rumors claiming that a few implementations of the standard C library had a bug back then and free() could crash the program when passed a NULL pointer. I couldn’t find any information about what it was. But no matter what was going on two decades ago — it is pretty hard to find pre-ANSI C code these days. Yet unnecessary NULL checking can be seen a lot. For example, <a href="http://krugle.org/">krugle.org</a> shows the following three projects right away:</p>

<ul>
<li><a href="http://opensearch.krugle.org/document/view_filecontent/apache_http_server1945779753/scmi_filer2-scmi.ofc.krugle.net_8799/scmi_305/tags/1.3/djg_nspr_split/src/regex/regfree.c">Apache Web Server</a></li>
<li><a href="http://opensearch.krugle.org/document/view_filecontent/apache_hadoop618243895/scmi_filer2-scmi.ofc.krugle.net_8799/scmi_528/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/getGroup.c">Apache Hadoop</a></li>
<li><a href="http://opensearch.krugle.org/document/view_filecontent/miranda1067994304/scmi_filer2-scmi.ofc.krugle.net_8799/scmi_705/miranda/protocols/Gadu-Gadu/ownerinfo.c">Miranda</a> (an ICQ client popular in ex-USSR countries)</li>
</ul>


<p>I thought that maybe people are worrying about performance too much and don’t want to do an extra function call (extra cycles, procedure linkage tables, etc). But then using <code>malloc()</code> and <code>free()</code> in performance critical path would have been even more silly.</p>

<p>So is it paranoia, a failure to read documentation, or maybe a thoughtless copy-paste that went too far?</p>

<p>Who knows.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic Resource Management in Programming Languages]]></title>
    <link href="http://741MHz.com/raii/"/>
    <updated>2013-02-27T00:00:00-05:00</updated>
    <id>http://741MHz.com/raii</id>
    <content type="html"><![CDATA[<p>Many high-level programming languages provide software developers with the ability to automatically cleanup resources — automatically closing an open file when it is no longer used, freeing dynamically allocated memory, or anything else for that matter. This article touches on automatic resource management features available in modern programming languages. It shows some examples demonstrating why having this feature make it easier to write code, or how not using this feature may lead to potentially critical failures of the program. The primary focus is on C++ and C (surprise!) languages.</p>

<h2>C</h2>

<p>There are a few ways to automatically clean up resources in C# — a <code>finally</code> block and a <code>using</code> statement.</p>

<p>A <code>finally</code> block is a bit lower level than a using. It guarantees that all statements inside a <code>finally</code> block will be executed when the try block exists, even if unexpected exception occurs. For example:</p>

<p>```c#
ResourceType resource = expression; // Allocate, initialize or acquire some resource.
try {</p>

<pre><code>// Do something with it.
statement;
</code></pre>

<p>} finally {</p>

<pre><code>// Free, destroy or release a resource.
// This is guaranteed to happen.
((IDisposable)resource).Dispose();
</code></pre>

<p>}
```</p>

<p>Another and more convenient way of doing the same is to employ a <code>using</code> statement which guarantees that <code>Dispose()</code> method is called automatically upon leaving the scope of using block:</p>

<p>```c#
using (ResourceType resource = expression) {</p>

<pre><code>statement;
</code></pre>

<p>}
```</p>

<h2>Java</h2>

<p>Java also provides a finally block similar to that seen in C#:</p>

<p>```java
FileReader reader = null;
try {</p>

<pre><code>reader = new FileReader("/dev/null");
// Do something with a file...
</code></pre>

<p>} finally {</p>

<pre><code>if (reader != null)
reader.close();
</code></pre>

<p>}
```</p>

<p>Starting from version 7 Java introduces an AutoCloseable concept along with automatic resource cleanup, which are basically the same things as IDisposable and a using statement in C#:</p>

<p>```java
try (FileReader reader = new FileReader(&ldquo;/dev/null&rdquo;))
{</p>

<pre><code>// Do something with a file...
</code></pre>

<p>}
```</p>

<h2>Other Languages</h2>

<p>Since the concept of something being done automatically is quite popular, it is present in many other languages. Python has both a <a href="http://docs.python.org/2/reference/compound_stmts.html#finally"><code>finally</code> statement</a> and a <a href="http://docs.python.org/release/2.5.3/ref/with.html"><code>with</code> statement</a>. The same goes for Ruby. Of course, this is also available in derivative languages like Visual Basic that is built on top of .NET technology, Groovy that is built on Java, etc.</p>

<h2>C++ — The King of RAII</h2>

<p>As we have seen, many languages provide different syntax to do essentially the same thing. It is a great concept indeed. It changed the way programmers write code, significantly improved productivity. And behind every invention that we cannot imagine our lives without there is an author. So who is behind the automatic resource management?</p>

<p>The real name of this concept is <strong>Resource Acquisition Is Initialization</strong>, or simply <strong>RAII</strong>. It was invented by Bjarne Stroustrup, the original author of C++ programming language. And of course this concept first appeared in C++, way before C# or Java were created.</p>

<p>C++ is the king of RAII. Many concepts are built upon it. RAII is the reason why object destructors are called automatically. It is the reason why C++ developers don’t need to care much about freeing dynamically allocated memory or close a file descriptor that is no longer used. It is why, when handling an error, it is enough to simply throw an exception, or return an error code from a function, without writing tons of “cleanup” code or even thinking about the order in which resources must be cleaned up (which is usually done in opposite order of allocation). In fact, RAII should be used whenever possible to avoid serious errors or even cause a denial of service. For example, consider the following code:</p>

<p>```c++</p>

<h1>include <mutex></h1>

<h1>include <vector></h1>

<p>// Data structure that is supposed to be accessed by multiple threads.
struct shared_resource {</p>

<pre><code>std::mutex       mutex;
std::vector&lt;int&gt; data;
</code></pre>

<p>};</p>

<p>void foo(shared_resource &amp; res)
{</p>

<pre><code>// Acquire an exclusive lock to protect access to
// the object in multi-threaded environment.
res.mutex.lock();

// Modify the contents of the vector by adding 10 integers into it.
for (int i = 0; i &lt; 10; ++i)
    res.data.emplace_back(i);

// Once done changing the object, release the lock so that other threads
// can work with it. If we forget to unlock it, the process will basically
// hang trying to lock the mutex again, rendering our program useless.
res.mutex.unlock();
</code></pre>

<p>}
```</p>

<p>The above code is a classic example of an error that could lead to serious consequences. The problem is that anything could happen in between of <code>mutex.lock()</code> and <code>mutex.unlock()</code> statements, and the <code>mutex.unlock()</code> statement may not be executed shall <code>data.emplace_back()</code> throw an exception, leaving the program in the locked-up state.</p>

<p>Taking a good care of exceptions is a concept called <strong>exception safety</strong>. The above code is indeed not exception safe. However, this is not only about exceptions. For instance, if <code>emplace_back()</code> method was not throwing an exception and return code was used to signal an error, the erroneous code could have looked like this:</p>

<p>```c++
int foo(shared_resource &amp; res)
{</p>

<pre><code>res.mutex.lock();
for (int i = 0; i &lt; 10; ++i) {
    if (res.data.emplace_back(i) != 0) {
        return -1;
    }
}
res.mutex.unlock();
return 0;
</code></pre>

<p>}
```</p>

<p>Exception safety is out of the equation, yet the code is buggy. This is why RAII should (almost) always be used. The correct code should look like this:</p>

<p>```c++
void foo(shared_resource &amp; res)
{</p>

<pre><code>std::lock_guard&lt;std::mutex&gt; lock(res.mutex);
for (int i = 0; i &lt; 10; ++i)
    res.data.emplace_back(i);
</code></pre>

<p>}
```</p>

<p>In the above example, <a href="http://en.cppreference.com/w/cpp/thread/lock_guard"><code>std::lock_guard</code></a> object is locking a mutex in its constructor and unlocks it in its destructor. Thanks to RAII, the destructor is guaranteed to be called when the object goes out of scope no matter what. C++ is full of such “guard” objects. Many of them are part of the standard library, but developers can always create their own.</p>

<p>```c++</p>

<h1>include <cctype></h1>

<h1>include <fstream></h1>

<h1>include <iostream></h1>

<p>int main()
{</p>

<pre><code>std::ifstream file("test.txt");
char c;
while ((file &gt;&gt; c))
    std::cout &lt;&lt; (std::isalpha(c) ? c : '*');
</code></pre>

<p>}
```</p>

<p>In the above example, the file object will automatically close the file. In other words, C++ clearly wins this battle over RAII with all other languages since there is no need for any finally blocks, using statements or event Java’s new <code>try()</code> blocks.</p>

<p>What is interesting is that C#, Java, Python and other similar languages did not even have “using”-like statements for a long time. There was only <em>try-catch-finally</em> construct and programmers had no choice but to write a lot of boilerplate code. Albeit some programmers have consciously suffered from the lack of proper RAII support, many didn’t know that C++ not only supports RAII but also is the only language that does it properly. One day those guys wanted to write something in C++ and of course started to look for similar self-torture methods. Not able to find it, they asked Bjarne Stroustrup why doesn’t C++ provide a <code>finally</code> construct, and <a href="http://www.stroustrup.com/bs_faq2.html#finally">here is what he had to say</a>:</p>

<blockquote><p>Because C++ supports an alternative that is almost always better: The “resource acquisition is initialization” technique (TC++PL3 section 14.4). The basic idea is to represent a resource by a local object, so that the local object’s destructor will release the resource. That way, the programmer cannot forget to release the resource.
…
In a system, we need a “resource handle” class for each resource. However, we don’t have to have an “finally” clause for each acquisition of a resource. In realistic systems, there are far more resource acquisitions than kinds of resources, so the “resource acquisition is initialization” technique leads to less code than use of a “finally” construct.</p></blockquote>

<p>Boy was he right. Most today’s languages are now trying to resemble the same.</p>

<h2>RAII in C</h2>

<p>Everyone knows that C neither support exceptions nor it has a concept of RAII. That is not entirely true, but for the most part it is. You will not find anything about those features in C89, C99 or even C11 language standard specifications. Therefore, C developers have to be careful, disciplined, and clean up after themselves. Oftentimes, especially in somewhat low-level code like device driver, we can run into the code like this:</p>

<p>```c
static int pci_probe(struct pci_dev *pci_dev,</p>

<pre><code>                 const struct pci_device_id *dev_id)
</code></pre>

<p>{</p>

<pre><code>struct my_dev *dev;
int r;

dev = kzalloc(sizeof(struct my_dev), GFP_KERNEL);
if (unlikely(!dev))
    goto on_err;
pci_set_drvdata(pci_dev, dev);
dev-&gt;pci_dev = pci_dev;
r = pci_enable_device(pci_dev);
if (unlikely(r))
    goto on_enable_err;
pci_set_master(pci_dev);
pci_try_set_mwi(pci_dev);
dev-&gt;bar0 = ioremap_nocache(pci_resource_start(pci_dev, 0),
                            pci_resource_len(pci_dev, 0));
if (unlikely(!dev-&gt;bar0))
    goto on_bar0_map_err;
dev-&gt;bar2 = ioremap_nocache(pci_resource_start(pci_dev, 2),
                            pci_resource_len(pci_dev, 2));
if (unlikely(!dev-&gt;bar2))
    goto on_bar2_map_err;
r = a2gx_add_cdev(dev);
if (r)
    goto on_cdev_err;
return 0;
</code></pre>

<p>  on_cdev_err:</p>

<pre><code>iounmap(dev-&gt;bar2);
</code></pre>

<p>  on_bar2_map_err:</p>

<pre><code>iounmap(dev-&gt;bar0);
</code></pre>

<p>  on_bar0_map_err:</p>

<pre><code>pci_disable_device(pci_dev);
</code></pre>

<p>  on_enable_err:</p>

<pre><code>kfree(dev);
</code></pre>

<p>  on_err:</p>

<pre><code>return -1;
</code></pre>

<p>}
```</p>

<p>Many will find the above code difficult to read, hard to write, or both. Some would love to punch the author in the face for using goto. Others may not understand what is going on in there at all. But C is not just a programming language. C is a religion. For some, C code is a lot cleaner than anything else — nothing is hiding behind the scenes, what you see is what you get. The C code is usually thought trough — you have to think twice before you write it. In fact, some wouldn’t substitute it for anything else. At any rate, C developers usually cleanup after themselves.</p>

<p>On the other hand, the benefits or RAII are also obvious and there are people who would love to see a concept of RAII in C. But it is not a part of the language specification. However, imagine a world when programmers were not using things that are not standard. That world would have been terrible. Just imagine for a second that C++ developers wouldn’t have multi-threaded programs until C++11 standard was ratified with all of its quirks and perks like <code>std::thread</code>, <code>std::mutex</code>, <em>thread local storage</em> and so on.</p>

<p>Or how about not being able to specify symbol’s visibility or use other attributes? Luckily, being a non-standard feature doesn’t restrain people from using it. And as more people use some feature, more chances it has to be standardized. That said, C++11 now allows for generalized yet compiler-specific attributes, threading, static assertions, and tons of other stuff that was available before, was used before, too, but wasn’t a part of the standard. Well, now it is.</p>

<p>That being said, C also supports RAII. However, it is not part of the standard, at least not yet. Here is how it works — it is possible to specify a cleanup function for any auto function scope variable. In order to do that, a non-standard cleanup attribute must be specified. If you remember the example of a buggy non-exception-safe C++ function that uses a <em>mutex</em>, that code would look something like this in C:</p>

<p>```c
struct shared_resource {</p>

<pre><code>pthread_mutex_t   mutex;
struct int_vector data;
</code></pre>

<p>};</p>

<p>struct shared_resource {</p>

<pre><code>pthread_mutex_t   mutex;
struct int_vector data;
</code></pre>

<p>};</p>

<p>int int_vector_push_back(struct int_vector *data, int value);</p>

<p>int foo(struct shared_resource *res)
{</p>

<pre><code>int i;

if (pthread_mutex_lock(&amp;res-&gt;mutex) != 0)
    return -1; /* Oops, cannot lock the mutex. */
for (i = 0; i &lt; 10; ++i) {
    if (int_vector_push_back(&amp;res-&gt;data, i) != 0) {
        /* Oops, cannot add data into the vector! */
        return -1;
    }
}
pthread_mutex_unlock(&amp;res-&gt;mutex);
return 0; /* All is good */
</code></pre>

<p>}
```</p>

<p>Though it is a little bit hard to imagine that C programmer could write code like that. The code would probably look more like this (which is also functionally correct this time):</p>

<p>```c
int test(struct shared_resource *res)
{</p>

<pre><code>int r;
int i;

r = pthread_mutex_lock(&amp;res-&gt;mutex);
if (r)
    goto out;
for (i = 0; i &lt; 10; ++i) {
    r = int_vector_push_back(&amp;res-&gt;data, i);
    if (r)
        break;
}
pthread_mutex_unlock(&amp;res-&gt;mutex);
</code></pre>

<p>  out:</p>

<pre><code>return r;
</code></pre>

<p>}
```</p>

<p>Below is a RAII-like version of the code where mutex is guaranteed to be unlocked automatically, so it is possible to simply return from the function at any given point without worrying about it. This code closely resembles the behavior of a C++ example using <code>std::lock_guard</code> where <code>lock_guard_ctor</code> mimics <code>std::lock_guard::lock_guard</code> constructor that locks a <em>mutex</em>, and the <code>lock_guard_dtor</code> function is like <code>std::lock_guard::~lock_guard</code> destructor that unlocks the <em>mutex</em> (if it was locked) and is guaranteed to be called automatically:</p>

<p>```c
pthread_mutex_t <em>lock_guard_ctor(pthread_mutex_t </em>mutex) {</p>

<pre><code>return pthread_mutex_lock(mutex) == 0 ? mutex : NULL;
</code></pre>

<p>}</p>

<p>void lock_guard_dtor(pthread_mutex_t **mutex_ptr) {</p>

<pre><code>pthread_mutex_t *mutex = *mutex_ptr;
if (mutex != NULL)
    pthread_mutex_unlock(mutex);
</code></pre>

<p>}</p>

<p>int foo(struct shared_resource *res) {</p>

<pre><code>int i;
pthread_mutex_t *lock_guard
    __attribute__((cleanup(lock_guard_dtor)))
    = lock_guard_ctor(&amp;res-&gt;mutex);
if (lock_guard == NULL)
    return -1;
for (i = 0; i &lt; 10; ++i) {
    if (int_vector_push_back(&amp;res-&gt;data, i) != 0)
        return -1;
}
return 0;
</code></pre>

<p>}
```</p>

<p>The above code can also be simplified a bit with two simple steps. Step one is to have <code>lock_guard_ctor</code> and <code>lock_guard_dtor</code> functions defined somewhere else and be reusable. Because nobody writes custom constructors and destructor for a class every time they use it. Step number two is to get rid of a lot of typing by having a macro. For example, the common code that is written once could be:</p>

<p>```c</p>

<h1>include &lt;pthread.h></h1>

<p>extern pthread_mutex_t <em>lock_guard_ctor(pthread_mutex_t </em>mutex);
extern void lock_guard_dtor(pthread_mutex_t **mutex_ptr);</p>

<h1>define LOCK_GUARD(name, mutex)                   \</h1>

<pre><code>pthread_mutex_t * name                        \
    __attribute__((cleanup(lock_guard_dtor))) \
    = lock_guard_ctor((mutex))
</code></pre>

<p>```</p>

<p>And the code using this feature becomes a lot simpler:</p>

<p>```c
int foo(struct shared_resource *res)
{</p>

<pre><code>int i;
LOCK_GUARD(lock, &amp;res-&gt;mutex);
if (!lock)
    return -1;
for (i = 0; i &lt; 10; ++i) {
    if (int_vector_push_back(&amp;res-&gt;data, i) != 0)
        return -1;
}
return 0;
</code></pre>

<p>}
```</p>

<p>There are two possible ways for a compiler to implement a cleanup attribute. If exceptions are not enabled, it would generate the boilerplate code similar to that otherwise written by the programmer manually. If exceptions are enabled then compiler would generate the code that executes a cleanup function during the stack unwinding (yes, there are exceptions in C, too).</p>

<p>Note that cleanup attribute cannot be used for global variables. constructor and destructor attributes should be used instead. The constructor attribute causes the function to be called automatically before execution enters <code>main()</code>. Similarly, the destructor attribute causes the function to be called automatically after <code>main()</code> completes or <code>exit()</code> is called. Functions with these attributes are useful for initializing data that is used implicitly during the execution of the program. It is also possible to manually control the order of execution by specifying priority number (optional).</p>

<p>The techniques described above are available at least in today’s leading C compilers — GCC and Clang. Remember, the future of the language is in hands of its users. If you really like the feature and it is not standard — use it, spread the world, write a feedback to compiler developers and language standard committee. It will definitely help to make it into the next standard revision.</p>

<p>Let the force be with you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++11 Final Override]]></title>
    <link href="http://741MHz.com/final-override/"/>
    <updated>2013-02-27T00:00:00-05:00</updated>
    <id>http://741MHz.com/final-override</id>
    <content type="html"><![CDATA[<h2>Preface</h2>

<p>The alternative name for this article is “How to protect yourself from others when it comes to polymorphism.” That is pretty much the primary purpose of two brand new C++ keywords introduced in C++11 — the <code>override</code> and <code>final</code>.</p>

<p>Those who have at least some experience in team-based C++ development must be aware of at least one of many pitfalls of polymorphism and virtual methods in particular. Let’s go over some of real-world problems that could easily force developers to run a debugger or read the code over and over again trying to figure out why the program is not working as expected.</p>

<h2>A Missing Virtual Function</h2>

<p>This could happen to anyone — there was a base class with a virtual function and developer has decided to overload it for a good reason. Everything was fine and the program worked as expected. But one day after, a fresh build simply stopped working, and the reason is not obvious. After spending some time debugging the program, it turned out that a function that should have been called does not appear to be called at all. What could be wrong?</p>

<p>Consider the following code where the Foo class is written by one developer while Bar was written by someone else and could even be part of another project:</p>

<p>```c++
class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

virtual int init() {
    do_very_important_stuff();
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

virtual int init() {
    Foo::init();
    do_some_more_important_stuff();
}
</code></pre>

<p>};
```</p>

<p>A few years later a new developer joins the company and accidentally removes a virtual keyword from the <code>init()</code> method’s declaration of class <em>Foo</em>. How that could even happen, you may ask? Maybe he was learning Emacs and executed a <em>replace-regexp</em> command without noticing all of the changes. Or maybe he just read the <em>Code Refactoring</em> book and decided to improve the code but couldn’t check all of the usages of class <em>Foo</em> because they were in a different repository that he didn’t have access to. Who knows? Things happen. As a result, the <code>Bar::init()</code> is no longer called because it does no longer override its base method. For example:</p>

<p>```c++</p>

<h1>include <iostream></h1>

<h1>include <memory></h1>

<p>class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

int init() {
    std::cout &lt;&lt; "Hello, World!\n";
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

virtual int init() {
    Foo::init();
    std::cout &lt;&lt; "The code is working!\n";
}
</code></pre>

<p>};</p>

<p>int main() {</p>

<pre><code>std::unique_ptr&lt;Foo&gt; foo(new Bar());
foo-&gt;init();
</code></pre>

<p>}
```</p>

<p>The above program will not print an expected “The code is working!” line and someone would definitely waste some time trying to figure out why, especially if the project has a few million lines of code.</p>

<h2>A Million Dollars Typo</h2>

<p>Typos can also cause a lot of troubles. For example, developers can misspell the name of the method when overriding:</p>

<p>```c++</p>

<h1>include <iostream></h1>

<h1>include <memory></h1>

<p>class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

virtual void doSomeVeryImportantWork() {
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

virtual void doSomeVeryInportantWork() {
    std::cout &lt;&lt; "The code is working!\n";
}
</code></pre>

<p>};</p>

<p>int main() {</p>

<pre><code>std::unique_ptr&lt;Foo&gt; foo(new Bar());
foo-&gt;doSomeVeryImportantWork();
</code></pre>

<p>}
```</p>

<p>The above program prints nothing despite the expectations and the reason is not immediately obvious.</p>

<h2>Signature Changes</h2>

<p>Signature change is another seemingly innocent change that may potentially waste a log of valuable time when not accounted for properly. For example, the base class’s <code>init()</code> function is changed from this:</p>

<pre><code>virtual void init() { }
</code></pre>

<p>… to this:</p>

<pre><code>virtual void init(int x = 0) {
}
</code></pre>

<p>The whole project still compiles just fine. Yet the program doesn’t work as expected anymore.</p>

<p>It’s also possible to accidentally override someone’s virtual function, etc. The list of such gotchas can go on and on. For those who can relate to this — you must know that you are not alone! C++ developers including myself have dealt with this and similar problems for the past few decades.</p>

<p>Luckily, since introduction of the C++11 the sun is shining on our side of the fence!</p>

<h2>We Override!</h2>

<p>Instead of using (or not using) a <code>virtual</code> keyword and assuming the base class has the method being overridden, we can now use the brand new <code>override</code> keyword. The compiler will then make sure that a method declared with that keyword really overrides the base method. And if that turns out to be not the case, the code won’t compile and the error would be caught during compilation, which is a lot better than debugging. The following is the new version of the first example:</p>

<p>```c++
class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
virtual ~Bar() { }

int init() override {
    Foo::init();
    std::cout &lt;&lt; "The code is working!\n";
}
</code></pre>

<p>};
```</p>

<p>The compilation fails if the base class`s init() method is no longer there:</p>

<pre><code>error: ‘int Bar::init()’ marked override, but does not override
</code></pre>

<h2>It’s Final!</h2>

<p>The second keyword is <code>final</code>. It is a little bit less useful but is still a good self-defense mechanism against unintended usage and/or code changes.</p>

<p>What it means is that a method marked as final is not only virtual and must override its base but that nobody else can further override it. For example:</p>

<p>```c++</p>

<h1>include <iostream></h1>

<h1>include <memory></h1>

<p>class Foo {
public:</p>

<pre><code>Foo() { }
virtual ~Foo() { }

virtual int init() {
    std::cout &lt;&lt; "Hello, World!\n";
}
</code></pre>

<p>};</p>

<p>class Bar : public Foo {
public:</p>

<pre><code>Bar() { }
~Bar() override { }

int init() final {
    Foo::init();
    std::cout &lt;&lt; "This code works!\n";
}
</code></pre>

<p>};</p>

<p>int main() {</p>

<pre><code>std::unique_ptr&lt;Foo&gt; foo(new Bar());
foo-&gt;init();
</code></pre>

<p>}
```</p>

<p>The above code is sound and secure. But if somebody else would try to write a class like this:</p>

<p>```c++
class BetterBar : public Bar {
public:</p>

<pre><code>BetterBar() { }
~BetterBar() override { }

int init() override {
    Bar::init();
    std::cout &lt;&lt; "Even better init() function!\n";
}
</code></pre>

<p>};
```</p>

<p>… a compiler would tell them that they are wrong by issuing an error: </p>

<pre><code>error: virtual function ‘virtual int BetterBar::init()’
error: overriding final function ‘virtual int Bar::init()’
</code></pre>

<p>The <code>final</code> keyword can also be applied to the whole class in order to prevent further derivation from it. For example:</p>

<p>```c++
class Bar final : public Foo {
  public:</p>

<pre><code>Bar() {}
</code></pre>

<p>&hellip;
```</p>

<p>If anyone tries to inherit from Bar, the compiler issues an error: </p>

<pre><code>error: cannot derive from ‘final’ base ‘Bar’ in derived type ‘BetterBar’
</code></pre>

<p>What is interesting is that almost the same effect can be achieved in a less obvious way by applying the <code>final</code> keyword to a virtual destructor of either base (which is not the same as <code>final</code> in this case because it introduces a virtual table) or any derived class:</p>

<p>```c++
class Foo { // You cannot derive from me!
public:</p>

<pre><code>Foo() { }
virtual ~Foo() final { }
</code></pre>

<p>};
```</p>

<p>Template containers from the standard C++ library might be good candidates to be marked with a final keyword, as it is generally not a good idea to derive from them in almost every case.</p>

<h2>Conclusion</h2>

<p>C++11 introduces two important keywords in relation to polymorphism and inheritance — the <code>override</code> and <code>final</code>. Using those keywords should become a habit of any C++ developer. It is worth using every time except when writing a base class. This will make the code clear, maintainable, and potentially save hours that would have been otherwise wasted chasing an error in debugger.</p>

<h2>References</h2>

<ul>
<li><a href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2009/n2928.htm">N2928</a> &ndash; Explicit Virtual Overrides</li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm">N3206</a> &ndash; Override control: Eliminating Attributes</li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm">N3272</a> &ndash; Follow-up on override control</li>
<li><a href="http://clang.llvm.org/cxx_status.html">Clang C++11 Status Report</a></li>
<li><a href="http://gcc.gnu.org/projects/cxx0x.html">GCC C++11 Status Report</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Not To Write a Signal Handler]]></title>
    <link href="http://741MHz.com/signal-handler/"/>
    <updated>2013-01-15T00:00:00-05:00</updated>
    <id>http://741MHz.com/signal-handler</id>
    <content type="html"><![CDATA[<p>Back in the day, I was reading a book about UNIX® programming and have learned how to write a signal handler. It was a long time ago and I don’t remember the book, but to this day the way described in that book is something that shows up in Google’s top results when you search for “How to write a signal handler”. Here it is — a simple, elegant solution to the world’s toughest problem:</p>

<p>```c++ A simple, elegant solution to the world’s toughest problem.</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;signal.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;unistd.h></h1>

<p>static void my_sig_handler(int signum) {</p>

<pre><code>printf("Received interrupt signal!\n");
</code></pre>

<p>}</p>

<p>int main() {</p>

<pre><code>signal(SIGINT, my_sig_handler);
for (;;) {
    printf("Doing useful stuff...\n");
    sleep(1); /* Sleep is not only useful, it is essential! */
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>Now imagine for a second that instead of a simple invocation of <code>sleep()</code> in the body of the <code>main()</code> function, just after the <code>printf()</code>, there was some very important code running a life support system and someone’s life was really dependent on that. What would have happened? Someone would not have been alive for long — that’s for sure. And the terrible signal handling is to blame and here is why…</p>

<h2>You Have Been Warned</h2>

<p>Let’s take a quick look at Linux® manual page for a <code>signal()</code> call. You can find by typing <code>man 2 signal</code> in the command line, or by checking it out online, here — <a href="http://man7.org/linux/man-pages/man2/signal.2.html">http://man7.org/linux/man-pages/man2/signal.2.html</a>. The first sentence in the manual page introduces you to the <code>signal()</code> call. The second sentence, now in bold, warns you, and I quote:</p>

<blockquote><p>Avoid its use: use sigaction(2) instead.</p></blockquote>

<h2>Your Computer Might Take a Trip to a Grocery Store</h2>

<p>Continuing reading the manual page, the very first note under the NOTES section is this:</p>

<blockquote><p>The effects of signal() in a multithreaded process are unspecified.</p></blockquote>

<p>This is called <a href="http://en.wikipedia.org/wiki/Unspecified_behavior">Unspecified Behavior</a>. What it means is that standard does not say anything as for how the function should behave in a multi-threaded environment. Therefore, it may exhibit a different behavior on different systems including different versions of the same system, at discretion of those who implement it. Your mileage may vary.</p>

<p>Even if your code does not explicitly use multiple threads, you are still in danger — it might be used as part of a bigger program in multi-threaded environment. But even if that’s not that case — hey, tomorrow you might want to do that. Do you really want to screw yourself upfront by using this bad <code>signal()</code> function? Think twice.</p>

<h2>Asynchronicity &amp; Reentrancy</h2>

<p>Signals are asynchronous by their nature. Another signal may be delivered to the process while the previous signal is still being “processed”. Therefore, signal handler must not introduce unwanted side effects, must be fully reentrant and cannot use any non-reentrant code — neither explicitly nor implicitly. Now take a quick look at the famous example mentioned at the beginning — there is a nice <code>printf()</code> right in the signal handler code. This is a life threatening piece of code because <code>printf()</code> is non-reentrant. In other words, it is possible that <code>printf()</code> function will get interrupted before it finishes and get called again as part of another signal handler. If that case the program will simply <a href="http://en.wikipedia.org/wiki/Deadlock">deadlock</a>.</p>

<h2>Async-Signal-Safe Functions</h2>

<p>The section 7 of the manual page about signal (which you can see by typing <code>man 7 signal</code> in your terminal or read online here — <a href="http://man7.org/linux/man-pages/man7/signal.7.html">http://man7.org/linux/man-pages/man7/signal.7.html</a>) states the following:</p>

<blockquote><p><strong>Async-signal-safe functions</strong>
A signal handler function must be very careful, since processing elsewhere may be interrupted at some arbitrary point in the execution of the program. POSIX has the concept of “safe function”. If a signal interrupts the execution of an unsafe function, and handler calls an unsafe function, then the behavior of the program is undefined.</p></blockquote>

<p>And then it lists all async-signal-safe functions. So if you don’t know what functions are safe to use inside a signal handler and what functions are not — refer to that list and make sure you are not doing anything dangerous.</p>

<h2>Better Safe Than Sorry</h2>

<p>What is the best way not to become a drag addict? Not to take drugs in the first place. What is the best way to write a safe signal handler? Not to write it all. OK, I am just kidding. Seriously though — if you really want your signal handler to be safe and portable, consider not doing anything inside it except modifying a global <a href="http://en.wikipedia.org/wiki/Volatile_variable">volatile</a> variable of <a href="http://en.cppreference.com/w/cpp/utility/program/sig_atomic_t"><code>sig_atomic_t</code></a> type. Taking all of the above into account, below is an example of how a safe signal handler may look like in real life (note the absence of <code>signal()</code> function in the code):</p>

<p>```c++ Simple and safe signal handling</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;signal.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;unistd.h></h1>

<p>static volatile sig_atomic_t got_signal = 0;</p>

<p>static void my_sig_handler(int signo)
{</p>

<pre><code>got_signal = 1;
</code></pre>

<p>}</p>

<p>int main()
{</p>

<pre><code>struct sigaction sa;

memset(&amp;sa, 0, sizeof(struct sigaction));
sa.sa_handler = &amp;my_sig_handler;
if (sigaction(SIGINT, &amp;sa, NULL) == -1) {
    perror("sigaction");
    return EXIT_FAILURE;
}

for (;;) {
    if (got_signal) {
        got_signal = 0;
        printf("Received interrupt signal!\n");
    }
    printf("Doing useful stuff...\n");
    sleep(1); /* Sleep is not only useful, it is essential! */
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<h2>Modern Signal Handling</h2>

<p>It is the 2013th year in the Common Era at the moment of this writing and you might think that people should have came up with something better in terms of signal handling at this time. The truth is that they did. It is just not that well known yet due to a huge momentum of outdated information still overflowing the Internet.</p>

<h3>FreeBSD, NetBSD, OS X, iOS…</h3>

<p>In the above family of operating systems, the modern way of handling signals is to use <a href="http://en.wikipedia.org/wiki/Kqueue">Kqueue</a> — a scalable event notification mechanism. Here is an example:</p>

<p>```c++ Kqueue Signal Handling</p>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;sys/event.h></h1>

<h1>include &lt;sys/time.h></h1>

<h1>include &lt;signal.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;errno.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>int kq;
int i;
struct kevent ke;
struct timespec timeout;
struct sigaction sa;

/* Block the signal we want to process with kevent first.
   This is needed because kevent has lower precedence. */
memset(&amp;sa, 0, sizeof(struct sigaction));
sa.sa_handler = SIG_IGN;
sigaction(SIGINT, &amp;sa, NULL);

/* Create kqueue... */
kq = kqueue();
if (kq == -1) {
    return EXIT_FAILURE;
}
/* Add a signal event */
EV_SET(&amp;ke, SIGINT, EVFILT_SIGNAL, EV_ADD, 0, 0, NULL);
i = kevent(kq, &amp;ke, 1, NULL, 0, NULL);
if (i == -1)
    return EXIT_FAILURE;
/* Set a timeout (we no longer need to use a blocking sleep(1),
   and this is great! */
timeout.tv_sec = 1; /* To sleep for one second */
timeout.tv_nsec = 0;

/* Dispatch events */
for (;;) {
    i = kevent(kq, NULL, 0, &amp;ke, 1, &amp;timeout);
    if (i &gt; 0) {
        /* Got event(s) to dispatch. Note that we can do whatever the hell
           we want here because we are __not__ in the signal handler. */
        if (ke.ident == SIGINT) {
            printf("Received interrupt signal!\n");
        }
    } else if (i == 0) {
        /* Timeout elapsed */
        printf("Doing useful stuff...\n");
    } else if (i == -1) {
        if (errno == EINTR)
            continue; /* System call interrupted - just restart */
        return EXIT_FAILURE; /* Something went wrong. */
    }
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<h3>Linux</h3>

<p>Linux provides <code>signalfd()</code> for handling signals. The beauty of it is that it may be used by itself, or may be combined with event notification mechanisms such as <code>epoll()</code> and friends. The manual page for <code>signalfd()</code> comes with a good example, so I don’t even have to write one. Here it is:</p>

<p>```c++ Signalfd &amp; Epoll Signal Handling</p>

<h1>include &lt;sys/signalfd.h></h1>

<h1>include &lt;signal.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>define handle_error(msg)                               \</h1>

<pre><code>do { perror(msg); exit(EXIT_FAILURE); } while (0)
</code></pre>

<p>int
main(int argc, char *argv[])
{</p>

<pre><code>sigset_t mask;
int sfd;
struct signalfd_siginfo fdsi;
ssize_t s;

sigemptyset(&amp;mask);
sigaddset(&amp;mask, SIGINT);
sigaddset(&amp;mask, SIGQUIT);

/* Block signals so that they aren't handled
   according to their default dispositions */

if (sigprocmask(SIG_BLOCK, &amp;mask, NULL) == -1)
    handle_error("sigprocmask");

sfd = signalfd(-1, &amp;mask, 0);
if (sfd == -1)
    handle_error("signalfd");

for (;;) {
    s = read(sfd, &amp;fdsi, sizeof(struct signalfd_siginfo));
    if (s != sizeof(struct signalfd_siginfo))
        handle_error("read");

    if (fdsi.ssi_signo == SIGINT) {
        printf("Got SIGINT\n");
    } else if (fdsi.ssi_signo == SIGQUIT) {
        printf("Got SIGQUIT\n");
        exit(EXIT_SUCCESS);
    } else {
        printf("Read unexpected signal\n");
    }
}
</code></pre>

<p>}
```</p>

<h2>Make the world a better place!</h2>

<p>Please make the world a better place by writing correct and safe signal handling code.</p>

<p>Thank you very much for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erasing Vector The Smart Way]]></title>
    <link href="http://741MHz.com/vector-erase/"/>
    <updated>2013-01-14T00:00:00-05:00</updated>
    <id>http://741MHz.com/vector-erase</id>
    <content type="html"><![CDATA[<p>In the C++ world, <a href="http://en.cppreference.com/w/cpp/container/vector"><code>std::vector</code></a> is a <a href="http://en.wikipedia.org/wiki/Sequence_container_(C%2B%2B">sequence container</a>) that encapsulates <a href="http://en.wikipedia.org/wiki/Dynamic_array">dynamic size arrays</a>. One of the main perks of the vector is the fact that elements are stored <strong>contiguously</strong>. In other words, a pointer to an element of a vector may be passed to any function that expects a pointer to an element of array. Or simply put — <code>std::vector</code> is very close to a <a href="http://www.cplusplus.com/doc/tutorial/arrays/">plain old-school C-style array</a>, yet it provides developers with a lot of C++ perks like automatic memory management, bounds checking and more. Unfortunately, <code>std::vector</code> is so great that many developers are using it without really thinking too much about the underlying implementation and its downsides.</p>

<h2>Erase Trap</h2>

<p>A common programming task is to remove one or more elements from the vector. Luckily, <code>std::vector</code> provides a wonderful method called <code>erase()</code> that does exactly that. So what’s the big deal? It’s a trap!</p>

<p>C++ is just like medicine — it is both a cure and a disease. Vector is no exception. Its contiguous memory layout may heal, or it may kill. In this case it is a serial killer. Let’s see why.</p>

<h2>The Innocent Piece of Code</h2>

<p>Let’s take a look at the real-world example that I ran into a few days ago. The goal was to remove all even numbers from a vector, leaving only odd ones. Here is how it was implemented:</p>

<p>```c++
std::vector<int>::iterator it = array.begin();
while (it != array.end()) {</p>

<pre><code>if (*it % 2 == 0)
    it = array.erase(it);
else
    ++it;
</code></pre>

<p>}
```</p>

<p>Logically thinking, the code is very sound — every element is being checked and removed only if it matches a given criteria. Developer even took extra care not to access invalidated iterator. Sounds like a great job. Nice, simple, and it works. Or does it?</p>

<h2>The Problem</h2>

<p>No, it does not. There is one big problem with that code that makes it totally useless. It takes about 55 seconds to run on just one million random elements. Why does that happen, you may ask? The developer  fell into a common trap! That happened because the elements of the vector are stored contiguously, in a contiguous memory and the whole vector is shifted left every time an element is erased. In other words — one does not simply erase an element that is not at the end of the vector.</p>

<h2>The Solution</h2>

<p>Here is the right way of doing this:</p>

<p>```c++
array.erase(</p>

<pre><code>std::remove_if(
    array.begin(), array.end(), [](int v) {
        return v % 2 == 0;
    }
),
array.end()
</code></pre>

<p>);
```</p>

<p>The above code does the job in only 5 milliseconds. That is about eleven thousand times faster. What kind of sorcery is that? Very simple — <a href="http://en.cppreference.com/w/cpp/algorithm/remove"><code>std::remove_if()</code></a> does not erase elements from the vector. It does’t remove anything either. Just a good naming joke. So what the hell it does? It re-arranges elements in such a way that elements to be erased are moved towards the end of a vector. Once the job is done, all elements are erased from the vector with a single invocation of <code>erase()</code>. As a result, the whole vector is not shifted tens of thousands of times and runs a lot faster.</p>

<h2>The Conclusion</h2>

<p>There ain’t no such thing as a free lunch.</p>
]]></content>
  </entry>
  
</feed>
