<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | Ranting @ 741 MHz]]></title>
  <link href="http://741MHz.com/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://741MHz.com/"/>
  <updated>2013-12-01T19:56:40-05:00</updated>
  <id>http://741MHz.com/</id>
  <author>
    <name><![CDATA[741MHz.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[From Switch Statement Down to Machine Code]]></title>
    <link href="http://741MHz.com/switch/"/>
    <updated>2013-01-13T00:00:00-05:00</updated>
    <id>http://741MHz.com/switch</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Most of us know what a <a href="http://en.wikipedia.org/wiki/Switch_statement"><em>switch</em> statement</a> is and have probably been using it very often. No wonder why — switch statement is simple yet extremely expressive. It allows keeping the code compact while describing complex <a href="http://en.wikipedia.org/wiki/Control_flow">control flow</a>. Putting the <a href="http://en.wikipedia.org/wiki/Syntactic_sugar">syntactic sugar</a> aside, most developers also believe that using a switch statement results in a lot better, faster code. Not many knows if that is really true and why. The most common speculations supporting superior switch statement performance are:</p>

<ul>
<li>Compilers implement switch as a <a href="http://en.wikipedia.org/wiki/Branch_table">jump table</a> and it is faster than an average number of conditional branches that the code would have taken otherwise. Therefore, the code generated from switch expressions is executed faster than if-then-else.</li>
<li>Compilers generate a <a href="http://en.wikipedia.org/wiki/Binary_search_algorithm">binary lookup</a> table to match the input value when using switch statement. The binary search algorithm’s worst performance is O(log n). It is a faster than O(n) worst case performance of a <a href="http://en.wikipedia.org/wiki/Linear_search">linear search</a>. Therefore, switch is faster.</li>
</ul>


<p>It all sounds good in theory. Yet not many understand switch statements down to the machine code level and even less have checked what their compilers do. By the way, why cannot a compiler optimize an if-then-else code the same way it optimizes a switch? Maybe it can? Let’s find out!</p>

<p>We’ll use the two most popular production quality compilers — GCC (version 4.7.2, released 20 Sep 2012) and Clang (version 3.0, released December 01, 2011).</p>

<p>In both cases, we will be compiling the code for Intel® Xeon® <a href="http://ark.intel.com/products/47924/Intel-Xeon-Processor-E5630-12M-Cache-2_53-GHz-5_86-GTs-Intel-QPI">E5630</a> CPU with enabled compiler optimizations (either «-O2», «-O3» or «-Os»).</p>

<p>The knowledge of <a href="http://en.wikipedia.org/wiki/X86-64">x86_64</a> <a href="http://en.wikipedia.org/wiki/Assembly_language">assembly language</a> is not required but some understanding of what it is and how CPU process low-level instructions might be helpful.</p>

<h2>Simple Switch</h2>

<p>Let’s start by looking at a very simple switch statement. It has six case labels, does not have a default case, and has no fall-trough cases so each case is followed by a break statement:</p>

<p>```c++</p>

<h1>include &lt;time.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>srand(time(NULL));
switch (rand()) {
case 0:
    printf("zero\n");
    break;
case 1:
    printf("one\n");
    break;
case 2:
    printf("two\n");
    break;
case 3:
    printf("three\n");
    break;
case 4:
    printf("four\n");
    break;
case 5:
    printf("five\n");
    break;
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>It would be logical to assume that the above code would be translated into a jump table. To verify this assumption, we need to disassemble the binary generated by the compiler and check how the machine code looks like.</p>

<p>Below is a disassembly of the binary generated by GCC compiler. Each line has a comment on the right that starts with <code>;</code> character:</p>

<p><code>
4004f7:       cmp    eax,0x5                    ; Compare the value with 5.
4004fa:       ja     400518 &lt;main+0x38&gt;         ; Jump to exit if the value is greater than 5.
4004fc:       mov    eax,eax                    ; Clear 32 to 63 bits
4004fe:       xchg   ax,ax                      ; NOP
400500:       jmp    QWORD PTR [rax*8+0x400738] ; Jump to address 0x400738[%rax]
400507:       mov    edi,0x40072c               ; Set "five" as a parameter.
40050c:       call   400490 &lt;puts@plt&gt;          ; Call "puts()".
400511:       nop    DWORD PTR [rax+0x0]        ; NOP
400518:       xor    eax,eax                    ; Zero return code.
40051a:       add    rsp,0x8                    ; Pop stack (stack grows inward).
40051e:       ret                               ; Return from the main() function.
40051f:       mov    edi,0x400727               ; Set "four" as a parameter.
400524:       call   400490 &lt;puts@plt&gt;          ; Call "puts()".
400529:       jmp    400518 &lt;main+0x38&gt;         ; Jump to exit.
40052b:       mov    edi,0x400714               ; Set "three" as a parameter.
400530:       call   400490 &lt;puts@plt&gt;          ; Call "puts()".
400535:       jmp    400518 &lt;main+0x38&gt;         ; Jump to exit.
400537:       mov    edi,0x400719               ; Set "two" as a parameter.
40053c:       call   400490 &lt;puts@plt&gt;          ; Call "puts()".
400541:       jmp    400518 &lt;main+0x38&gt;         ; Jump to exit.
400543:       mov    edi,0x40071d               ; Set "one" as a parameter.
400548:       call   400490 &lt;puts@plt&gt;          ; Call "puts()".
40054d:       nop    DWORD PTR [rax]            ; NOP
400550:       jmp    400518 &lt;main+0x38&gt;         ; Jump to exit.
400552:       mov    edi,0x400721               ; Set "zero" as a parameter.
400557:       call   400490 &lt;puts@plt&gt;          ; Call "puts()".
40055c:       jmp    400518 &lt;main+0x38&gt;         ; Jump to exit.
40055e:       xchg   ax,ax                      ; Unreachable NOP (padding).
</code></p>

<p>As we can see, GCC has generated the code that uses an indirect jump transferring execution of the program to a code location depending on the input value using a combination of cmp and ja instructions. This is a simple case of a jump table.</p>

<p>To see what other compilers might do, let’s look at the disassembly of the same program compiler by Clang:</p>

<p><code>
4005a7: cmp    eax,0x5                     ; Compare the value with 5.
4005aa: ja     4005e2 &lt;main+0x52&gt;          ; Jump to exit if value is &gt; 5.
4005ac: mov    eax,eax                     ; Convert 32-bit to 64-bit (clear upper half).
4005ae: jmp    QWORD PTR [rax*8+0x4006e0]  ; Jump to a relative address using %rax as the index.
4005b5: mov    edi,0x400710                ; Push "zero" as parameter.
4005ba: jmp    4005dd &lt;main+0x4d&gt;          ; Go to print &amp; exit.
4005bc: mov    edi,0x400715                ; Push "one" as parameter.
4005c1: jmp    4005dd &lt;main+0x4d&gt;          ; Go to print &amp; exit.
4005c3: mov    edi,0x400719                ; Push "two" as parameter.
4005c8: jmp    4005dd &lt;main+0x4d&gt;          ; Go to print &amp; exit.
4005ca: mov    edi,0x40071d                ; Push "three" as parameter.
4005cf: jmp    4005dd &lt;main+0x4d&gt;          ; Go to print &amp; exit.
4005d1: mov    edi,0x400723                ; Push "four" as parameter.
4005d6: jmp    4005dd &lt;main+0x4d&gt;          ; Go to print &amp; exit.
4005d8: mov    edi,0x400728                ; Push "five" as parameter.
4005dd: call   400450 &lt;puts@plt&gt;           ; Call "puts()" (printing point).
4005e2: xor    eax,eax                     ; Zero return (exit point).
4005e4: pop    rbp                         ; Pop stack frame.
4005e5: ret                                ; Return
4005e6: nop    WORD PTR cs:[rax+rax*1+0x0] ; NOP (alignment/padding)
</code></p>

<p>From the above example, we can immediately tell that Clang has generated a more compact code by avoiding multiple calls to puts() function.</p>

<p>Interestingly enough, GCC can also eliminate multiple calls to puts() function and generate exactly the same code for the above switch statement as Clang does. To achieve this, we must specify «-Os» flag on the command line. This flags instructs the compiler to optimize the binary for small size.</p>

<p>Apart from this small difference in optimizing function calls, both compilers used a combination of cmp and ja functions to implement a jump table. From this we can draw a conclusion that for simple cases compilers do generate a jump table.</p>

<h2>Crafting a Jump Table</h2>

<p>To get a better understanding of a jump table mechanics, let’s consider creating one manually without using a switch statement. It is possible to create a jump table manually a few different ways.</p>

<p>The first way of writing a jump table is to use an assembler language. It is low level programming language that does not have high-level constructs such as if-then-else or switch, but it allows to use processor instructions directly, making it possible to manually employ “cmp”, “ja” or other instructions to implement a functional equivalent of the code generated by compilers. This would have been very time consuming, require much higher understanding of the assembly language, result in less portable and hard to maintain code.</p>

<p>It is also possible to code a logical equivalent of a jump table in C, without using a switch statement. To do this, we could create an array that holds function pointers, and then call a function using an index to this array. For example:</p>

<p>```c++</p>

<h1>include &lt;stdio.h></h1>

<p> 
static void zero(void) {</p>

<pre><code>puts("zero");
</code></pre>

<p>}
 
static void one(void) {</p>

<pre><code>puts("one");
</code></pre>

<p>}
 
static void two(void) {</p>

<pre><code>puts("two");
</code></pre>

<p>}
 
typedef void (*func)(void);
 
int main() {</p>

<pre><code>func table[] = { &amp;zero, &amp;one, &amp;two };
int i = 0;
/* Read the value of `i` from user
   input or other source */
table[i]();
</code></pre>

<p>}
```</p>

<p>This, however, would only be a logical equivalent of the jump table, but not a functional one. The main difference in functionality is that jump table transfers control to a specified location directly instead of calling a function.
To achieve a functional equivalent of the jump table in C or C++, we must structure the code in such a way as to avoid function calls. We must create an array of addresses where the control is to be transferred, instead of array of functions. One of the possible ways of doing this is to label our code and create an array that store labels instead of functions. For example:</p>

<p>```c++</p>

<h1>include &lt;time.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>    static const void *jump_table[] = {
            &amp;&amp;print_0, &amp;&amp;print_1, &amp;&amp;print_2,
            &amp;&amp;print_3, &amp;&amp;print_4, &amp;&amp;print_5
    };
    int v;

    srand(time(NULL));
    v = rand();
    if (v &lt; 0 || v &gt; 5)
            goto out;
    goto *jump_table[v];

print_0:
    printf("zero\n");
    goto out;
print_1:
    printf("one\n");
    goto out;
print_2:
    printf("two\n");
    goto out;
print_3:
    printf("three\n");
    goto out;
print_4:
    printf("four\n");
    goto out;
print_5:
    printf("five\n");
    goto out;
</code></pre>

<p>out:</p>

<pre><code>return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>The above code would result in exactly the same binary as produced by GCC for a simple switch statement example we have reviewed in the first chapter. It cannot be considered readable or easily maintainable, but it could have been used for performance reasons if C or C++ language did not have a switch statement construct.</p>

<p>Note that despite being used by low-level developers from time to time, the above code is not standard. It is neither standard C nor C++ is none of those languages support taking address of a label. Despite that, this feature is implemented as a nonstandard extension by most production grade C and C++ compilers.</p>

<h2>Trivial Switch</h2>

<p>Modern processors employ a wide variety of optimization techniques to speed up the execution of computer programs. One of those techniques is branch prediction. It tries to guess which way a branch of the logic will go before this is known for sure. In a high-level programming languages such as C, branches are formed by if-then-else structures, goto instructions, different kinds of loop statements, switch statement and other constructs.</p>

<p>How processors implement branch prediction is largely a trade secret. It is well known, however, that this technique is less efficient if processor runs into indirect branch instruction, such as that used in jump tables code. In other words, a single indirect jump instruction is relatively more expensive than a simple branch, such as generated by if-then construct.</p>

<p>This means that for some architectures, it is possible that a simple if-then-else statement with a few comparisons and direct jump instructions might theoretically execute faster than a single indirect jump instruction. In other words, if compilers always generate a jump table for a switch statement, then we could write a more efficient code (from execution time perspective) by avoiding using a switch and resorting to if-then-else.</p>

<p>The cost ratio of compare and jump instructions to indirect jump instruction is not known without experimentation. How much if-then-else branches can we take before its execution time would be slower than that of a single indirect jump? It is also not clear whether compilers take care of this or not. To find out, we must experiment. Since our initial switch statement had six case labels, we must keep reducing the number of labels, disassemble the resulting binary on every stage and compare the results to see if the generated code is functionally different.</p>

<h3>Five Cases</h3>

<p>The first step is to remove a single label from the switch, effectively reducing a number of case labels to five. By doing so, nothing has changed regarding how compilers handle switch statement in case with both GCC and Clang compilers.</p>

<h3>Four Cases</h3>

<p>Reducing a number of cases further results in some interesting changes. With only four cases in a switch, Clang continues to generate a jump table as in all previous cases. GCC, on the other hand, stops using a jump table and resorts to simple comparison equivalent to if-then-else. Below is a disassembled binary demonstrating what GCC does in this case:</p>

<p><code>
4004f4:  cmp    eax,0x1             ; Compare value with 1.
4004f7:  je     400514 &lt;main+0x34&gt;  ; If value is 1, go there
4004f9:  jg     400501 &lt;main+0x21&gt;  ; If value is greater than 1, compare more.
4004fb:  test   eax,eax             ; Could be &lt;= 0. Compare with 0.
4004fd:  je     40050d &lt;main+0x2d&gt;  ; Go ptint "zero" if matched or jump to exit
4004ff:  jmp    40052c &lt;main+0x4c&gt;  ; Jump to exit (value was not zero)
400501:  cmp    eax,0x2             ; Value was &gt; 1. Compare it with 2.
400504:  je     40051b &lt;main+0x3b&gt;  ; Matched, go print and exit.
400506:  cmp    eax,0x3             ; Was != 2. Compare with 3.
400509:  jne    40052c &lt;main+0x4c&gt;  ; Go to exit if not matched.
40050b:  jmp    400522 &lt;main+0x42&gt;  ; Value is three!!! Go print it.
40050d:  mov    edi,0x4006e4        ; Set "zero" as parameter.
400512:  jmp    400527 &lt;main+0x47&gt;  ; Go call "puts()" and exit.
400514:  mov    edi,0x4006e9        ; End up here if value is 1.
400519:  jmp    400527 &lt;main+0x47&gt;  ; Go call "puts()" and exit.
40051b:  mov    edi,0x4006ed        ; Value was 2. Set...
400520:  jmp    400527 &lt;main+0x47&gt;  ; ... "two" as parameter and go print.
400522:  mov    edi,0x4006f1        ; Set "three" as argument to "puts()".
400527:  call   400490 &lt;puts@plt&gt;   ; Call "puts()".
40052c:  xor    eax,eax             ; Zero register with return value.
40052e:  pop    rdx                 ; Pop stack
40052f:  ret                        ; Return control to the caller.
</code></p>

<p>As we can see, there is no longer an indirect jump. Instead, the input is compared with every possible value using a set of compare and jump instructions.</p>

<h3>Three and Less Cases</h3>

<p>With only three cases in a switch, Clang starts generating the same code as GCC does starting at four — comparison instructions are used instead of a jump table.
By reducing a number of cases further down to one, the same result is observed with both compilers.</p>

<h3>Note on GCC</h3>

<p>GCC compiler allows users to control the cutoff between doing switch statements as a series of if-then-else statements and using a jump table since version 4.7. The threshold controlling this behavior can be specified as a command line option.</p>

<h3>Conclusion</h3>

<p>From the above experiments, we can conclude that both GCC and Clang compilers are well aware that indirect jumps are relatively expensive.</p>

<p>Both compilers are trying to avoid a jump table if the number of case labels in the switch is small enough to justify using a chain of compare and jump instructions.</p>

<p>The only difference between the two compilers is they use a different cost ratio when deciding on using a jump table. GCC drops the idea of jump table starting at 4 case labels down to 1. Clang drops the jump table approach at 3 swithc cases and below.</p>

<p>This of course is purely an implementation detail and can change from one platform to another, or between different versions of the compiler.</p>

<h2>Default Case</h2>

<p>Does having a switch statement with a default case affect the mechanism used to implement a switch statement in machine code?</p>

<p>Unlike hardware description languages like Verilog where there could be no default case in a switch, the software logic always has a default case that transfers a control flow further. It might be explicitly specified with a special default case label, or be implicitly generated by a compiler.</p>

<p>Therefore, the presence or absence of an explicit default case does not make a difference. The only case when not specifying a default case explicitly is beneficial is when switch is performed on enumeration. In that case, compiler may warn a programmer if switch does not handle all possible values of enumeration. This is strictly a static analysis feature that is helpful to developers but does not affect compiler’s decision about the implementation mechanism of a switch statement in any way.</p>

<h2>Large Values</h2>

<p>Not all switch cases have their values starting at 0. Some may have them start at one, two or even a million. Since jump tables are essentially represented as arrays, and all arrays in both C and C++ languages start with 0. We certainly cannot create an array of 101 elements only to have the last entry at index 100 to hold a valid jump address. So how does having large values in the switch affect the generated code?</p>

<h3>Continuous Range</h3>

<p>Let’s first take a look at a very simple example where all case values of a switch are continues:</p>

<p>```c++</p>

<h1>include &lt;time.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>srand(time(NULL));
switch (rand()) {
  case 1986000:
      printf("zero\n");
      break;
  case 1986001:
      printf("one\n");
      break;
  case 1986002:
      printf("two\n");
      break;
  case 1986003:
      printf("three\n");
      break;
  case 1986004:
      printf("four\n");
      break;
  case 1986005:
      printf("five\n");
      break;
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>As you can see, the minimum value in the switch is 198,600,000. Some programmers think that, because compiler build a jump table from case values and the input to a switch statement might be used as an index to a jump table, having large values will not work and result in less efficient code. So what they are trying to help the compiler optimize the code by writing it like this:</p>

<p>```c++</p>

<h1>include &lt;time.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>srand(time(NULL));
switch (rand() - 1986000) {
  case 0:
      printf("zero\n");
      break;
  case 1:
      printf("one\n");
      break;
  case 2:
      printf("two\n");
      break;
  case 3:
      printf("three\n");
      break;
  case 4:
      printf("four\n");
      break;
  case 5:
      printf("five\n");
      break;
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>In other words, they subtract N from input value to make the resulting range start from 0. Is this a good optimization?</p>

<p>Both GCC and Clang are production grade compilers. It is extremely rare to run into a situation where programmer needs to optimize such a simple case manually, unless programmer knows something that compiler cannot possibly guess from context. Therefore, it would be logical to assume that both GCC and Clang should handle the above optimization automatically. To verify this, below is a disassembled binary code generated by GCC from the code without a manual optimization:</p>

<p><code>
4004f2:       call   4004d0 &lt;rand@plt&gt; ; Call "rand()".
4004f7:       sub    eax,0x1e4dd0      ; Subtract "1986000" from the result.
4004fc:       cmp    eax,0x5           ; Compare with 5 and do the rest as before.
</code></p>

<p>The code generated by the Clang looks exactly the same:</p>

<p><code>
4005a2:       call   400490 &lt;rand@plt&gt; ; Call "rand()".
4005a7:       add    eax,0xffe1b230    ; Add "4292981296" to the result.
4005ac:       cmp    eax,0x5           ; Compare with 5 and do the rest as before.
</code></p>

<p>This proves that compilers are smart enough to perform basic optimization on switch statements whose values are not starting with 0.</p>

<h3>Sparse Values</h3>

<p>So far we have looked at simple switch statements whose case values were continuous. They either started from 0 or other numbers and incremented continuously without gaps in between.</p>

<p>The Wikipedia article on switch statement quotes a research paper:</p>

<blockquote><p>To optimize a switch statement, the programmer must use a very compact range of possible values to test.</p></blockquote>

<p>What happens if that is not possible or if programmer does something differently? Does it mean that a switch statement would not be optimized in any way?</p>

<p>There are two common types of values distribution in sparse switches. The first is when values can still be grouped together. For example, values of 10, 11, 12, 100 and 101 can grouped into two compact ranges, [10-12] and [100-101]. The second case is when no grouping can be done whatsoever.</p>

<p>Let’s test those two cases and find out what optimizations are performed by the compiler, if any.</p>

<h4>Distant Ranges</h4>

<p>Consider the following switch statement with values in [0-5] and [10000-10002] ranges:</p>

<p>```c++</p>

<h1>include &lt;time.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>srand(time(NULL));
switch (rand()) {
  case 0:
      printf("zero\n");
      break;
  case 1:
      printf("one\n");
      break;
  case 2:
      printf("two\n");
      break;
  case 3:
      printf("three\n");
      break;
  case 4:
      printf("four\n");
      break;
  case 5:
      printf("five\n");
      break;

  case 10000:
  case 10001:
  case 10002:
      printf("10K!\n");
      break;
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>Below is the disassembled binary code generated for the above code by GCC:</p>

<p><code>
4004f7:   cmp    eax,0x3             ; Comparison #1: Compare with 3.
4004fa:   je     40056e &lt;main+0x8e&gt;  ; It is 3! Print &amp; exit.
4004fc:   nop    DWORD PTR [rax+0x0]
400500:   jle    40051f &lt;main+0x3f&gt;  ; Is it &lt; 3? Go to comparison #3.
400502:   cmp    eax,0x5             ; Comparison #2: Compare with 4.
400505:   je     400553 &lt;main+0x73&gt;  ; It is 4! Print &amp; exit.
400507:   jl     400537 &lt;main+0x57&gt;  ; Is it &lt; 4? Goto comparison #4.
400509:   sub    eax,0x2710          ; Subtract 10000.
40050e:   cmp    eax,0x2             ; Comparison #5: Compare with 2.
400511:   ja     400530 &lt;main+0x50&gt;  ; It is &gt;2. Just exit (no match).
400513:   mov    edi,0x400741        ; Set "10K!" as a parameter
400518:   call   400490 &lt;puts@plt&gt;   ; Call "puts()".
40051d:   jmp    400530 &lt;main+0x50&gt;  ; Go to exit.
40051f:   cmp    eax,0x1             ; Comparison #3: Compare with 1.
400522:   je     400562 &lt;main+0x82&gt;  ; It is 1! Go print it.
400524:   jle    400543 &lt;main+0x63&gt;  ; It is less than 1. Go to comparison #6.
400526:   mov    edi,0x40072d        ; The value is 2 (by exclusion),
40052b:   call   400490 &lt;puts@plt&gt;   ; ... print "2" and exit.
400530:   xor    eax,eax
400532:   add    rsp,0x8
400536:   ret
400537:   mov    edi,0x400737
40053c:   call   400490 &lt;puts@plt&gt;
400541:   jmp    400530 &lt;main+0x50&gt;
400543:   test   eax,eax             ; Comparison #6
400545:   jne    400530 &lt;main+0x50&gt;  ; Nope. No match here. Go to exit.
400547:   mov    edi,0x400724        ; Print "zero" and exit.
</code></p>

<p>As we can see, the generated code seems to be less efficient compared to that of jump table. By looking closer at the program flow we can see that GCC has implemented a binary search algorithm. It is still well optimized compared to a simple chain of compare and jump instructions generated by if-then-else.</p>

<p>Clang takes a different approach in handling the above code:</p>

<p><code>
4005a7:   cmp    eax,0x270f
4005ac:   jg     4005e6 &lt;main+0x56&gt;
4005ae:   cmp    eax,0x5
4005b1:   ja     4005fb &lt;main+0x6b&gt;
4005b3:   mov    eax,eax
4005b5:   jmp    QWORD PTR [rax*8+0x4006f0]
4005bc:   mov    edi,0x400720
4005c1:   jmp    4005f6 &lt;main+0x66&gt;
4005c3:   mov    edi,0x400725
4005c8:   jmp    4005f6 &lt;main+0x66&gt;
4005ca:   mov    edi,0x400729
4005cf:   jmp    4005f6 &lt;main+0x66&gt;
4005d1:   mov    edi,0x40072d
4005d6:   jmp    4005f6 &lt;main+0x66&gt;
4005d8:   mov    edi,0x400733
4005dd:   jmp    4005f6 &lt;main+0x66&gt;
4005df:   mov    edi,0x400738
4005e4:   jmp    4005f6 &lt;main+0x66&gt;
4005e6:   lea    eax,[rax-0x2710]
4005ec:   cmp    eax,0x3
4005ef:   jae    4005fb &lt;main+0x6b&gt;
4005f1:   mov    edi,0x40073d
4005f6:   call   400450 &lt;puts@plt&gt;
4005fb:   xor    eax,eax
4005fd:   pop    rbp
4005fe:   ret
</code></p>

<p>The code generated by Clang is a little bit more tricky compared to GCC. First it compares the input value with 9999. If the value is greater, it normalizes it by subtracting 10000 using “lea“ instruction, and then checks if the value is within [0-3) range. If it is, the “10K” is then printed. Otherwise, the function returns. If value is less than 9999, it ensures the value is in [0-5] range and uses a jump table. Very clever, isn’t it?</p>

<h4>Sparse Values</h4>

<p>The second common switch pattern is when values are sparse enough so that they cannot be grouped together. For example:</p>

<p>```c++</p>

<h1>include &lt;time.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>srand(time(NULL));
switch (rand()) {
  case 0: printf("0!\n"); break;
  case 50: printf("50!\n"); break;
  case 100: printf("100!\n"); break;
  case 150: printf("150!\n"); break;
  case 200: printf("200!\n"); break;
  case 250: printf("250!\n"); break;
  case 300: printf("Spartans!\n"); break;
  case 350: printf("350!\n"); break;
  case 400: printf("400!\n"); break;
  case 450: printf("400!\n"); break;
  case 500: printf("400!\n"); break;

  case 10000:
  case 10001:
  case 10002:
  case 10003:
  case 10004:
  case 10005:
      printf("10K!\n");
      break;
}
return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>For the above code, both GCC and Clang compilers have generated a binary search algorithm.
Changing the order of case labels in the switch did not affect the generated code — both compilers have analyzed all the specified values before making optimization decisions.</p>

<h2>Fall Through Switch</h2>

<p>So far we have looked at switch statements with no fall through cases, where each case had a trivial code. There are of course more complex scenarios.</p>

<p>What happens if we introduce fall through switch? What if we make each case statement to have complex control flows? What if we do both of the above?</p>

<p>The answer is simple — it does not fundamentally change the way compilers implement switch statements. The same approach of mixing comparison, range checking, binary search and jump table logic is still used.</p>

<p>What it affects, however, is how compiler rearranges the control flow. It may group some logic together, or split it. Redundant code might be reduced, or it might get duplicated intentionally to reduce a number of jump instructions. The code might be placed at different addresses, compiler might also generate different jump instructions to achieve the most compact and fast code. All those optimizations techniques are not unique to switch statements and are being used with other language constructs.</p>

<h2>Outsmarting Compilers</h2>

<p>Every discussion about code micro-optimization, which switch statements are usually part of, shall start with a word of warning. Outsmarting a production quality compiler these days is a nearly impossible task. A programmer should not even try to optimize the code that is not proven to be a bottleneck by carefully profiling the whole program. If a piece of code is proven to be slow and there is an obvious optimization that compiler has failed to perform, shop for a better compiler. Start by optimizing the logic and not the code — doing less steps where possible, avoiding chaotic dynamic memory manipulations, using well designed data structures will pay off more than any micro-optimization.</p>

<p>If, however, a switch statement turns out to be one of the biggest bottlenecks of the code, there might be ways to improve it. To do that, it is vital to know more information about the possible values passed into a switch than compiler knows about or may figure out from context. If there is nothing known about the input value — don’t bother optimizing, there is no way of implementing a general case better than a compiler.</p>

<h3>Improving a Switch</h3>

<p>Consider the following example:</p>

<p>```c++
switch (value) {
  case 0:</p>

<pre><code>  do_very_important_stuff_0();
  break;
</code></pre>

<p>  case 1:</p>

<pre><code>  do_not_important_stuff_1();
  break;
</code></pre>

<p>  case 2:</p>

<pre><code>  do_not_important_stuff_2();
  break;
</code></pre>

<p>  case 3:</p>

<pre><code>  do_not_important_stuff_3();
  break;
</code></pre>

<p>  case 4:</p>

<pre><code>  do_not_important_stuff_4();
  break;
</code></pre>

<p>  case 5:</p>

<pre><code>  do_very_important_stuff_5();
  break;
</code></pre>

<p>}
```</p>

<p>The above switch statement will be implemented using a jump table. It is impossible to do better unless it is known that most of the time the value is either 0 or 5, and can turn out to be 1, 2 or 3 only in some rare conditions that almost never happen. If that is the case, there is no way that compiler may know about it (unless of course we use profiler feedback optimization, which is not always possible). So how to optimize this for that particular case?</p>

<p>We remember that an indirect call is more expensive than two-three comparisons, at least for our given platform. This was proven during our earlier experiments with reducing a number of cases in a switch. Given that our critical path in the above examples consists of only two values — 0 and 5, the code can be optimized by not using those two statements in a switch case to avoid an expensive indirect jump. For example:</p>

<p>```c++
if (value == 0) {</p>

<pre><code>do_very_important_stuff_0();
</code></pre>

<p>} else if (value == 5) {</p>

<pre><code>do_very_important_stuff_5();
</code></pre>

<p>} else {</p>

<pre><code>switch (value) {
  case 1:
      do_not_important_stuff_1();
      break;
  case 2:
      do_not_important_stuff_2();
      break;
  case 3:
      do_not_important_stuff_3();
      break;
  case 4:
      do_not_important_stuff_4();
      break;
}
</code></pre>

<p>}
```</p>

<p>If there are only two or three possible input values, the same technique can be used to improve switch statements that compiler implements using a binary search approach. If, however, the input value may vary, improving a switch performance turns into nothing more but improving a search algorithm. The programmer will have to analyze the most common set of input values, select or invent the search algorithm with better average performance or better performance for more important inputs, and manually implement the switch functionality using handcrafted if-then-else statements, creating a jump table manually (as described in chapter 3), or both.</p>

<h3>Switch vs High-Level Search</h3>

<p>Some developers occasionally get concerned whether it is better to use a switch statement or a higher-level search algorithms like, for example, a hash lookup implemented by the std::unordered_map class from C++ Standard Library.</p>

<h4>Hash Lookup</h4>

<p>Compared to dynamic hash lookup tables, statically generated lookup code for a pre-defined ranges of values will always be better than any other hash table implementation given that switch statements can only work with constant simple numeric POD types.</p>

<h4>Binary Search</h4>

<p>Ordered lookup algorithms such as those commonly used with std::map can theoretically be more efficient than a switch statement. The runtime overhead of those algorithms, however, may render them useless compared to a simple, low-level switch implementation. This may also depend on a nature of the input. Therefore, there is no general answer to this question and developers must test both implementations to determine which one is better in any particular case.</p>

<h2>If-then-else Recognition</h2>

<p>By experimenting with different switch statements we have ensured that compilers do a wonderful optimization job. It almost does not matter how programmers describe the switch it in the code — compiler will always generate nearly perfect generic lookup algorithms, rearrange code as needed, group or duplicate statements and apply other techniques to make the code most efficient.</p>

<p>C programming language is very high-level and it might seem that in many cases it should not matter how the control flow is described and the same optimization might be applied as long as a resulting program is functionally the same. This raises a question of whether compiler will do the same optimizations if programmer is using if-then-else. In theory, it might be the same, or might be different. But instead of guessing, let’s find out.</p>

<p>Below is a C program that is equivalent to our simple switch example:</p>

<p>```c++</p>

<h1>include &lt;time.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>int v;

srand(time(NULL));
v = rand();

if (v == 0) {
    printf("zero\n");
} else if (v == 1) {
    printf("one\n");
} else if (v == 2) {
    printf("two\n");
} else if (v == 3) {
    printf("three\n");
} else if (v == 4) {
    printf("four\n");
} else if (v == 5) {
    printf("five\n");
}

return EXIT_SUCCESS;
</code></pre>

<p>}
```</p>

<p>GCC did not generate an equivalent code to that of a switch statement. A set of compare instructions is used instead. Here is a relevant snippet of the binary code:</p>

<p><code>
4004f7:   test   eax,eax
4004f9:   je     40051e &lt;main+0x3e&gt;
4004fb:   cmp    eax,0x1
4004fe:   xchg   ax,ax
400500:   je     400536 &lt;main+0x56&gt;
400502:   cmp    eax,0x2
400505:   je     400542 &lt;main+0x62&gt;
400507:   cmp    eax,0x3
40050a:   je     40054e &lt;main+0x6e&gt;
40050c:   cmp    eax,0x4
40050f:   nop
400510:   je     40055a &lt;main+0x7a&gt;
400512:   cmp    eax,0x5
400515:   je     40052a &lt;main+0x4a&gt;
</code></p>

<p>Clang compiler, on the other hand, has generated a jump table:</p>

<p><code>
4005a7:   cmp    eax,0x5
4005aa:   ja     4005e2 &lt;main+0x52&gt;
4005ae:   jmp    QWORD PTR [rax*8+0x4006e0]
</code></p>

<p>Therefore, we can draw a conclusion that compilers can and sometimes do optimize if-then-else statements the same way they optimize switch statements.</p>

<p>Whether it makes sense or not is another question. At first, it may seem like Clang has done a lot better job than GCC. However, this automatically prevents developer from performing optimizations described in the previous chapter by making it impossible to use comparison in the fast path of the program. This also prevents developers from manually providing branch prediction hints because switch cases, unlike if-then-else branches, cannot be explicitly prioritized. Since compilers cannot know for sure if switch was replaced by if-then-else statement on purpose, automatically replacing if-then-else with switch might discard programmer’s optimization efforts and worsen the runtime efficiency of the program.</p>

<h2>Summary</h2>

<p>We have learned how decent compilers transform higher-level switch statements into a low level machine code, reviewed a number of different examples along with optimization techniques applied by the compilers.</p>

<p>We also discussed a few optimization techniques that can be applied in certain situations to improve the application performance by using a special mix of switch and if-then-else statements.</p>

<p>I hope that it would helps us, developers, to better understand what switch statements are, what they can be used for and how they work, as well as adding some practical backup to some very common speculative talks about switch statement optimizations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unreasonable Effectiveness of C]]></title>
    <link href="http://741MHz.com/unreasonable-effectiveness-of-c/"/>
    <updated>2013-01-10T00:00:00-05:00</updated>
    <id>http://741MHz.com/unreasonable-effectiveness-of-c</id>
    <content type="html"><![CDATA[<p>It is always nice to run into like-minded people. Today I ran into <a href="http://damienkatz.net/">Damien Katz</a>, CTO at <a href="http://www.couchbase.com/">Couchbase</a>,  and his brilliant story about why C is a beautiful high-level language. For a big fan of C like me it would have been a crime not to share this story. If you agree that OOP is a hype and a disease or if you think that C++ is a horrible language then you will definitely enjoy it:</p>

<blockquote><p>For years I’ve tried my damnedest to get away from C. Too simple, too many details to manage, too old and crufty, too low level. I’ve had intense and torrid love affairs with Java, C++, and Erlang. I’ve built things I’m proud of with all of them, and yet each has broken my heart. They’ve made promises they couldn’t keep, created cultures that focus on the wrong things, and made devastating tradeoffs that eventually make you suffer painfully. And I keep crawling back to C.</p></blockquote>

<p><a href="http://damienkatz.net/2013/01/the_unreasonable_effectiveness_of_c.html">[Read the full story&hellip;]</a></p>

<p>While we are at it, you may also enjoy:</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Object-oriented_programming#Criticism">Object Oriented Programming Criticism</a></li>
<li><a href="http://article.gmane.org/gmane.comp.version-control.git/57918">Linus Torvalds opinion on C++</a> — you are full of bullshit!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Exceptions Performance]]></title>
    <link href="http://741MHz.com/exceptions-performance/"/>
    <updated>2011-07-22T00:00:00-04:00</updated>
    <id>http://741MHz.com/exceptions-performance</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>Exceptions provide a way to react to special conditions that change the normal flow of a program execution. Exception handling in general can refer to programming language construct, computer hardware mechanism, or both.</p>

<p>Many people are concerned with performance impact introduced by using exception mechanism in C++. For example, one of my colleagues believes that using exceptions should be avoided at any cost to improve execution speed of an application. Is that true or not? Let’s find out.</p>

<h3>Using exceptions</h3>

<p>It is important to understand that exception is not a general case of a program execution flow but an unexpected situation. Such situation should normally not arise at all. However, errors happen and we need to check for them. A large chunk of any good program is mostly dedicated to proper error handling. There are two fundamental approaches when dealing with error handling — return codes or exceptions. For example, let’s say we have a custom function that implements division:</p>

<p><code>c++
int divide (int x, int y)
{
  return x / y;
}
</code></p>

<p>We need to make sure that divisor is not zero because you cannot divide by zero (at least not with integer arithmetics). There are two ways of doing this. Let’s start from C-style error checking that will make our function look like this:</p>

<p>```c++
int divide (int x, int y, int &amp; result)
{
  if (y == 0)</p>

<pre><code>return -1;
</code></pre>

<p>  result = x / y;
  return 0;
}
```</p>

<p>C++ error checking using exceptions will look something like this:</p>

<p>```c++
int divide (int x, int y)
{</p>

<pre><code>if (y == 0)
    throw std::logic_error (“Division by zero”);
return x / y;
</code></pre>

<p>}
```</p>

<p>The use cases for these two functions will be different. For C-style function, we will always have to check for return code to make sure that operation succeeded:</p>

<p>```c++
void foo (int x, int y)
{</p>

<pre><code>int result;
if (divide (x, y, result) == 0)
{
    // Division was successful. Do something with “result”.
}
else
{
    // Error occurred!
}
</code></pre>

<p>}
```</p>

<p>The C++ use case:</p>

<p>```c++
void foo (int x, int y)
{</p>

<pre><code>try
{
    int result = divide (x, y);
    // Division was successful. Do something with “result”.
}
catch (const std::logic_error &amp;)
{
    // Error occurred!
}
</code></pre>

<p>}
```</p>

<p>C++ way with exceptions is handy when program flow is somewhat more complicated. What if we need to invoke “divide” function two times? In that case we will have to check for error twice using C-style:</p>

<p>```c++
void foo (int x, int y)
{</p>

<pre><code>int result;
if (divide (x, y, result) == 0)
{
    // Division was successful. Do something with “result”.
}
else
{
    // Error occurred!
}

if (divide (y, x, result) == 0)
{
    // Division was successful. Do something with “result”.
}
else
{
    // Error occurred!
}
</code></pre>

<p>}
```</p>

<p>But in C++, one try-catch block will do:</p>

<p>```c++
void foo (int x, int y)
{</p>

<pre><code>try
{
    int result = divide (x, y);
    // Division was successful. Do something with “result”.
    result = divide (x, y);
    // Division was successful. Do something with “result”, again.
}
catch (const std::logic_error &amp;)
{
    // Error occurred!
}
</code></pre>

<p>}
```</p>

<p>Now, imagine that we have to invoke “divide” function ten or hundred times. And to make it even more complex, imagine that we have multiple nested functions and every function needs to check for an error. Using exception now seems to be the ideal way to go. Well, that is what exceptions were designed for — to make things easier.</p>

<h3>Easy vs Fast</h3>

<p>There are a lot of things that will make our lives as developers easier. But sometimes our programs should be fast. And not only fast but fastest in the world, or even the whole universe. And we have to sacrifice the ease of development to achieve that. This is the case with high-frequency trading programs, for example. So if a programmer writing code for high-frequency trading will think that wrapping invocation of “divide” function with “try-catch” block will slow down his application even by a nanosecond in comparison with C-style error checking, he will choose the hardest way and check for error code every time he invokes “divide” function. Indeed, he will spend much more time to achieve his goals, but will that be a right decision?</p>

<h3>Under the hood</h3>

<p>To answer the question above, we need to dive into the implementation details and figure out how exceptions are implemented. From this point, there is a huge difference between C++ and higher-level languages such as Java, C#, Python and others. In C++, there are two methods for handling exceptions at run-time — “setjmp/longjmp” (hereinafter jumping) method and “zero-cost” exception handling.</p>

<p>Jumping method saves the context when entering a frame with an exception handler. Then when an exception is raised, the context can be restored immediately, without the need for tracking stack frames. This method provides very fast exception propagation, but introduces significant overhead for use of exception handlers, even if no exception is raised.</p>

<p>Zero-cost method generates static tables to describe exception ranges. No dynamic code is required when entering a frame containing an exception handler. When an exception is raised, the tables are used to control a back trace of the subprogram invocation stack to locate the required exception handler. This method has considerably poorer performance for the propagation of exceptions, but there is no overhead for exception handlers if no exception is raised.</p>

<p>There is always upside and downside and we have to make a choice. Taking into account that exceptions are not a part of normal execution flow, we need to optimize the most common case when exceptions are not thrown and sacrifice the speed of handling them. So many production-quality C++ compilers made that choice in favor of zero-cost method.</p>

<h3>Digging into the assembler</h3>

<p>So let’s get back to our “divide” function and compare C-style error checking with zero-cost exception handling. C-style error checking:</p>

<p>```c++
int divide (int x, int y, int &amp; result)
{</p>

<pre><code>if (y == 0)
    return -1;
result = x / y;
return 0;
</code></pre>

<p>}</p>

<p>int foo (int &amp; result)
{</p>

<pre><code>volatile int x = 4, y = 28;
int d1, d2;
if (divide (x, y, d1) == -1)
    return -1;
if (divide (y, x, d2) == -1)
    return -1;
result = d1 + d2;
return 0;
</code></pre>

<p>}</p>

<p>int main ()
{</p>

<pre><code>int result;
foo (result);
return result;
</code></pre>

<p>}
```</p>

<p>Code using exceptions:</p>

<p>```c++
int divide (int x, int y)
{</p>

<pre><code>if (y == 0)
    throw std::logic_error ("Division by zero");
return x / y;
</code></pre>

<p>}</p>

<p>int foo ()
{</p>

<pre><code>volatile int x = 4, y = 28;
return divide (x, y) + divide (y, x);
</code></pre>

<p>}</p>

<p>int main ()
{</p>

<pre><code>try
{
    return foo ();
}
catch (const std::exception &amp;)
{
    return -1;
}
</code></pre>

<p>}
```</p>

<p>Here is what will actually happen for C-style example (I removed code that won’t get executed for simplicity):</p>

<p>```
__Z6divideiiRi:
  pushq   %rbp
  movq    %rsp, %rbp
  movl    %edi, -4(%rbp)
  movl    %esi, -8(%rbp)
  movq    %rdx, -16(%rbp)
  cmpl    $0, -8(%rbp)
  jne L2
;; Skipped return of -1. We will always jump to L2
L2:
  movl    -4(%rbp), %eax
  movl    %eax, %edx
  sarl    $31, %edx
  idivl   -8(%rbp)
  movl    %eax, %edx
  movq    -16(%rbp), %rax
  movl    %edx, (%rax)
  movl    $0, %eax
  popq    %rbp
  ret</p>

<p><strong>Z3fooRi:
  pushq   %rbp
  movq    %rsp, %rbp
  subq    $24, %rsp
  movq    %rdi, -24(%rbp)
  movl    $4, -4(%rbp)
  movl    $28, -8(%rbp)
  movl    -8(%rbp), %ecx
  movl    -4(%rbp), %eax
  leaq    -12(%rbp), %rdx
  movl    %ecx, %esi
  movl    %eax, %edi
  call    </strong>Z6divideiiRi
  cmpl    $-1, %eax
  sete    %al
  testb   %al, %al
  je  L5
;; Skipped return of -1, we will always jump to L5.
L5:
  movl    -4(%rbp), %ecx
  movl    -8(%rbp), %eax
  leaq    -16(%rbp), %rdx
  movl    %ecx, %esi
  movl    %eax, %edi
  call    __Z6divideiiRi
  cmpl    $-1, %eax
  sete    %al
  testb   %al, %al
  je  L7
;; Skipped return of -1, always jumping to L7.
L7:
  movl    -12(%rbp), %edx
  movl    -16(%rbp), %eax
  addl    %eax, %edx
  movq    -24(%rbp), %rax
  movl    %edx, (%rax)
  movl    $0, %eax
  leave
  ret</p>

<p>_main:
  pushq   %rbp
  movq    %rsp, %rbp
  subq    $16, %rsp
  leaq    -4(%rbp), %rax
  movq    %rax, %rdi
  call    __Z3fooRi
  movl    -4(%rbp), %eax
  leave
  ret
```</p>

<p>That’s a lot of error checking code that gets executed assuming it doesn’t happen very often! If we need to call “divide” function more, we will have to add more checking for “-1” return result, and assembly listing will get longer and longer because of that check. Let’s see how the code will look like with exception handling:</p>

<p>```
__Z6divideii:
  pushq   %rbp
  movq    %rsp, %rbp
  pushq   %r12
  pushq   %rbx
  subq    $32, %rsp
  movl    %edi, -36(%rbp)
  movl    %esi, -40(%rbp)
  cmpl    $0, -40(%rbp)
  jne L2
;; Skipped the code that allocates and throws exception. We will always jump to L2.
L2:
  movl    -36(%rbp), %eax
  movl    %eax, %edx
  sarl    $31, %edx
  idivl   -40(%rbp)
  addq    $32, %rsp
  popq    %rbx
  popq    %r12
  popq    %rbp
  ret</p>

<p><strong>Z3foov:
  pushq   %rbp
  movq    %rsp, %rbp
  pushq   %rbx
  subq    $24, %rsp
  movl    $4, -20(%rbp)
  movl    $28, -24(%rbp)
  movl    -24(%rbp), %edx
  movl    -20(%rbp), %eax
  movl    %edx, %esi
  movl    %eax, %edi
  call    </strong>Z6divideii
  movl    %eax, %ebx
  movl    -20(%rbp), %edx
  movl    -24(%rbp), %eax
  movl    %edx, %esi
  movl    %eax, %edi
  call    __Z6divideii
  addl    %ebx, %eax
  addq    $24, %rsp
  popq    %rbx
  popq    %rbp
  ret</p>

<p>_main:
  pushq   %rbp
  movq    %rsp, %rbp
  pushq   %rbx
  subq    $24, %rsp
  call    __Z3foov
  movl    %eax, %ebx
  movl    %ebx, %eax
  addq    $24, %rsp
  popq    %rbx
  popq    %rbp
  ret
;; Stack unwinding code is invoked from statically generated exception
;; table. That code is stripped out, will never be reached in our example.
```</p>

<p>That is much better! We managed to avoid two unnecessary checks of return result. Other than that code that is being executed is exactly the same.</p>

<h3>Jumping exceptions</h3>

<p>Now, let’s say we have a compiler that is using “setjmp/longjmp” approach to implement exceptions. Even with that approach, exception handling could be faster than error checking. Consider the following example:</p>

<p>```c++
while (doContinue) {</p>

<pre><code>try {
    doSomeWork ();
}
catch (...) { /* do something about it! */ }
</code></pre>

<p>}
```</p>

<p>… that will be indeed slower than this:</p>

<p>```c++
while (doContinue) {</p>

<pre><code>if (doSomeWork () != 0) {
    /* do something about it! */
}
</code></pre>

<p>}
```</p>

<p>… but how about this:</p>

<p>```c++
while (doContinue) {</p>

<pre><code>try {
    do {
        doSomeWork ();
    } while (doContinue);
    break;
} catch (...) { /* do something about it! */ }
</code></pre>

<p>}
```</p>

<p>In the example above, we set recovery point once and avoid checking return result of the function multiple times. Of course, that is the best-case scenario assuming that exceptional situation almost never happens. But that is a fair assumption. Otherwise that situation should be treated as normal execution flow and handled differently, without exceptions, which will be the same for both C-style and C++-style programmers. Please note that above optimization makes no sense in case with zero-cost exception mechanism.</p>

<h3>Finding out what exception mechanism is being used</h3>

<p>Unfortunately, the only way to find out what underlying mechanism is used by compiler for exception handling is to write a simple program using exceptions, compile it into assembler language and analyze results.</p>

<h3>Other performance considerations</h3>

<p>Using exceptions will make binary size bigger, no matter what mechanism is used to implement exception handling. So if program size is more important than execution speed, exceptions should not be used. And in those cases where you want to gain maximum execution speed with minimal impact on binary size, you have to do additional testing in order to find the best combination of C-style error checking and exception handling code that achieves your result.</p>

<h3>Summary</h3>

<p>Performance can mean many different things — from the speed of execution or size of the binary to the time developer spends writing code.</p>

<p>In this article we have discussed execution speed of an application using exceptions vs. an application using C-style error checking, and developer’s time needed to write the same program using these two approaches.</p>

<p>If binary size of the compiled program is the most important factor then exceptions should not be used.</p>

<p>If execution speed or ease of development (or both!) is the most important factor then programmer deciding to give up the ease of using exceptions in favor of C-style error checking will not only spend much more time writing the code, make the code more complicated, run into the problem of actually describing the error (especially in multi-threaded environment, and especially when thread local storage cannot be used due to handling of exception in different thread in case of asynchronous programming), but will also make it slower.</p>

<h3>References</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Exception_handling">Exception Handling – Wikipedia</a></li>
<li><a href="http://www.boost.org/community/error_handling.html">Error and Exception Handling by Dave Abrahams</a></li>
<li><a href="http://mentorembedded.github.io/cxx-abi/abi-eh.html">Itanium C++ ABI: Exception Handling</a></li>
<li><a href="http://gcc.gnu.org/onlinedocs/gnat_ugn_unw/Exception-Handling-Control.html">GNAT Exception Handling Control</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Predefined Macros]]></title>
    <link href="http://741MHz.com/predefined-macros/"/>
    <updated>2010-10-17T00:00:00-04:00</updated>
    <id>http://741MHz.com/predefined-macros</id>
    <content type="html"><![CDATA[<p>Every C and C++ compiler has several object-like macros that are implicitly defined and can be used  without supplying their definitions on the command line or through including header files. Such macros are called &ldquo;predefined&rdquo; and can help figure out for what architecture you compile for, on what platform, if the source code being compiled is C or C++, and even tell the language standard of the code being used.</p>

<p>All predefined macros are described in GCC online documentation. However, not all of them are guaranteed to be defined. Sometimes it is helpful to see a list of macros defined by the compiler with their values, if any. To do that, run a preprocessor with zero input, using the following command:</p>

<pre><code>cpp -dM &lt;/dev/null
</code></pre>

<p>This will produce the output like this:</p>

<p>```</p>

<h1>define <strong>unix</strong> 1</h1>

<h1>define __x86_64 1</h1>

<h1>define <strong>DBL_MIN_10_EXP</strong> (-307)</h1>

<h1>define <strong>FINITE_MATH_ONLY</strong> 0</h1>

<h1>define <strong>GNUC_PATCHLEVEL</strong> 3</h1>

<p>```</p>

<p>From the above output we can tell that code is being compiled for x86_64 architecture. The output may change depending on the platform and/or compiler settings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wait For File With Inotify]]></title>
    <link href="http://741MHz.com/inotify-wait/"/>
    <updated>2010-09-29T00:00:00-04:00</updated>
    <id>http://741MHz.com/inotify-wait</id>
    <content type="html"><![CDATA[<p>Imagine a situation where you have been asked to create a program that needs user to upload a file. It sounds easy, but there is a little problem. The program needs to wait for the file to appear, and how to do so efficiently might not be immediately obvious. The easiest and perhaps most naive implementation that comes to mind first is to check whether the file exist, wait some time using <a href="http://man7.org/linux/man-pages/man3/sleep.3.html"><code>sleep()</code></a> and repeat this loop if files still does not exist afterwards.</p>

<p>This approach has some problems. It is not clear what time the program needs to sleep. If the interval is too long, a second for example, then user may experience a second long delay. This might be unacceptable. On the other hand, having a sleep interval too short would put an extra load on the entire system — operating system will have to <a href="http://en.wikipedia.org/wiki/Schedule_(computer_science">schedule</a>) this program more frequently, the filesystem access will be performed on each loop cycle, etc. This might slow down other applications running on the same server. Either way there is a problem that cannot be solved without a proper support from operating system that can tell the program when the file is created.</p>

<p><a href="http://en.wikipedia.org/wiki/Linux">Linux</a> has introduced the <a href="http://en.wikipedia.org/wiki/Inotify"><em>inotify</em></a> subsystem that was designed to solve this and similar problems by extending the filesystem with notifications of changes that are reported to the applications. To demonstrate how it works, I wrote a simple C++ that check if the file exists and waits for it if it doesn’t:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>Wait for file using inotify (inotify_wait.cpp)</h3> <a href='/downloads/code/inotify_wait.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/inotify.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">directory</span> <span class="o">=</span> <span class="s">&quot;/tmp&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;test.txt&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">fullpath</span> <span class="o">=</span> <span class="n">directory</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">filename</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">inotify_init</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">watch</span> <span class="o">=</span> <span class="n">inotify_add_watch</span><span class="p">(</span>
</span><span class='line'>        <span class="n">fd</span><span class="p">,</span> <span class="n">directory</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">IN_MODIFY</span> <span class="o">|</span> <span class="n">IN_CREATE</span> <span class="o">|</span> <span class="n">IN_MOVED_TO</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">access</span><span class="p">(</span><span class="n">fullpath</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">F_OK</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;File %s exists.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">fullpath</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span>    <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span> <span class="o">*</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">inotify_event</span><span class="p">)</span> <span class="o">+</span> <span class="mi">16</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">ssize_t</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">bool</span>    <span class="n">is_created</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">is_created</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">length</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="n">inotify_event</span> <span class="o">*</span><span class="n">event</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'>             <span class="n">i</span> <span class="o">+=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">inotify_event</span><span class="p">)</span> <span class="o">+</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">event</span> <span class="o">=</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">inotify_event</span> <span class="o">*&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">filename</span> <span class="o">==</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;The file %s was created.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>                <span class="n">is_created</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">inotify_rm_watch</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">watch</span><span class="p">);</span>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that we subscribe for filesystem notifications before checking if file exists. It is needed to avoid a race condition where file is created exactly after we checked for its existence and before we subscribed for notifications.</p>

<p>A similar approach is used in many applications. For example, <a href="www.bittorrent.com">BitTorrent</a> application can monitor a “Downloads” directory for new torrent files and open them automatically.</p>
]]></content>
  </entry>
  
</feed>
