<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ranting @ 741 MHz]]></title>
  <link href="http://741MHz.com/atom.xml" rel="self"/>
  <link href="http://741MHz.com/"/>
  <updated>2013-12-01T20:57:02-05:00</updated>
  <id>http://741MHz.com/</id>
  <author>
    <name><![CDATA[741MHz.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use free and delete correctly.]]></title>
    <link href="http://741MHz.com/free-delete/"/>
    <updated>2013-03-13T00:00:00-04:00</updated>
    <id>http://741MHz.com/free-delete</id>
    <content type="html"><![CDATA[<p>The Internet is full of programming jokes <a href="http://bash.org/?946461">like this one</a>:</p>

<blockquote><p>&lt;@joosa> how do you say float in java? just 1.5f?<br/>
&lt;@Gliptic> FloatFactoryFactory.getInstance (FloatFactoryFactory.defaultInstanceDescriptionString).getFactory (Locale.getLocale (“en-US”)).createBuilder ().setString (“1.5″).getResult ()</p></blockquote>

<p>Java people please read on, that’s only a joke! More often than not the jokes are directed at those using higher-level programming languages. This is a little unfair because C programmers (and C++ ones for that matter) write some funny code, too. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">ptr</span><span class="p">)</span>
</span><span class='line'>        <span class="n">free</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This perhaps could be a joke or maybe even an interview question. What’s wrong with the above C code (assuming everything else including the usage is correct)? It turns out that many can’t spot anything. If you do — congratulations! For those who don’t, let’s read the <a href="http://man7.org/linux/man-pages/man3/free.3.html">documentation of <code>free()</code> function</a>:</p>

<blockquote><p>The free() function frees the memory space pointed to by ptr, which must have been returned by a previous call to malloc(), calloc() or realloc(). Otherwise, or if free(ptr) has already been called before, undefined behavior occurs. If ptr is NULL, no operation is performed.</p></blockquote>

<p>In other words, there is no need to check if pointer is not NULL. The same applies to C++ programmers who often check for <strike><code>NULL</code></strike> <code>nullptr</code> before calling <code>delete</code>. If you don’t trust manual pages, check out §7.20.3/2 of the C standard that states the following:</p>

<blockquote><p>The free function causes the space pointed to by ptr to be deallocated, that is, made available for further allocation. If ptr is a null pointer, no action occurs. Otherwise, if the argument does not match a pointer earlier returned by the calloc, malloc, or realloc function, or if the space has been deallocated by a call to free or realloc, the behavior is undefined.</p></blockquote>

<p>For C++, see §5.3.5/2:</p>

<blockquote><p>… if the value of the operand of delete is the null pointer the operation has no effect.</p></blockquote>

<p>Possibly, an extra checking for NULL was a necessity some 20 years ago, according to some Internet rumors claiming that a few implementations of the standard C library had a bug back then and free() could crash the program when passed a NULL pointer. I couldn’t find any information about what it was. But no matter what was going on two decades ago — it is pretty hard to find pre-ANSI C code these days. Yet unnecessary NULL checking can be seen a lot. For example, <a href="http://krugle.org/">krugle.org</a> shows the following three projects right away:</p>

<ul>
<li><a href="http://opensearch.krugle.org/document/view_filecontent/apache_http_server1945779753/scmi_filer2-scmi.ofc.krugle.net_8799/scmi_305/tags/1.3/djg_nspr_split/src/regex/regfree.c">Apache Web Server</a></li>
<li><a href="http://opensearch.krugle.org/document/view_filecontent/apache_hadoop618243895/scmi_filer2-scmi.ofc.krugle.net_8799/scmi_528/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/getGroup.c">Apache Hadoop</a></li>
<li><a href="http://opensearch.krugle.org/document/view_filecontent/miranda1067994304/scmi_filer2-scmi.ofc.krugle.net_8799/scmi_705/miranda/protocols/Gadu-Gadu/ownerinfo.c">Miranda</a> (an ICQ client popular in ex-USSR countries)</li>
</ul>


<p>I thought that maybe people are worrying about performance too much and don’t want to do an extra function call (extra cycles, procedure linkage tables, etc). But then using <code>malloc()</code> and <code>free()</code> in performance critical path would have been even more silly.</p>

<p>So is it paranoia, a failure to read documentation, or maybe a thoughtless copy-paste that went too far?</p>

<p>Who knows.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux, HID and PyUSB]]></title>
    <link href="http://741MHz.com/pyusb/"/>
    <updated>2013-03-04T00:00:00-05:00</updated>
    <id>http://741MHz.com/pyusb</id>
    <content type="html"><![CDATA[<p>Today I was going through some stuff in my desk’s locker and ran into this nice toy — a big red electronic panic button. It has been there for years but I never had a chance to use it because a company making those does not have a driver for OS X, and of course I couldn’t find one for Linux either. But pushing a big red button is always fun and this time I have decided to try and make it work. So I brought it home with me into my “lab” to see what I can do.</p>

<p>After plugging it into a USB port, it immediately showed up in a list of USB devices (which you can see with lsusb tool). My Linux box has identified it as a Dream Cheeky Stress/Panic Button:</p>

<pre><code>Bus 007 Device 010: ID 04f3:04a0 Elan Microelectronics Corp. Dream Cheeky Stress/Panic Button
</code></pre>

<p>Meanwhile, the kernel has also logged a message saying that it has found a new USB device. So the magic button seemed somewhat operational and I already knew two important things about it — a vendor and a product IDs. They were <code>0x04f3</code> and <code>0x04a0</code> respectively.</p>

<h2>Writing a USB driver</h2>

<p>The only little detail missing was actually a driver. I tried to <a href="https://duckduckgo.com/">Duck Duck Go</a> it real quick but nothing showed up, and I decided to write it myself. How hard can it be, after all?</p>

<h2>Reverse Engineering</h2>

<p>In order to write a device driver, one must know what the device is doing. Obviously, I didn’t have any specification, neither I wanted to deal with Elan Microelectronics support department. So the only way to figure it out was reverse engineering. Luckily, Linux has <a href="https://www.kernel.org/doc/Documentation/usb/usbmon.txt"><em>usbmon</em></a> — a facility in the kernel that is used to collect traces of I/O on the USB bus. After a quick pick at its documentation, I loaded the module using <code>modprobe usbmon</code> command and the device showed up in <code>/sys/kernel/debug/usb/devices</code>. Since it was attached to bus #7, I traced the I/O by reading the <code>/sys/kernel/debug/usb/usbmon/7u</code> file and pushing my panic button a few times to see if anything shows up. And every time I hit the button, the device was sending the following data to the host:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ffff8801b2efc9c0 1873321198 C Ii:7:010:1 0:8 8 = 02000000 00000000
</span><span class='line'>ffff8801b2efc9c0 1873457204 C Ii:7:010:1 0:8 8 = 06000000 00000000
</span><span class='line'>ffff8801b2efc9c0 1873633203 C Ii:7:010:1 0:8 8 = 06001300 00000000
</span><span class='line'>ffff8801b2efc9c0 1873801206 C Ii:7:010:1 0:8 8 = 06000000 00000000
</span><span class='line'>ffff8801b2efc9c0 1873977211 C Ii:7:010:1 0:8 8 = 02000000 00000000</span></code></pre></td></tr></table></div></figure>


<p>Not only this proved that button itself works, it also uncovered a pattern — the device was sending <code>02000000</code> and <code>06000000</code> twice with <code>06001300</code> in between. So <code>06001300</code> seemed like a good indication of the button being pressed.</p>

<h2>Linux Kernel USB Driver</h2>

<p>The next step was to write a USB Device Driver for Linux. I dealt with PCI Express, DMA and Ethernet network drivers, but never wrote a single USB driver before. So I pulled my copy of the Linux Device Drivers book off the shelf and opened it on Chapter 13 “USB Drivers”. I have to say I got surprised — that rant is about 100 pages long. I would of course suck it up, enjoy the reading and proceed to hacking. If only it was something serious. And what I had was a simple USB button that did nothing but sending two 32-bit integers, 0x06 and 0x13, every time it gets hit. Going through the hundred pages just to read 64-bit of data off the USB cable, on Monday night, after a hard 10 hours working day… Ain’t nobody got time for that?</p>

<h2>PyUSB</h2>

<p>A bit disappointed, I tried to find an easier way and once against ducked for a few keywords like “USB”, “driver”, “read”, “HID” and so on…</p>

<blockquote><p>Ask and it will be given to you; seek and you will find; knock and the door will be opened to you.
— Matthew 7:7</p></blockquote>

<p>Turned out, it is possible to write a USB driver in just a few lines of Python. Sir <a href="http://www.micahcarrick.com/">Micah Carrick</a> have managed to make a driver for his credit card reader and wrote about his experience in <a href="http://www.micahcarrick.com/credit-card-reader-pyusb.html">this nice article</a>. Following in his footsteps, I quickly glanced at <a href="http://sourceforge.net/apps/trac/pyusb/">PyUSB</a> that he was using in his work, read a few other examples, and came up with a driver for my magic button. This is truly the shortest and simplest device driver that I have made in my life:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">usb.core</span>
</span><span class='line'>
</span><span class='line'><span class="n">dev</span> <span class="o">=</span> <span class="n">usb</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">idVendor</span><span class="o">=</span><span class="mh">0x04f3</span><span class="p">,</span> <span class="n">idProduct</span><span class="o">=</span><span class="mh">0x04a0</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">dev</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s">&quot;No Panic button found in the system&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">dev</span><span class="o">.</span><span class="n">is_kernel_driver_active</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="ow">is</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">dev</span><span class="o">.</span><span class="n">detach_kernel_driver</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="n">usb</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">USBError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s">&quot;Kernel driver won&#39;t give up control over device: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">dev</span><span class="o">.</span><span class="n">set_configuration</span><span class="p">()</span>
</span><span class='line'>    <span class="n">dev</span><span class="o">.</span><span class="n">reset</span><span class="p">()</span>
</span><span class='line'><span class="k">except</span> <span class="n">usb</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">USBError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s">&quot;Cannot set configuration the device: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">endpoint</span> <span class="o">=</span> <span class="n">dev</span><span class="p">[</span><span class="mi">0</span><span class="p">][(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">dev</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">endpoint</span><span class="o">.</span><span class="n">bEndpointAddress</span><span class="p">,</span> <span class="n">endpoint</span><span class="o">.</span><span class="n">wMaxPacketSize</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">timeout</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">data</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">6</span> <span class="ow">and</span> <span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="mi">19</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># Panic button was pressed!</span>
</span><span class='line'>                <span class="k">print</span> <span class="s">&quot;OH MY GOD! OH MY GOD! DOUBLE RAINBOW!!!&quot;</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">usb</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">USBError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">errno</span> <span class="o">!=</span> <span class="mi">110</span><span class="p">:</span> <span class="c"># 110 is a timeout.</span>
</span><span class='line'>            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s">&quot;Error readin data: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now I have my beautiful toy working!</p>

<h2>UPDATE</h2>

<p><a href="https://twitter.com/pdp7">Drew Fustini</a> have hooked this up to the BeagleBone Next-Gen and made this video:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/52b5RGd4yrE "></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic Resource Management in Programming Languages]]></title>
    <link href="http://741MHz.com/raii/"/>
    <updated>2013-02-27T00:00:00-05:00</updated>
    <id>http://741MHz.com/raii</id>
    <content type="html"><![CDATA[<p>Many high-level programming languages provide software developers with the ability to automatically cleanup resources — automatically closing an open file when it is no longer used, freeing dynamically allocated memory, or anything else for that matter. This article touches on automatic resource management features available in modern programming languages. It shows some examples demonstrating why having this feature make it easier to write code, or how not using this feature may lead to potentially critical failures of the program. The primary focus is on C++ and C (surprise!) languages.</p>

<h2>C</h2>

<p>There are a few ways to automatically clean up resources in C# — a <code>finally</code> block and a <code>using</code> statement.</p>

<p>A <code>finally</code> block is a bit lower level than a using. It guarantees that all statements inside a <code>finally</code> block will be executed when the try block exists, even if unexpected exception occurs. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">ResourceType</span> <span class="n">resource</span> <span class="p">=</span> <span class="n">expression</span><span class="p">;</span> <span class="c1">// Allocate, initialize or acquire some resource.</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Do something with it.</span>
</span><span class='line'>    <span class="n">statement</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Free, destroy or release a resource.</span>
</span><span class='line'>    <span class="c1">// This is guaranteed to happen.</span>
</span><span class='line'>    <span class="p">((</span><span class="n">IDisposable</span><span class="p">)</span><span class="n">resource</span><span class="p">).</span><span class="n">Dispose</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another and more convenient way of doing the same is to employ a <code>using</code> statement which guarantees that <code>Dispose()</code> method is called automatically upon leaving the scope of using block:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">using</span> <span class="p">(</span><span class="n">ResourceType</span> <span class="n">resource</span> <span class="p">=</span> <span class="n">expression</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">statement</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Java</h2>

<p>Java also provides a finally block similar to that seen in C#:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FileReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&quot;/dev/null&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// Do something with a file...</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">reader</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>    <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Starting from version 7 Java introduces an AutoCloseable concept along with automatic resource cleanup, which are basically the same things as IDisposable and a using statement in C#:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">(</span><span class="n">FileReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&quot;/dev/null&quot;</span><span class="o">))</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="c1">// Do something with a file...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Other Languages</h2>

<p>Since the concept of something being done automatically is quite popular, it is present in many other languages. Python has both a <a href="http://docs.python.org/2/reference/compound_stmts.html#finally"><code>finally</code> statement</a> and a <a href="http://docs.python.org/release/2.5.3/ref/with.html"><code>with</code> statement</a>. The same goes for Ruby. Of course, this is also available in derivative languages like Visual Basic that is built on top of .NET technology, Groovy that is built on Java, etc.</p>

<h2>C++ — The King of RAII</h2>

<p>As we have seen, many languages provide different syntax to do essentially the same thing. It is a great concept indeed. It changed the way programmers write code, significantly improved productivity. And behind every invention that we cannot imagine our lives without there is an author. So who is behind the automatic resource management?</p>

<p>The real name of this concept is <strong>Resource Acquisition Is Initialization</strong>, or simply <strong>RAII</strong>. It was invented by Bjarne Stroustrup, the original author of C++ programming language. And of course this concept first appeared in C++, way before C# or Java were created.</p>

<p>C++ is the king of RAII. Many concepts are built upon it. RAII is the reason why object destructors are called automatically. It is the reason why C++ developers don’t need to care much about freeing dynamically allocated memory or close a file descriptor that is no longer used. It is why, when handling an error, it is enough to simply throw an exception, or return an error code from a function, without writing tons of “cleanup” code or even thinking about the order in which resources must be cleaned up (which is usually done in opposite order of allocation). In fact, RAII should be used whenever possible to avoid serious errors or even cause a denial of service. For example, consider the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;mutex&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Data structure that is supposed to be accessed by multiple threads.</span>
</span><span class='line'><span class="k">struct</span> <span class="n">shared_resource</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">mutex</span>       <span class="n">mutex</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">foo</span><span class="p">(</span><span class="n">shared_resource</span> <span class="o">&amp;</span> <span class="n">res</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Acquire an exclusive lock to protect access to</span>
</span><span class='line'>    <span class="c1">// the object in multi-threaded environment.</span>
</span><span class='line'>    <span class="n">res</span><span class="p">.</span><span class="n">mutex</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Modify the contents of the vector by adding 10 integers into it.</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Once done changing the object, release the lock so that other threads</span>
</span><span class='line'>    <span class="c1">// can work with it. If we forget to unlock it, the process will basically</span>
</span><span class='line'>    <span class="c1">// hang trying to lock the mutex again, rendering our program useless.</span>
</span><span class='line'>    <span class="n">res</span><span class="p">.</span><span class="n">mutex</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code is a classic example of an error that could lead to serious consequences. The problem is that anything could happen in between of <code>mutex.lock()</code> and <code>mutex.unlock()</code> statements, and the <code>mutex.unlock()</code> statement may not be executed shall <code>data.emplace_back()</code> throw an exception, leaving the program in the locked-up state.</p>

<p>Taking a good care of exceptions is a concept called <strong>exception safety</strong>. The above code is indeed not exception safe. However, this is not only about exceptions. For instance, if <code>emplace_back()</code> method was not throwing an exception and return code was used to signal an error, the erroneous code could have looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">foo</span><span class="p">(</span><span class="n">shared_resource</span> <span class="o">&amp;</span> <span class="n">res</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">res</span><span class="p">.</span><span class="n">mutex</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">res</span><span class="p">.</span><span class="n">mutex</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exception safety is out of the equation, yet the code is buggy. This is why RAII should (almost) always be used. The correct code should look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">foo</span><span class="p">(</span><span class="n">shared_resource</span> <span class="o">&amp;</span> <span class="n">res</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example, <a href="http://en.cppreference.com/w/cpp/thread/lock_guard"><code>std::lock_guard</code></a> object is locking a mutex in its constructor and unlocks it in its destructor. Thanks to RAII, the destructor is guaranteed to be called when the object goes out of scope no matter what. C++ is full of such “guard” objects. Many of them are part of the standard library, but developers can always create their own.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;cctype&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">file</span><span class="p">(</span><span class="s">&quot;test.txt&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">((</span><span class="n">file</span> <span class="o">&gt;&gt;</span> <span class="n">c</span><span class="p">))</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">isalpha</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">?</span> <span class="n">c</span> <span class="o">:</span> <span class="sc">&#39;*&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example, the file object will automatically close the file. In other words, C++ clearly wins this battle over RAII with all other languages since there is no need for any finally blocks, using statements or event Java’s new <code>try()</code> blocks.</p>

<p>What is interesting is that C#, Java, Python and other similar languages did not even have “using”-like statements for a long time. There was only <em>try-catch-finally</em> construct and programmers had no choice but to write a lot of boilerplate code. Albeit some programmers have consciously suffered from the lack of proper RAII support, many didn’t know that C++ not only supports RAII but also is the only language that does it properly. One day those guys wanted to write something in C++ and of course started to look for similar self-torture methods. Not able to find it, they asked Bjarne Stroustrup why doesn’t C++ provide a <code>finally</code> construct, and <a href="http://www.stroustrup.com/bs_faq2.html#finally">here is what he had to say</a>:</p>

<blockquote><p>Because C++ supports an alternative that is almost always better: The “resource acquisition is initialization” technique (TC++PL3 section 14.4). The basic idea is to represent a resource by a local object, so that the local object’s destructor will release the resource. That way, the programmer cannot forget to release the resource.
…
In a system, we need a “resource handle” class for each resource. However, we don’t have to have an “finally” clause for each acquisition of a resource. In realistic systems, there are far more resource acquisitions than kinds of resources, so the “resource acquisition is initialization” technique leads to less code than use of a “finally” construct.</p></blockquote>

<p>Boy was he right. Most today’s languages are now trying to resemble the same.</p>

<h2>RAII in C</h2>

<p>Everyone knows that C neither support exceptions nor it has a concept of RAII. That is not entirely true, but for the most part it is. You will not find anything about those features in C89, C99 or even C11 language standard specifications. Therefore, C developers have to be careful, disciplined, and clean up after themselves. Oftentimes, especially in somewhat low-level code like device driver, we can run into the code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">pci_probe</span><span class="p">(</span><span class="k">struct</span> <span class="n">pci_dev</span> <span class="o">*</span><span class="n">pci_dev</span><span class="p">,</span>
</span><span class='line'>                     <span class="k">const</span> <span class="k">struct</span> <span class="n">pci_device_id</span> <span class="o">*</span><span class="n">dev_id</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">my_dev</span> <span class="o">*</span><span class="n">dev</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dev</span> <span class="o">=</span> <span class="n">kzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">my_dev</span><span class="p">),</span> <span class="n">GFP_KERNEL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">dev</span><span class="p">))</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">on_err</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pci_set_drvdata</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">,</span> <span class="n">dev</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dev</span><span class="o">-&gt;</span><span class="n">pci_dev</span> <span class="o">=</span> <span class="n">pci_dev</span><span class="p">;</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">pci_enable_device</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">r</span><span class="p">))</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">on_enable_err</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pci_set_master</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pci_try_set_mwi</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dev</span><span class="o">-&gt;</span><span class="n">bar0</span> <span class="o">=</span> <span class="n">ioremap_nocache</span><span class="p">(</span><span class="n">pci_resource_start</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
</span><span class='line'>                                <span class="n">pci_resource_len</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">bar0</span><span class="p">))</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">on_bar0_map_err</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dev</span><span class="o">-&gt;</span><span class="n">bar2</span> <span class="o">=</span> <span class="n">ioremap_nocache</span><span class="p">(</span><span class="n">pci_resource_start</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>                                <span class="n">pci_resource_len</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">bar2</span><span class="p">))</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">on_bar2_map_err</span><span class="p">;</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">a2gx_add_cdev</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">on_cdev_err</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">on_cdev_err:</span>
</span><span class='line'>    <span class="n">iounmap</span><span class="p">(</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">bar2</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">on_bar2_map_err:</span>
</span><span class='line'>    <span class="n">iounmap</span><span class="p">(</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">bar0</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">on_bar0_map_err:</span>
</span><span class='line'>    <span class="n">pci_disable_device</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">on_enable_err:</span>
</span><span class='line'>    <span class="n">kfree</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">on_err:</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Many will find the above code difficult to read, hard to write, or both. Some would love to punch the author in the face for using goto. Others may not understand what is going on in there at all. But C is not just a programming language. C is a religion. For some, C code is a lot cleaner than anything else — nothing is hiding behind the scenes, what you see is what you get. The C code is usually thought trough — you have to think twice before you write it. In fact, some wouldn’t substitute it for anything else. At any rate, C developers usually cleanup after themselves.</p>

<p>On the other hand, the benefits or RAII are also obvious and there are people who would love to see a concept of RAII in C. But it is not a part of the language specification. However, imagine a world when programmers were not using things that are not standard. That world would have been terrible. Just imagine for a second that C++ developers wouldn’t have multi-threaded programs until C++11 standard was ratified with all of its quirks and perks like <code>std::thread</code>, <code>std::mutex</code>, <em>thread local storage</em> and so on.</p>

<p>Or how about not being able to specify symbol’s visibility or use other attributes? Luckily, being a non-standard feature doesn’t restrain people from using it. And as more people use some feature, more chances it has to be standardized. That said, C++11 now allows for generalized yet compiler-specific attributes, threading, static assertions, and tons of other stuff that was available before, was used before, too, but wasn’t a part of the standard. Well, now it is.</p>

<p>That being said, C also supports RAII. However, it is not part of the standard, at least not yet. Here is how it works — it is possible to specify a cleanup function for any auto function scope variable. In order to do that, a non-standard cleanup attribute must be specified. If you remember the example of a buggy non-exception-safe C++ function that uses a <em>mutex</em>, that code would look something like this in C:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">shared_resource</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pthread_mutex_t</span>   <span class="n">mutex</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">int_vector</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">shared_resource</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pthread_mutex_t</span>   <span class="n">mutex</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">int_vector</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">int_vector_push_back</span><span class="p">(</span><span class="k">struct</span> <span class="n">int_vector</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">foo</span><span class="p">(</span><span class="k">struct</span> <span class="n">shared_resource</span> <span class="o">*</span><span class="n">res</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="cm">/* Oops, cannot lock the mutex. */</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">int_vector_push_back</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* Oops, cannot add data into the vector! */</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* All is good */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Though it is a little bit hard to imagine that C programmer could write code like that. The code would probably look more like this (which is also functionally correct this time):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">test</span><span class="p">(</span><span class="k">struct</span> <span class="n">shared_resource</span> <span class="o">*</span><span class="n">res</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="n">int_vector_push_back</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">out:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below is a RAII-like version of the code where mutex is guaranteed to be unlocked automatically, so it is possible to simply return from the function at any given point without worrying about it. This code closely resembles the behavior of a C++ example using <code>std::lock_guard</code> where <code>lock_guard_ctor</code> mimics <code>std::lock_guard::lock_guard</code> constructor that locks a <em>mutex</em>, and the <code>lock_guard_dtor</code> function is like <code>std::lock_guard::~lock_guard</code> destructor that unlocks the <em>mutex</em> (if it was locked) and is guaranteed to be called automatically:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="nf">lock_guard_ctor</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="n">mutex</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">mutex</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">lock_guard_dtor</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">**</span><span class="n">mutex_ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span> <span class="o">=</span> <span class="o">*</span><span class="n">mutex_ptr</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mutex</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">foo</span><span class="p">(</span><span class="k">struct</span> <span class="n">shared_resource</span> <span class="o">*</span><span class="n">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">lock_guard</span>
</span><span class='line'>        <span class="n">__attribute__</span><span class="p">((</span><span class="n">cleanup</span><span class="p">(</span><span class="n">lock_guard_dtor</span><span class="p">)))</span>
</span><span class='line'>        <span class="o">=</span> <span class="n">lock_guard_ctor</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">lock_guard</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">int_vector_push_back</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code can also be simplified a bit with two simple steps. Step one is to have <code>lock_guard_ctor</code> and <code>lock_guard_dtor</code> functions defined somewhere else and be reusable. Because nobody writes custom constructors and destructor for a class every time they use it. Step number two is to get rid of a lot of typing by having a macro. For example, the common code that is written once could be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="nf">lock_guard_ctor</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="nf">lock_guard_dtor</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">**</span><span class="n">mutex_ptr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define LOCK_GUARD(name, mutex)                   \</span>
</span><span class='line'><span class="cp">    pthread_mutex_t * name                        \</span>
</span><span class='line'><span class="cp">        __attribute__((cleanup(lock_guard_dtor))) \</span>
</span><span class='line'><span class="cp">        = lock_guard_ctor((mutex))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the code using this feature becomes a lot simpler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">foo</span><span class="p">(</span><span class="k">struct</span> <span class="n">shared_resource</span> <span class="o">*</span><span class="n">res</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">LOCK_GUARD</span><span class="p">(</span><span class="n">lock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">int_vector_push_back</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are two possible ways for a compiler to implement a cleanup attribute. If exceptions are not enabled, it would generate the boilerplate code similar to that otherwise written by the programmer manually. If exceptions are enabled then compiler would generate the code that executes a cleanup function during the stack unwinding (yes, there are exceptions in C, too).</p>

<p>Note that cleanup attribute cannot be used for global variables. constructor and destructor attributes should be used instead. The constructor attribute causes the function to be called automatically before execution enters <code>main()</code>. Similarly, the destructor attribute causes the function to be called automatically after <code>main()</code> completes or <code>exit()</code> is called. Functions with these attributes are useful for initializing data that is used implicitly during the execution of the program. It is also possible to manually control the order of execution by specifying priority number (optional).</p>

<p>The techniques described above are available at least in today’s leading C compilers — GCC and Clang. Remember, the future of the language is in hands of its users. If you really like the feature and it is not standard — use it, spread the world, write a feedback to compiler developers and language standard committee. It will definitely help to make it into the next standard revision.</p>

<p>Let the force be with you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++11 Final Override]]></title>
    <link href="http://741MHz.com/final-override/"/>
    <updated>2013-02-27T00:00:00-05:00</updated>
    <id>http://741MHz.com/final-override</id>
    <content type="html"><![CDATA[<h2>Preface</h2>

<p>The alternative name for this article is “How to protect yourself from others when it comes to polymorphism.” That is pretty much the primary purpose of two brand new C++ keywords introduced in C++11 — the <code>override</code> and <code>final</code>.</p>

<p>Those who have at least some experience in team-based C++ development must be aware of at least one of many pitfalls of polymorphism and virtual methods in particular. Let’s go over some of real-world problems that could easily force developers to run a debugger or read the code over and over again trying to figure out why the program is not working as expected.</p>

<h2>A Missing Virtual Function</h2>

<p>This could happen to anyone — there was a base class with a virtual function and developer has decided to overload it for a good reason. Everything was fine and the program worked as expected. But one day after, a fresh build simply stopped working, and the reason is not obvious. After spending some time debugging the program, it turned out that a function that should have been called does not appear to be called at all. What could be wrong?</p>

<p>Consider the following code where the Foo class is written by one developer while Bar was written by someone else and could even be part of another project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">do_very_important_stuff</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Foo</span><span class="o">::</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'>        <span class="n">do_some_more_important_stuff</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few years later a new developer joins the company and accidentally removes a virtual keyword from the <code>init()</code> method’s declaration of class <em>Foo</em>. How that could even happen, you may ask? Maybe he was learning Emacs and executed a <em>replace-regexp</em> command without noticing all of the changes. Or maybe he just read the <em>Code Refactoring</em> book and decided to improve the code but couldn’t check all of the usages of class <em>Foo</em> because they were in a different repository that he didn’t have access to. Who knows? Things happen. As a result, the <code>Bar::init()</code> is no longer called because it does no longer override its base method. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;memory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Foo</span><span class="o">::</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The code is working!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="n">foo</span><span class="p">(</span><span class="k">new</span> <span class="n">Bar</span><span class="p">());</span>
</span><span class='line'>    <span class="n">foo</span><span class="o">-&gt;</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above program will not print an expected “The code is working!” line and someone would definitely waste some time trying to figure out why, especially if the project has a few million lines of code.</p>

<h2>A Million Dollars Typo</h2>

<p>Typos can also cause a lot of troubles. For example, developers can misspell the name of the method when overriding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;memory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">doSomeVeryImportantWork</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">doSomeVeryInportantWork</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The code is working!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="n">foo</span><span class="p">(</span><span class="k">new</span> <span class="n">Bar</span><span class="p">());</span>
</span><span class='line'>    <span class="n">foo</span><span class="o">-&gt;</span><span class="n">doSomeVeryImportantWork</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above program prints nothing despite the expectations and the reason is not immediately obvious.</p>

<h2>Signature Changes</h2>

<p>Signature change is another seemingly innocent change that may potentially waste a log of valuable time when not accounted for properly. For example, the base class’s <code>init()</code> function is changed from this:</p>

<pre><code>virtual void init() { }
</code></pre>

<p>… to this:</p>

<pre><code>virtual void init(int x = 0) {
}
</code></pre>

<p>The whole project still compiles just fine. Yet the program doesn’t work as expected anymore.</p>

<p>It’s also possible to accidentally override someone’s virtual function, etc. The list of such gotchas can go on and on. For those who can relate to this — you must know that you are not alone! C++ developers including myself have dealt with this and similar problems for the past few decades.</p>

<p>Luckily, since introduction of the C++11 the sun is shining on our side of the fence!</p>

<h2>We Override!</h2>

<p>Instead of using (or not using) a <code>virtual</code> keyword and assuming the base class has the method being overridden, we can now use the brand new <code>override</code> keyword. The compiler will then make sure that a method declared with that keyword really overrides the base method. And if that turns out to be not the case, the code won’t compile and the error would be caught during compilation, which is a lot better than debugging. The following is the new version of the first example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="n">override</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Foo</span><span class="o">::</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The code is working!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compilation fails if the base class`s init() method is no longer there:</p>

<pre><code>error: ‘int Bar::init()’ marked override, but does not override
</code></pre>

<h2>It’s Final!</h2>

<p>The second keyword is <code>final</code>. It is a little bit less useful but is still a good self-defense mechanism against unintended usage and/or code changes.</p>

<p>What it means is that a method marked as final is not only virtual and must override its base but that nobody else can further override it. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;memory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="o">~</span><span class="n">Bar</span><span class="p">()</span> <span class="n">override</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="n">final</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Foo</span><span class="o">::</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;This code works!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="n">foo</span><span class="p">(</span><span class="k">new</span> <span class="n">Bar</span><span class="p">());</span>
</span><span class='line'>    <span class="n">foo</span><span class="o">-&gt;</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code is sound and secure. But if somebody else would try to write a class like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">BetterBar</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Bar</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">BetterBar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="o">~</span><span class="n">BetterBar</span><span class="p">()</span> <span class="n">override</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="n">override</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Bar</span><span class="o">::</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Even better init() function!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>… a compiler would tell them that they are wrong by issuing an error: </p>

<pre><code>error: virtual function ‘virtual int BetterBar::init()’
error: overriding final function ‘virtual int Bar::init()’
</code></pre>

<p>The <code>final</code> keyword can also be applied to the whole class in order to prevent further derivation from it. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="n">final</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Bar</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>If anyone tries to inherit from Bar, the compiler issues an error: </p>

<pre><code>error: cannot derive from ‘final’ base ‘Bar’ in derived type ‘BetterBar’
</code></pre>

<p>What is interesting is that almost the same effect can be achieved in a less obvious way by applying the <code>final</code> keyword to a virtual destructor of either base (which is not the same as <code>final</code> in this case because it introduces a virtual table) or any derived class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span> <span class="c1">// You cannot derive from me!</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Foo</span><span class="p">()</span> <span class="n">final</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Template containers from the standard C++ library might be good candidates to be marked with a final keyword, as it is generally not a good idea to derive from them in almost every case.</p>

<h2>Conclusion</h2>

<p>C++11 introduces two important keywords in relation to polymorphism and inheritance — the <code>override</code> and <code>final</code>. Using those keywords should become a habit of any C++ developer. It is worth using every time except when writing a base class. This will make the code clear, maintainable, and potentially save hours that would have been otherwise wasted chasing an error in debugger.</p>

<h2>References</h2>

<ul>
<li><a href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2009/n2928.htm">N2928</a> &ndash; Explicit Virtual Overrides</li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm">N3206</a> &ndash; Override control: Eliminating Attributes</li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm">N3272</a> &ndash; Follow-up on override control</li>
<li><a href="http://clang.llvm.org/cxx_status.html">Clang C++11 Status Report</a></li>
<li><a href="http://gcc.gnu.org/projects/cxx0x.html">GCC C++11 Status Report</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Not To Write a Signal Handler]]></title>
    <link href="http://741MHz.com/signal-handler/"/>
    <updated>2013-01-15T00:00:00-05:00</updated>
    <id>http://741MHz.com/signal-handler</id>
    <content type="html"><![CDATA[<p>Back in the day, I was reading a book about UNIX® programming and have learned how to write a signal handler. It was a long time ago and I don’t remember the book, but to this day the way described in that book is something that shows up in Google’s top results when you search for “How to write a signal handler”. Here it is — a simple, elegant solution to the world’s toughest problem:</p>

<figure class='code'><figcaption><span>A simple, elegant solution to the world’s toughest problem.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">my_sig_handler</span><span class="p">(</span><span class="kt">int</span> <span class="n">signum</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Received interrupt signal!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">signal</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">my_sig_handler</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Doing useful stuff...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="cm">/* Sleep is not only useful, it is essential! */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now imagine for a second that instead of a simple invocation of <code>sleep()</code> in the body of the <code>main()</code> function, just after the <code>printf()</code>, there was some very important code running a life support system and someone’s life was really dependent on that. What would have happened? Someone would not have been alive for long — that’s for sure. And the terrible signal handling is to blame and here is why…</p>

<h2>You Have Been Warned</h2>

<p>Let’s take a quick look at Linux® manual page for a <code>signal()</code> call. You can find by typing <code>man 2 signal</code> in the command line, or by checking it out online, here — <a href="http://man7.org/linux/man-pages/man2/signal.2.html">http://man7.org/linux/man-pages/man2/signal.2.html</a>. The first sentence in the manual page introduces you to the <code>signal()</code> call. The second sentence, now in bold, warns you, and I quote:</p>

<blockquote><p>Avoid its use: use sigaction(2) instead.</p></blockquote>

<h2>Your Computer Might Take a Trip to a Grocery Store</h2>

<p>Continuing reading the manual page, the very first note under the NOTES section is this:</p>

<blockquote><p>The effects of signal() in a multithreaded process are unspecified.</p></blockquote>

<p>This is called <a href="http://en.wikipedia.org/wiki/Unspecified_behavior">Unspecified Behavior</a>. What it means is that standard does not say anything as for how the function should behave in a multi-threaded environment. Therefore, it may exhibit a different behavior on different systems including different versions of the same system, at discretion of those who implement it. Your mileage may vary.</p>

<p>Even if your code does not explicitly use multiple threads, you are still in danger — it might be used as part of a bigger program in multi-threaded environment. But even if that’s not that case — hey, tomorrow you might want to do that. Do you really want to screw yourself upfront by using this bad <code>signal()</code> function? Think twice.</p>

<h2>Asynchronicity &amp; Reentrancy</h2>

<p>Signals are asynchronous by their nature. Another signal may be delivered to the process while the previous signal is still being “processed”. Therefore, signal handler must not introduce unwanted side effects, must be fully reentrant and cannot use any non-reentrant code — neither explicitly nor implicitly. Now take a quick look at the famous example mentioned at the beginning — there is a nice <code>printf()</code> right in the signal handler code. This is a life threatening piece of code because <code>printf()</code> is non-reentrant. In other words, it is possible that <code>printf()</code> function will get interrupted before it finishes and get called again as part of another signal handler. If that case the program will simply <a href="http://en.wikipedia.org/wiki/Deadlock">deadlock</a>.</p>

<h2>Async-Signal-Safe Functions</h2>

<p>The section 7 of the manual page about signal (which you can see by typing <code>man 7 signal</code> in your terminal or read online here — <a href="http://man7.org/linux/man-pages/man7/signal.7.html">http://man7.org/linux/man-pages/man7/signal.7.html</a>) states the following:</p>

<blockquote><p><strong>Async-signal-safe functions</strong>
A signal handler function must be very careful, since processing elsewhere may be interrupted at some arbitrary point in the execution of the program. POSIX has the concept of “safe function”. If a signal interrupts the execution of an unsafe function, and handler calls an unsafe function, then the behavior of the program is undefined.</p></blockquote>

<p>And then it lists all async-signal-safe functions. So if you don’t know what functions are safe to use inside a signal handler and what functions are not — refer to that list and make sure you are not doing anything dangerous.</p>

<h2>Better Safe Than Sorry</h2>

<p>What is the best way not to become a drag addict? Not to take drugs in the first place. What is the best way to write a safe signal handler? Not to write it all. OK, I am just kidding. Seriously though — if you really want your signal handler to be safe and portable, consider not doing anything inside it except modifying a global <a href="http://en.wikipedia.org/wiki/Volatile_variable">volatile</a> variable of <a href="http://en.cppreference.com/w/cpp/utility/program/sig_atomic_t"><code>sig_atomic_t</code></a> type. Taking all of the above into account, below is an example of how a safe signal handler may look like in real life (note the absence of <code>signal()</code> function in the code):</p>

<figure class='code'><figcaption><span>Simple and safe signal handling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">volatile</span> <span class="n">sig_atomic_t</span> <span class="n">got_signal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">my_sig_handler</span><span class="p">(</span><span class="kt">int</span> <span class="n">signo</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">got_signal</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sigaction</span> <span class="n">sa</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sigaction</span><span class="p">));</span>
</span><span class='line'>    <span class="n">sa</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">my_sig_handler</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sigaction</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">perror</span><span class="p">(</span><span class="s">&quot;sigaction&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">got_signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">got_signal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Received interrupt signal!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Doing useful stuff...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="cm">/* Sleep is not only useful, it is essential! */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Modern Signal Handling</h2>

<p>It is the 2013th year in the Common Era at the moment of this writing and you might think that people should have came up with something better in terms of signal handling at this time. The truth is that they did. It is just not that well known yet due to a huge momentum of outdated information still overflowing the Internet.</p>

<h3>FreeBSD, NetBSD, OS X, iOS…</h3>

<p>In the above family of operating systems, the modern way of handling signals is to use <a href="http://en.wikipedia.org/wiki/Kqueue">Kqueue</a> — a scalable event notification mechanism. Here is an example:</p>

<figure class='code'><figcaption><span>Kqueue Signal Handling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/event.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">kq</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">kevent</span> <span class="n">ke</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">timespec</span> <span class="n">timeout</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sigaction</span> <span class="n">sa</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Block the signal we want to process with kevent first.</span>
</span><span class='line'><span class="cm">       This is needed because kevent has lower precedence. */</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sigaction</span><span class="p">));</span>
</span><span class='line'>    <span class="n">sa</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="n">SIG_IGN</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sigaction</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Create kqueue... */</span>
</span><span class='line'>    <span class="n">kq</span> <span class="o">=</span> <span class="n">kqueue</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">kq</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/* Add a signal event */</span>
</span><span class='line'>    <span class="n">EV_SET</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ke</span><span class="p">,</span> <span class="n">SIGINT</span><span class="p">,</span> <span class="n">EVFILT_SIGNAL</span><span class="p">,</span> <span class="n">EV_ADD</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">kevent</span><span class="p">(</span><span class="n">kq</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ke</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/* Set a timeout (we no longer need to use a blocking sleep(1),</span>
</span><span class='line'><span class="cm">       and this is great! */</span>
</span><span class='line'>    <span class="n">timeout</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="cm">/* To sleep for one second */</span>
</span><span class='line'>    <span class="n">timeout</span><span class="p">.</span><span class="n">tv_nsec</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Dispatch events */</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="n">kevent</span><span class="p">(</span><span class="n">kq</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ke</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">timeout</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* Got event(s) to dispatch. Note that we can do whatever the hell</span>
</span><span class='line'><span class="cm">               we want here because we are __not__ in the signal handler. */</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">ke</span><span class="p">.</span><span class="n">ident</span> <span class="o">==</span> <span class="n">SIGINT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Received interrupt signal!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* Timeout elapsed */</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Doing useful stuff...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EINTR</span><span class="p">)</span>
</span><span class='line'>                <span class="k">continue</span><span class="p">;</span> <span class="cm">/* System call interrupted - just restart */</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span> <span class="cm">/* Something went wrong. */</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Linux</h3>

<p>Linux provides <code>signalfd()</code> for handling signals. The beauty of it is that it may be used by itself, or may be combined with event notification mechanisms such as <code>epoll()</code> and friends. The manual page for <code>signalfd()</code> comes with a good example, so I don’t even have to write one. Here it is:</p>

<figure class='code'><figcaption><span>Signalfd & Epoll Signal Handling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;sys/signalfd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define handle_error(msg)                               \</span>
</span><span class='line'><span class="cp">    do { perror(msg); exit(EXIT_FAILURE); } while (0)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">sigset_t</span> <span class="n">mask</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sfd</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">signalfd_siginfo</span> <span class="n">fdsi</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ssize_t</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sigemptyset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mask</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sigaddset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mask</span><span class="p">,</span> <span class="n">SIGINT</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sigaddset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mask</span><span class="p">,</span> <span class="n">SIGQUIT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Block signals so that they aren&#39;t handled</span>
</span><span class='line'><span class="cm">       according to their default dispositions */</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sigprocmask</span><span class="p">(</span><span class="n">SIG_BLOCK</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mask</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">handle_error</span><span class="p">(</span><span class="s">&quot;sigprocmask&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sfd</span> <span class="o">=</span> <span class="n">signalfd</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mask</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sfd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">handle_error</span><span class="p">(</span><span class="s">&quot;signalfd&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">sfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">fdsi</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">signalfd_siginfo</span><span class="p">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">!=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">signalfd_siginfo</span><span class="p">))</span>
</span><span class='line'>            <span class="n">handle_error</span><span class="p">(</span><span class="s">&quot;read&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">fdsi</span><span class="p">.</span><span class="n">ssi_signo</span> <span class="o">==</span> <span class="n">SIGINT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Got SIGINT</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">fdsi</span><span class="p">.</span><span class="n">ssi_signo</span> <span class="o">==</span> <span class="n">SIGQUIT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Got SIGQUIT</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_SUCCESS</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Read unexpected signal</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Make the world a better place!</h2>

<p>Please make the world a better place by writing correct and safe signal handling code.</p>

<p>Thank you very much for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erasing Vector The Smart Way]]></title>
    <link href="http://741MHz.com/vector-erase/"/>
    <updated>2013-01-14T00:00:00-05:00</updated>
    <id>http://741MHz.com/vector-erase</id>
    <content type="html"><![CDATA[<p>In the C++ world, <a href="http://en.cppreference.com/w/cpp/container/vector"><code>std::vector</code></a> is a <a href="http://en.wikipedia.org/wiki/Sequence_container_(C%2B%2B">sequence container</a>) that encapsulates <a href="http://en.wikipedia.org/wiki/Dynamic_array">dynamic size arrays</a>. One of the main perks of the vector is the fact that elements are stored <strong>contiguously</strong>. In other words, a pointer to an element of a vector may be passed to any function that expects a pointer to an element of array. Or simply put — <code>std::vector</code> is very close to a <a href="http://www.cplusplus.com/doc/tutorial/arrays/">plain old-school C-style array</a>, yet it provides developers with a lot of C++ perks like automatic memory management, bounds checking and more. Unfortunately, <code>std::vector</code> is so great that many developers are using it without really thinking too much about the underlying implementation and its downsides.</p>

<h2>Erase Trap</h2>

<p>A common programming task is to remove one or more elements from the vector. Luckily, <code>std::vector</code> provides a wonderful method called <code>erase()</code> that does exactly that. So what’s the big deal? It’s a trap!</p>

<p>C++ is just like medicine — it is both a cure and a disease. Vector is no exception. Its contiguous memory layout may heal, or it may kill. In this case it is a serial killer. Let’s see why.</p>

<h2>The Innocent Piece of Code</h2>

<p>Let’s take a look at the real-world example that I ran into a few days ago. The goal was to remove all even numbers from a vector, leaving only odd ones. Here is how it was implemented:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">array</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">it</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">it</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">it</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="o">++</span><span class="n">it</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Logically thinking, the code is very sound — every element is being checked and removed only if it matches a given criteria. Developer even took extra care not to access invalidated iterator. Sounds like a great job. Nice, simple, and it works. Or does it?</p>

<h2>The Problem</h2>

<p>No, it does not. There is one big problem with that code that makes it totally useless. It takes about 55 seconds to run on just one million random elements. Why does that happen, you may ask? The developer  fell into a common trap! That happened because the elements of the vector are stored contiguously, in a contiguous memory and the whole vector is shifted left every time an element is erased. In other words — one does not simply erase an element that is not at the end of the vector.</p>

<h2>The Solution</h2>

<p>Here is the right way of doing this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">array</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">remove_if</span><span class="p">(</span>
</span><span class='line'>      <span class="n">array</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">array</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">v</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="n">array</span><span class="p">.</span><span class="n">end</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code does the job in only 5 milliseconds. That is about eleven thousand times faster. What kind of sorcery is that? Very simple — <a href="http://en.cppreference.com/w/cpp/algorithm/remove"><code>std::remove_if()</code></a> does not erase elements from the vector. It does’t remove anything either. Just a good naming joke. So what the hell it does? It re-arranges elements in such a way that elements to be erased are moved towards the end of a vector. Once the job is done, all elements are erased from the vector with a single invocation of <code>erase()</code>. As a result, the whole vector is not shifted tens of thousands of times and runs a lot faster.</p>

<h2>The Conclusion</h2>

<p>There ain’t no such thing as a free lunch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Switch Statement Down to Machine Code]]></title>
    <link href="http://741MHz.com/switch/"/>
    <updated>2013-01-13T00:00:00-05:00</updated>
    <id>http://741MHz.com/switch</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Most of us know what a <a href="http://en.wikipedia.org/wiki/Switch_statement"><em>switch</em> statement</a> is and have probably been using it very often. No wonder why — switch statement is simple yet extremely expressive. It allows keeping the code compact while describing complex <a href="http://en.wikipedia.org/wiki/Control_flow">control flow</a>. Putting the <a href="http://en.wikipedia.org/wiki/Syntactic_sugar">syntactic sugar</a> aside, most developers also believe that using a switch statement results in a lot better, faster code. Not many knows if that is really true and why. The most common speculations supporting superior switch statement performance are:</p>

<ul>
<li>Compilers implement switch as a <a href="http://en.wikipedia.org/wiki/Branch_table">jump table</a> and it is faster than an average number of conditional branches that the code would have taken otherwise. Therefore, the code generated from switch expressions is executed faster than if-then-else.</li>
<li>Compilers generate a <a href="http://en.wikipedia.org/wiki/Binary_search_algorithm">binary lookup</a> table to match the input value when using switch statement. The binary search algorithm’s worst performance is O(log n). It is a faster than O(n) worst case performance of a <a href="http://en.wikipedia.org/wiki/Linear_search">linear search</a>. Therefore, switch is faster.</li>
</ul>


<p>It all sounds good in theory. Yet not many understand switch statements down to the machine code level and even less have checked what their compilers do. By the way, why cannot a compiler optimize an if-then-else code the same way it optimizes a switch? Maybe it can? Let’s find out!</p>

<p>We’ll use the two most popular production quality compilers — GCC (version 4.7.2, released 20 Sep 2012) and Clang (version 3.0, released December 01, 2011).</p>

<p>In both cases, we will be compiling the code for Intel® Xeon® <a href="http://ark.intel.com/products/47924/Intel-Xeon-Processor-E5630-12M-Cache-2_53-GHz-5_86-GTs-Intel-QPI">E5630</a> CPU with enabled compiler optimizations (either «-O2», «-O3» or «-Os»).</p>

<p>The knowledge of <a href="http://en.wikipedia.org/wiki/X86-64">x86_64</a> <a href="http://en.wikipedia.org/wiki/Assembly_language">assembly language</a> is not required but some understanding of what it is and how CPU process low-level instructions might be helpful.</p>

<h2>Simple Switch</h2>

<p>Let’s start by looking at a very simple switch statement. It has six case labels, does not have a default case, and has no fall-trough cases so each case is followed by a break statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;zero</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;one</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;two</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;three</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;four</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;five</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It would be logical to assume that the above code would be translated into a jump table. To verify this assumption, we need to disassemble the binary generated by the compiler and check how the machine code looks like.</p>

<p>Below is a disassembly of the binary generated by GCC compiler. Each line has a comment on the right that starts with <code>;</code> character:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mf">4004f</span><span class="mi">7</span><span class="o">:</span>       <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>                    <span class="p">;</span> <span class="n">Compare</span> <span class="n">the</span> <span class="n">value</span> <span class="n">with</span> <span class="mf">5.</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">a:</span>       <span class="n">ja</span>     <span class="mi">400518</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x38</span><span class="o">&gt;</span>         <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span> <span class="k">if</span> <span class="n">the</span> <span class="n">value</span> <span class="n">is</span> <span class="n">greater</span> <span class="n">than</span> <span class="mf">5.</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">c:</span>       <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>                    <span class="p">;</span> <span class="n">Clear</span> <span class="mi">32</span> <span class="n">to</span> <span class="mi">63</span> <span class="n">bits</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">e:</span>       <span class="n">xchg</span>   <span class="n">ax</span><span class="p">,</span><span class="n">ax</span>                      <span class="p">;</span> <span class="n">NOP</span>
</span><span class='line'><span class="mi">400500</span><span class="o">:</span>       <span class="n">jmp</span>    <span class="n">QWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rax</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="mh">0x400738</span><span class="p">]</span> <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">address</span> <span class="mh">0x400738</span><span class="p">[</span><span class="o">%</span><span class="n">rax</span><span class="p">]</span>
</span><span class='line'><span class="mi">400507</span><span class="o">:</span>       <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x40072c</span>               <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;five&quot;</span> <span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">40050</span><span class="nl">c:</span>       <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">400511</span><span class="o">:</span>       <span class="n">nop</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="mh">0x0</span><span class="p">]</span>        <span class="p">;</span> <span class="n">NOP</span>
</span><span class='line'><span class="mi">400518</span><span class="o">:</span>       <span class="n">xor</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>                    <span class="p">;</span> <span class="n">Zero</span> <span class="k">return</span> <span class="n">code</span><span class="p">.</span>
</span><span class='line'><span class="mi">40051</span><span class="nl">a:</span>       <span class="n">add</span>    <span class="n">rsp</span><span class="p">,</span><span class="mh">0x8</span>                    <span class="p">;</span> <span class="n">Pop</span> <span class="n">stack</span> <span class="p">(</span><span class="n">stack</span> <span class="n">grows</span> <span class="n">inward</span><span class="p">).</span>
</span><span class='line'><span class="mi">40051</span><span class="nl">e:</span>       <span class="n">ret</span>                               <span class="p">;</span> <span class="n">Return</span> <span class="n">from</span> <span class="n">the</span> <span class="n">main</span><span class="p">()</span> <span class="n">function</span><span class="p">.</span>
</span><span class='line'><span class="mf">40051f</span><span class="o">:</span>       <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400727</span>               <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;four&quot;</span> <span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">400524</span><span class="o">:</span>       <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">400529</span><span class="o">:</span>       <span class="n">jmp</span>    <span class="mi">400518</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x38</span><span class="o">&gt;</span>         <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">40052</span><span class="nl">b:</span>       <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400714</span>               <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;three&quot;</span> <span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">400530</span><span class="o">:</span>       <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">400535</span><span class="o">:</span>       <span class="n">jmp</span>    <span class="mi">400518</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x38</span><span class="o">&gt;</span>         <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400537</span><span class="o">:</span>       <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400719</span>               <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;two&quot;</span> <span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">40053</span><span class="nl">c:</span>       <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">400541</span><span class="o">:</span>       <span class="n">jmp</span>    <span class="mi">400518</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x38</span><span class="o">&gt;</span>         <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400543</span><span class="o">:</span>       <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x40071d</span>               <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;one&quot;</span> <span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">400548</span><span class="o">:</span>       <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">40054</span><span class="nl">d:</span>       <span class="n">nop</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rax</span><span class="p">]</span>            <span class="p">;</span> <span class="n">NOP</span>
</span><span class='line'><span class="mi">400550</span><span class="o">:</span>       <span class="n">jmp</span>    <span class="mi">400518</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x38</span><span class="o">&gt;</span>         <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400552</span><span class="o">:</span>       <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400721</span>               <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;zero&quot;</span> <span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">400557</span><span class="o">:</span>       <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">40055</span><span class="nl">c:</span>       <span class="n">jmp</span>    <span class="mi">400518</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x38</span><span class="o">&gt;</span>         <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">40055</span><span class="nl">e:</span>       <span class="n">xchg</span>   <span class="n">ax</span><span class="p">,</span><span class="n">ax</span>                      <span class="p">;</span> <span class="n">Unreachable</span> <span class="n">NOP</span> <span class="p">(</span><span class="n">padding</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, GCC has generated the code that uses an indirect jump transferring execution of the program to a code location depending on the input value using a combination of cmp and ja instructions. This is a simple case of a jump table.</p>

<p>To see what other compilers might do, let’s look at the disassembly of the same program compiler by Clang:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mi">4005</span><span class="nl">a7:</span> <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>                     <span class="p">;</span> <span class="n">Compare</span> <span class="n">the</span> <span class="n">value</span> <span class="n">with</span> <span class="mf">5.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">aa:</span> <span class="n">ja</span>     <span class="mf">4005e2</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x52</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span> <span class="k">if</span> <span class="n">value</span> <span class="n">is</span> <span class="o">&gt;</span> <span class="mf">5.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ac:</span> <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>                     <span class="p">;</span> <span class="n">Convert</span> <span class="mi">32</span><span class="o">-</span><span class="n">bit</span> <span class="n">to</span> <span class="mi">64</span><span class="o">-</span><span class="n">bit</span> <span class="p">(</span><span class="n">clear</span> <span class="n">upper</span> <span class="n">half</span><span class="p">).</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ae:</span> <span class="n">jmp</span>    <span class="n">QWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rax</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="mh">0x4006e0</span><span class="p">]</span>  <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">a</span> <span class="n">relative</span> <span class="n">address</span> <span class="k">using</span> <span class="o">%</span><span class="n">rax</span> <span class="n">as</span> <span class="n">the</span> <span class="n">index</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">b5:</span> <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400710</span>                <span class="p">;</span> <span class="n">Push</span> <span class="s">&quot;zero&quot;</span> <span class="n">as</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ba:</span> <span class="n">jmp</span>    <span class="mi">4005</span><span class="n">dd</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4d</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">print</span> <span class="o">&amp;</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">bc:</span> <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400715</span>                <span class="p">;</span> <span class="n">Push</span> <span class="s">&quot;one&quot;</span> <span class="n">as</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">c1:</span> <span class="n">jmp</span>    <span class="mi">4005</span><span class="n">dd</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4d</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">print</span> <span class="o">&amp;</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">c3:</span> <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400719</span>                <span class="p">;</span> <span class="n">Push</span> <span class="s">&quot;two&quot;</span> <span class="n">as</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">c8:</span> <span class="n">jmp</span>    <span class="mi">4005</span><span class="n">dd</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4d</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">print</span> <span class="o">&amp;</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ca:</span> <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x40071d</span>                <span class="p">;</span> <span class="n">Push</span> <span class="s">&quot;three&quot;</span> <span class="n">as</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">cf:</span> <span class="n">jmp</span>    <span class="mi">4005</span><span class="n">dd</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4d</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">print</span> <span class="o">&amp;</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">d1:</span> <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400723</span>                <span class="p">;</span> <span class="n">Push</span> <span class="s">&quot;four&quot;</span> <span class="n">as</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">d6:</span> <span class="n">jmp</span>    <span class="mi">4005</span><span class="n">dd</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4d</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">print</span> <span class="o">&amp;</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">d8:</span> <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400728</span>                <span class="p">;</span> <span class="n">Push</span> <span class="s">&quot;five&quot;</span> <span class="n">as</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">dd:</span> <span class="n">call</span>   <span class="mi">400450</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>           <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span> <span class="p">(</span><span class="n">printing</span> <span class="n">point</span><span class="p">).</span>
</span><span class='line'><span class="mf">4005e2</span><span class="o">:</span> <span class="n">xor</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>                     <span class="p">;</span> <span class="n">Zero</span> <span class="k">return</span> <span class="p">(</span><span class="n">exit</span> <span class="n">point</span><span class="p">).</span>
</span><span class='line'><span class="mf">4005e4</span><span class="o">:</span> <span class="n">pop</span>    <span class="n">rbp</span>                         <span class="p">;</span> <span class="n">Pop</span> <span class="n">stack</span> <span class="n">frame</span><span class="p">.</span>
</span><span class='line'><span class="mf">4005e5</span><span class="o">:</span> <span class="n">ret</span>                                <span class="p">;</span> <span class="n">Return</span>
</span><span class='line'><span class="mf">4005e6</span><span class="o">:</span> <span class="n">nop</span>    <span class="n">WORD</span> <span class="n">PTR</span> <span class="nl">cs:</span><span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">rax</span><span class="o">*</span><span class="mi">1</span><span class="o">+</span><span class="mh">0x0</span><span class="p">]</span> <span class="p">;</span> <span class="n">NOP</span> <span class="p">(</span><span class="n">alignment</span><span class="o">/</span><span class="n">padding</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>From the above example, we can immediately tell that Clang has generated a more compact code by avoiding multiple calls to puts() function.</p>

<p>Interestingly enough, GCC can also eliminate multiple calls to puts() function and generate exactly the same code for the above switch statement as Clang does. To achieve this, we must specify «-Os» flag on the command line. This flags instructs the compiler to optimize the binary for small size.</p>

<p>Apart from this small difference in optimizing function calls, both compilers used a combination of cmp and ja functions to implement a jump table. From this we can draw a conclusion that for simple cases compilers do generate a jump table.</p>

<h2>Crafting a Jump Table</h2>

<p>To get a better understanding of a jump table mechanics, let’s consider creating one manually without using a switch statement. It is possible to create a jump table manually a few different ways.</p>

<p>The first way of writing a jump table is to use an assembler language. It is low level programming language that does not have high-level constructs such as if-then-else or switch, but it allows to use processor instructions directly, making it possible to manually employ “cmp”, “ja” or other instructions to implement a functional equivalent of the code generated by compilers. This would have been very time consuming, require much higher understanding of the assembly language, result in less portable and hard to maintain code.</p>

<p>It is also possible to code a logical equivalent of a jump table in C, without using a switch statement. To do this, we could create an array that holds function pointers, and then call a function using an index to this array. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">zero</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;zero&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">one</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;one&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">two</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;two&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">table</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">zero</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">one</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">two</span> <span class="p">};</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/* Read the value of `i` from user</span>
</span><span class='line'><span class="cm">       input or other source */</span>
</span><span class='line'>    <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">]();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This, however, would only be a logical equivalent of the jump table, but not a functional one. The main difference in functionality is that jump table transfers control to a specified location directly instead of calling a function.
To achieve a functional equivalent of the jump table in C or C++, we must structure the code in such a way as to avoid function calls. We must create an array of addresses where the control is to be transferred, instead of array of functions. One of the possible ways of doing this is to label our code and create an array that store labels instead of functions. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">jump_table</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="o">&amp;&amp;</span><span class="n">print_0</span><span class="p">,</span> <span class="o">&amp;&amp;</span><span class="n">print_1</span><span class="p">,</span> <span class="o">&amp;&amp;</span><span class="n">print_2</span><span class="p">,</span>
</span><span class='line'>                <span class="o">&amp;&amp;</span><span class="n">print_3</span><span class="p">,</span> <span class="o">&amp;&amp;</span><span class="n">print_4</span><span class="p">,</span> <span class="o">&amp;&amp;</span><span class="n">print_5</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>        <span class="n">v</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">v</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>                <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>        <span class="k">goto</span> <span class="o">*</span><span class="n">jump_table</span><span class="p">[</span><span class="n">v</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nl">print_0:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;zero</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="nl">print_1:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;one</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="nl">print_2:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;two</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="nl">print_3:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;three</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="nl">print_4:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;four</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="nl">print_5:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;five</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'><span class="nl">out:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code would result in exactly the same binary as produced by GCC for a simple switch statement example we have reviewed in the first chapter. It cannot be considered readable or easily maintainable, but it could have been used for performance reasons if C or C++ language did not have a switch statement construct.</p>

<p>Note that despite being used by low-level developers from time to time, the above code is not standard. It is neither standard C nor C++ is none of those languages support taking address of a label. Despite that, this feature is implemented as a nonstandard extension by most production grade C and C++ compilers.</p>

<h2>Trivial Switch</h2>

<p>Modern processors employ a wide variety of optimization techniques to speed up the execution of computer programs. One of those techniques is branch prediction. It tries to guess which way a branch of the logic will go before this is known for sure. In a high-level programming languages such as C, branches are formed by if-then-else structures, goto instructions, different kinds of loop statements, switch statement and other constructs.</p>

<p>How processors implement branch prediction is largely a trade secret. It is well known, however, that this technique is less efficient if processor runs into indirect branch instruction, such as that used in jump tables code. In other words, a single indirect jump instruction is relatively more expensive than a simple branch, such as generated by if-then construct.</p>

<p>This means that for some architectures, it is possible that a simple if-then-else statement with a few comparisons and direct jump instructions might theoretically execute faster than a single indirect jump instruction. In other words, if compilers always generate a jump table for a switch statement, then we could write a more efficient code (from execution time perspective) by avoiding using a switch and resorting to if-then-else.</p>

<p>The cost ratio of compare and jump instructions to indirect jump instruction is not known without experimentation. How much if-then-else branches can we take before its execution time would be slower than that of a single indirect jump? It is also not clear whether compilers take care of this or not. To find out, we must experiment. Since our initial switch statement had six case labels, we must keep reducing the number of labels, disassemble the resulting binary on every stage and compare the results to see if the generated code is functionally different.</p>

<h3>Five Cases</h3>

<p>The first step is to remove a single label from the switch, effectively reducing a number of case labels to five. By doing so, nothing has changed regarding how compilers handle switch statement in case with both GCC and Clang compilers.</p>

<h3>Four Cases</h3>

<p>Reducing a number of cases further results in some interesting changes. With only four cases in a switch, Clang continues to generate a jump table as in all previous cases. GCC, on the other hand, stops using a jump table and resorts to simple comparison equivalent to if-then-else. Below is a disassembled binary demonstrating what GCC does in this case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mf">4004f</span><span class="mi">4</span><span class="o">:</span>  <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x1</span>             <span class="p">;</span> <span class="n">Compare</span> <span class="n">value</span> <span class="n">with</span> <span class="mf">1.</span>
</span><span class='line'><span class="mf">4004f</span><span class="mi">7</span><span class="o">:</span>  <span class="n">je</span>     <span class="mi">400514</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x34</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">If</span> <span class="n">value</span> <span class="n">is</span> <span class="mi">1</span><span class="p">,</span> <span class="n">go</span> <span class="n">there</span>
</span><span class='line'><span class="mf">4004f</span><span class="mi">9</span><span class="o">:</span>  <span class="n">jg</span>     <span class="mi">400501</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x21</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">If</span> <span class="n">value</span> <span class="n">is</span> <span class="n">greater</span> <span class="n">than</span> <span class="mi">1</span><span class="p">,</span> <span class="n">compare</span> <span class="n">more</span><span class="p">.</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">b:</span>  <span class="n">test</span>   <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>             <span class="p">;</span> <span class="n">Could</span> <span class="n">be</span> <span class="o">&lt;=</span> <span class="mf">0.</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mf">0.</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">d:</span>  <span class="n">je</span>     <span class="mi">40050</span><span class="n">d</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x2d</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Go</span> <span class="n">ptint</span> <span class="s">&quot;zero&quot;</span> <span class="k">if</span> <span class="n">matched</span> <span class="n">or</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">exit</span>
</span><span class='line'><span class="mf">4004ff</span><span class="o">:</span>  <span class="n">jmp</span>    <span class="mi">40052</span><span class="n">c</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4c</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span> <span class="p">(</span><span class="n">value</span> <span class="n">was</span> <span class="n">not</span> <span class="n">zero</span><span class="p">)</span>
</span><span class='line'><span class="mi">400501</span><span class="o">:</span>  <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x2</span>             <span class="p">;</span> <span class="n">Value</span> <span class="n">was</span> <span class="o">&gt;</span> <span class="mf">1.</span> <span class="n">Compare</span> <span class="n">it</span> <span class="n">with</span> <span class="mf">2.</span>
</span><span class='line'><span class="mi">400504</span><span class="o">:</span>  <span class="n">je</span>     <span class="mi">40051</span><span class="n">b</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x3b</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Matched</span><span class="p">,</span> <span class="n">go</span> <span class="n">print</span> <span class="n">and</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400506</span><span class="o">:</span>  <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x3</span>             <span class="p">;</span> <span class="n">Was</span> <span class="o">!=</span> <span class="mf">2.</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mf">3.</span>
</span><span class='line'><span class="mi">400509</span><span class="o">:</span>  <span class="n">jne</span>    <span class="mi">40052</span><span class="n">c</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4c</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">exit</span> <span class="k">if</span> <span class="n">not</span> <span class="n">matched</span><span class="p">.</span>
</span><span class='line'><span class="mi">40050</span><span class="nl">b:</span>  <span class="n">jmp</span>    <span class="mi">400522</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x42</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Value</span> <span class="n">is</span> <span class="n">three</span><span class="o">!!!</span> <span class="n">Go</span> <span class="n">print</span> <span class="n">it</span><span class="p">.</span>
</span><span class='line'><span class="mi">40050</span><span class="nl">d:</span>  <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x4006e4</span>        <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;zero&quot;</span> <span class="n">as</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">400512</span><span class="o">:</span>  <span class="n">jmp</span>    <span class="mi">400527</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x47</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Go</span> <span class="n">call</span> <span class="s">&quot;puts()&quot;</span> <span class="n">and</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400514</span><span class="o">:</span>  <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x4006e9</span>        <span class="p">;</span> <span class="n">End</span> <span class="n">up</span> <span class="n">here</span> <span class="k">if</span> <span class="n">value</span> <span class="n">is</span> <span class="mf">1.</span>
</span><span class='line'><span class="mi">400519</span><span class="o">:</span>  <span class="n">jmp</span>    <span class="mi">400527</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x47</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Go</span> <span class="n">call</span> <span class="s">&quot;puts()&quot;</span> <span class="n">and</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">40051</span><span class="nl">b:</span>  <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x4006ed</span>        <span class="p">;</span> <span class="n">Value</span> <span class="n">was</span> <span class="mf">2.</span> <span class="n">Set</span><span class="p">...</span>
</span><span class='line'><span class="mi">400520</span><span class="o">:</span>  <span class="n">jmp</span>    <span class="mi">400527</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x47</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="p">...</span> <span class="s">&quot;two&quot;</span> <span class="n">as</span> <span class="n">parameter</span> <span class="n">and</span> <span class="n">go</span> <span class="n">print</span><span class="p">.</span>
</span><span class='line'><span class="mi">400522</span><span class="o">:</span>  <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x4006f1</span>        <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;three&quot;</span> <span class="n">as</span> <span class="n">argument</span> <span class="n">to</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">400527</span><span class="o">:</span>  <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>   <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">40052</span><span class="nl">c:</span>  <span class="n">xor</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>             <span class="p">;</span> <span class="n">Zero</span> <span class="k">register</span> <span class="n">with</span> <span class="k">return</span> <span class="n">value</span><span class="p">.</span>
</span><span class='line'><span class="mi">40052</span><span class="nl">e:</span>  <span class="n">pop</span>    <span class="n">rdx</span>                 <span class="p">;</span> <span class="n">Pop</span> <span class="n">stack</span>
</span><span class='line'><span class="mf">40052f</span><span class="o">:</span>  <span class="n">ret</span>                        <span class="p">;</span> <span class="n">Return</span> <span class="n">control</span> <span class="n">to</span> <span class="n">the</span> <span class="n">caller</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, there is no longer an indirect jump. Instead, the input is compared with every possible value using a set of compare and jump instructions.</p>

<h3>Three and Less Cases</h3>

<p>With only three cases in a switch, Clang starts generating the same code as GCC does starting at four — comparison instructions are used instead of a jump table.
By reducing a number of cases further down to one, the same result is observed with both compilers.</p>

<h3>Note on GCC</h3>

<p>GCC compiler allows users to control the cutoff between doing switch statements as a series of if-then-else statements and using a jump table since version 4.7. The threshold controlling this behavior can be specified as a command line option.</p>

<h3>Conclusion</h3>

<p>From the above experiments, we can conclude that both GCC and Clang compilers are well aware that indirect jumps are relatively expensive.</p>

<p>Both compilers are trying to avoid a jump table if the number of case labels in the switch is small enough to justify using a chain of compare and jump instructions.</p>

<p>The only difference between the two compilers is they use a different cost ratio when deciding on using a jump table. GCC drops the idea of jump table starting at 4 case labels down to 1. Clang drops the jump table approach at 3 swithc cases and below.</p>

<p>This of course is purely an implementation detail and can change from one platform to another, or between different versions of the compiler.</p>

<h2>Default Case</h2>

<p>Does having a switch statement with a default case affect the mechanism used to implement a switch statement in machine code?</p>

<p>Unlike hardware description languages like Verilog where there could be no default case in a switch, the software logic always has a default case that transfers a control flow further. It might be explicitly specified with a special default case label, or be implicitly generated by a compiler.</p>

<p>Therefore, the presence or absence of an explicit default case does not make a difference. The only case when not specifying a default case explicitly is beneficial is when switch is performed on enumeration. In that case, compiler may warn a programmer if switch does not handle all possible values of enumeration. This is strictly a static analysis feature that is helpful to developers but does not affect compiler’s decision about the implementation mechanism of a switch statement in any way.</p>

<h2>Large Values</h2>

<p>Not all switch cases have their values starting at 0. Some may have them start at one, two or even a million. Since jump tables are essentially represented as arrays, and all arrays in both C and C++ languages start with 0. We certainly cannot create an array of 101 elements only to have the last entry at index 100 to hold a valid jump address. So how does having large values in the switch affect the generated code?</p>

<h3>Continuous Range</h3>

<p>Let’s first take a look at a very simple example where all case values of a switch are continues:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1986000</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;zero</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1986001</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;one</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1986002</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;two</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1986003</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;three</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1986004</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;four</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1986005</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;five</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the minimum value in the switch is 198,600,000. Some programmers think that, because compiler build a jump table from case values and the input to a switch statement might be used as an index to a jump table, having large values will not work and result in less efficient code. So what they are trying to help the compiler optimize the code by writing it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">rand</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1986000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;zero</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;one</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;two</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;three</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;four</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;five</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In other words, they subtract N from input value to make the resulting range start from 0. Is this a good optimization?</p>

<p>Both GCC and Clang are production grade compilers. It is extremely rare to run into a situation where programmer needs to optimize such a simple case manually, unless programmer knows something that compiler cannot possibly guess from context. Therefore, it would be logical to assume that both GCC and Clang should handle the above optimization automatically. To verify this, below is a disassembled binary code generated by GCC from the code without a manual optimization:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mf">4004f</span><span class="mi">2</span><span class="o">:</span>       <span class="n">call</span>   <span class="mi">4004</span><span class="n">d0</span> <span class="o">&lt;</span><span class="n">rand</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span> <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;rand()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mf">4004f</span><span class="mi">7</span><span class="o">:</span>       <span class="n">sub</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x1e4dd0</span>      <span class="p">;</span> <span class="n">Subtract</span> <span class="s">&quot;1986000&quot;</span> <span class="n">from</span> <span class="n">the</span> <span class="n">result</span><span class="p">.</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">c:</span>       <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>           <span class="p">;</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mi">5</span> <span class="n">and</span> <span class="k">do</span> <span class="n">the</span> <span class="n">rest</span> <span class="n">as</span> <span class="n">before</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code generated by the Clang looks exactly the same:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mi">4005</span><span class="nl">a2:</span>       <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">rand</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span> <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;rand()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">a7:</span>       <span class="n">add</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0xffe1b230</span>    <span class="p">;</span> <span class="n">Add</span> <span class="s">&quot;4292981296&quot;</span> <span class="n">to</span> <span class="n">the</span> <span class="n">result</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ac:</span>       <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>           <span class="p">;</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mi">5</span> <span class="n">and</span> <span class="k">do</span> <span class="n">the</span> <span class="n">rest</span> <span class="n">as</span> <span class="n">before</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This proves that compilers are smart enough to perform basic optimization on switch statements whose values are not starting with 0.</p>

<h3>Sparse Values</h3>

<p>So far we have looked at simple switch statements whose case values were continuous. They either started from 0 or other numbers and incremented continuously without gaps in between.</p>

<p>The Wikipedia article on switch statement quotes a research paper:</p>

<blockquote><p>To optimize a switch statement, the programmer must use a very compact range of possible values to test.</p></blockquote>

<p>What happens if that is not possible or if programmer does something differently? Does it mean that a switch statement would not be optimized in any way?</p>

<p>There are two common types of values distribution in sparse switches. The first is when values can still be grouped together. For example, values of 10, 11, 12, 100 and 101 can grouped into two compact ranges, [10-12] and [100-101]. The second case is when no grouping can be done whatsoever.</p>

<p>Let’s test those two cases and find out what optimizations are performed by the compiler, if any.</p>

<h4>Distant Ranges</h4>

<p>Consider the following switch statement with values in [0-5] and [10000-10002] ranges:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;zero</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;one</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;two</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;three</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;four</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;five</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10000</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10001</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10002</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;10K!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below is the disassembled binary code generated for the above code by GCC:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mf">4004f</span><span class="mi">7</span><span class="o">:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x3</span>             <span class="p">;</span> <span class="n">Comparison</span> <span class="err">#</span><span class="mi">1</span><span class="o">:</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mf">3.</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">a:</span>   <span class="n">je</span>     <span class="mi">40056</span><span class="n">e</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x8e</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">It</span> <span class="n">is</span> <span class="mi">3</span><span class="o">!</span> <span class="n">Print</span> <span class="o">&amp;</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">c:</span>   <span class="n">nop</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="mh">0x0</span><span class="p">]</span>
</span><span class='line'><span class="mi">400500</span><span class="o">:</span>   <span class="n">jle</span>    <span class="mf">40051f</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x3f</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Is</span> <span class="n">it</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">?</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">comparison</span> <span class="err">#</span><span class="mf">3.</span>
</span><span class='line'><span class="mi">400502</span><span class="o">:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>             <span class="p">;</span> <span class="n">Comparison</span> <span class="err">#</span><span class="mi">2</span><span class="o">:</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mf">4.</span>
</span><span class='line'><span class="mi">400505</span><span class="o">:</span>   <span class="n">je</span>     <span class="mi">400553</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x73</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">It</span> <span class="n">is</span> <span class="mi">4</span><span class="o">!</span> <span class="n">Print</span> <span class="o">&amp;</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400507</span><span class="o">:</span>   <span class="n">jl</span>     <span class="mi">400537</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x57</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Is</span> <span class="n">it</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">?</span> <span class="n">Goto</span> <span class="n">comparison</span> <span class="err">#</span><span class="mf">4.</span>
</span><span class='line'><span class="mi">400509</span><span class="o">:</span>   <span class="n">sub</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x2710</span>          <span class="p">;</span> <span class="n">Subtract</span> <span class="mf">10000.</span>
</span><span class='line'><span class="mi">40050</span><span class="nl">e:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x2</span>             <span class="p">;</span> <span class="n">Comparison</span> <span class="err">#</span><span class="mi">5</span><span class="o">:</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mf">2.</span>
</span><span class='line'><span class="mi">400511</span><span class="o">:</span>   <span class="n">ja</span>     <span class="mi">400530</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x50</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">It</span> <span class="n">is</span> <span class="o">&gt;</span><span class="mf">2.</span> <span class="n">Just</span> <span class="n">exit</span> <span class="p">(</span><span class="n">no</span> <span class="n">match</span><span class="p">).</span>
</span><span class='line'><span class="mi">400513</span><span class="o">:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400741</span>        <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;10K!&quot;</span> <span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span>
</span><span class='line'><span class="mi">400518</span><span class="o">:</span>   <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>   <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">40051</span><span class="nl">d:</span>   <span class="n">jmp</span>    <span class="mi">400530</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x50</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mf">40051f</span><span class="o">:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x1</span>             <span class="p">;</span> <span class="n">Comparison</span> <span class="err">#</span><span class="mi">3</span><span class="o">:</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mf">1.</span>
</span><span class='line'><span class="mi">400522</span><span class="o">:</span>   <span class="n">je</span>     <span class="mi">400562</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x82</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">It</span> <span class="n">is</span> <span class="mi">1</span><span class="o">!</span> <span class="n">Go</span> <span class="n">print</span> <span class="n">it</span><span class="p">.</span>
</span><span class='line'><span class="mi">400524</span><span class="o">:</span>   <span class="n">jle</span>    <span class="mi">400543</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x63</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">It</span> <span class="n">is</span> <span class="n">less</span> <span class="n">than</span> <span class="mf">1.</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">comparison</span> <span class="err">#</span><span class="mf">6.</span>
</span><span class='line'><span class="mi">400526</span><span class="o">:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x40072d</span>        <span class="p">;</span> <span class="n">The</span> <span class="n">value</span> <span class="n">is</span> <span class="mi">2</span> <span class="p">(</span><span class="n">by</span> <span class="n">exclusion</span><span class="p">),</span>
</span><span class='line'><span class="mi">40052</span><span class="nl">b:</span>   <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>   <span class="p">;</span> <span class="p">...</span> <span class="n">print</span> <span class="s">&quot;2&quot;</span> <span class="n">and</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400530</span><span class="o">:</span>   <span class="n">xor</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>
</span><span class='line'><span class="mi">400532</span><span class="o">:</span>   <span class="n">add</span>    <span class="n">rsp</span><span class="p">,</span><span class="mh">0x8</span>
</span><span class='line'><span class="mi">400536</span><span class="o">:</span>   <span class="n">ret</span>
</span><span class='line'><span class="mi">400537</span><span class="o">:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400737</span>
</span><span class='line'><span class="mi">40053</span><span class="nl">c:</span>   <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">400541</span><span class="o">:</span>   <span class="n">jmp</span>    <span class="mi">400530</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x50</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">400543</span><span class="o">:</span>   <span class="n">test</span>   <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>             <span class="p">;</span> <span class="n">Comparison</span> <span class="err">#</span><span class="mi">6</span>
</span><span class='line'><span class="mi">400545</span><span class="o">:</span>   <span class="n">jne</span>    <span class="mi">400530</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x50</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Nope</span><span class="p">.</span> <span class="n">No</span> <span class="n">match</span> <span class="n">here</span><span class="p">.</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400547</span><span class="o">:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400724</span>        <span class="p">;</span> <span class="n">Print</span> <span class="s">&quot;zero&quot;</span> <span class="n">and</span> <span class="n">exit</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, the generated code seems to be less efficient compared to that of jump table. By looking closer at the program flow we can see that GCC has implemented a binary search algorithm. It is still well optimized compared to a simple chain of compare and jump instructions generated by if-then-else.</p>

<p>Clang takes a different approach in handling the above code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mi">4005</span><span class="nl">a7:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x270f</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ac:</span>   <span class="n">jg</span>     <span class="mf">4005e6</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x56</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ae:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">b1:</span>   <span class="n">ja</span>     <span class="mf">4005f</span><span class="n">b</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x6b</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">b3:</span>   <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">b5:</span>   <span class="n">jmp</span>    <span class="n">QWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rax</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="mh">0x4006f0</span><span class="p">]</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">bc:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400720</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">c1:</span>   <span class="n">jmp</span>    <span class="mf">4005f</span><span class="mi">6</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x66</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">c3:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400725</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">c8:</span>   <span class="n">jmp</span>    <span class="mf">4005f</span><span class="mi">6</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x66</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ca:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400729</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">cf:</span>   <span class="n">jmp</span>    <span class="mf">4005f</span><span class="mi">6</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x66</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">d1:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x40072d</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">d6:</span>   <span class="n">jmp</span>    <span class="mf">4005f</span><span class="mi">6</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x66</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">d8:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400733</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">dd:</span>   <span class="n">jmp</span>    <span class="mf">4005f</span><span class="mi">6</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x66</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">df:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400738</span>
</span><span class='line'><span class="mf">4005e4</span><span class="o">:</span>   <span class="n">jmp</span>    <span class="mf">4005f</span><span class="mi">6</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x66</span><span class="o">&gt;</span>
</span><span class='line'><span class="mf">4005e6</span><span class="o">:</span>   <span class="n">lea</span>    <span class="n">eax</span><span class="p">,[</span><span class="n">rax</span><span class="o">-</span><span class="mh">0x2710</span><span class="p">]</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ec:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x3</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ef:</span>   <span class="n">jae</span>    <span class="mf">4005f</span><span class="n">b</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x6b</span><span class="o">&gt;</span>
</span><span class='line'><span class="mf">4005f</span><span class="mi">1</span><span class="o">:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x40073d</span>
</span><span class='line'><span class="mf">4005f</span><span class="mi">6</span><span class="o">:</span>   <span class="n">call</span>   <span class="mi">400450</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>
</span><span class='line'><span class="mf">4005f</span><span class="nl">b:</span>   <span class="n">xor</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>
</span><span class='line'><span class="mf">4005f</span><span class="nl">d:</span>   <span class="n">pop</span>    <span class="n">rbp</span>
</span><span class='line'><span class="mf">4005f</span><span class="nl">e:</span>   <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code generated by Clang is a little bit more tricky compared to GCC. First it compares the input value with 9999. If the value is greater, it normalizes it by subtracting 10000 using “lea“ instruction, and then checks if the value is within [0-3) range. If it is, the “10K” is then printed. Otherwise, the function returns. If value is less than 9999, it ensures the value is in [0-5] range and uses a jump table. Very clever, isn’t it?</p>

<h4>Sparse Values</h4>

<p>The second common switch pattern is when values are sparse enough so that they cannot be grouped together. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">50</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;50!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">100</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;100!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">150</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;150!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">200</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;200!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">250</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;250!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">300</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Spartans!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">350</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;350!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">400</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;400!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">450</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;400!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">500</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;400!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10000</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10001</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10002</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10003</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10004</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10005</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;10K!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the above code, both GCC and Clang compilers have generated a binary search algorithm.
Changing the order of case labels in the switch did not affect the generated code — both compilers have analyzed all the specified values before making optimization decisions.</p>

<h2>Fall Through Switch</h2>

<p>So far we have looked at switch statements with no fall through cases, where each case had a trivial code. There are of course more complex scenarios.</p>

<p>What happens if we introduce fall through switch? What if we make each case statement to have complex control flows? What if we do both of the above?</p>

<p>The answer is simple — it does not fundamentally change the way compilers implement switch statements. The same approach of mixing comparison, range checking, binary search and jump table logic is still used.</p>

<p>What it affects, however, is how compiler rearranges the control flow. It may group some logic together, or split it. Redundant code might be reduced, or it might get duplicated intentionally to reduce a number of jump instructions. The code might be placed at different addresses, compiler might also generate different jump instructions to achieve the most compact and fast code. All those optimizations techniques are not unique to switch statements and are being used with other language constructs.</p>

<h2>Outsmarting Compilers</h2>

<p>Every discussion about code micro-optimization, which switch statements are usually part of, shall start with a word of warning. Outsmarting a production quality compiler these days is a nearly impossible task. A programmer should not even try to optimize the code that is not proven to be a bottleneck by carefully profiling the whole program. If a piece of code is proven to be slow and there is an obvious optimization that compiler has failed to perform, shop for a better compiler. Start by optimizing the logic and not the code — doing less steps where possible, avoiding chaotic dynamic memory manipulations, using well designed data structures will pay off more than any micro-optimization.</p>

<p>If, however, a switch statement turns out to be one of the biggest bottlenecks of the code, there might be ways to improve it. To do that, it is vital to know more information about the possible values passed into a switch than compiler knows about or may figure out from context. If there is nothing known about the input value — don’t bother optimizing, there is no way of implementing a general case better than a compiler.</p>

<h3>Improving a Switch</h3>

<p>Consider the following example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">switch</span> <span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>      <span class="n">do_very_important_stuff_0</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>      <span class="n">do_not_important_stuff_1</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>      <span class="n">do_not_important_stuff_2</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>      <span class="n">do_not_important_stuff_3</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>      <span class="n">do_not_important_stuff_4</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>      <span class="n">do_very_important_stuff_5</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above switch statement will be implemented using a jump table. It is impossible to do better unless it is known that most of the time the value is either 0 or 5, and can turn out to be 1, 2 or 3 only in some rare conditions that almost never happen. If that is the case, there is no way that compiler may know about it (unless of course we use profiler feedback optimization, which is not always possible). So how to optimize this for that particular case?</p>

<p>We remember that an indirect call is more expensive than two-three comparisons, at least for our given platform. This was proven during our earlier experiments with reducing a number of cases in a switch. Given that our critical path in the above examples consists of only two values — 0 and 5, the code can be optimized by not using those two statements in a switch case to avoid an expensive indirect jump. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">do_very_important_stuff_0</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">do_very_important_stuff_5</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>          <span class="n">do_not_important_stuff_1</span><span class="p">();</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>          <span class="n">do_not_important_stuff_2</span><span class="p">();</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>          <span class="n">do_not_important_stuff_3</span><span class="p">();</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>          <span class="n">do_not_important_stuff_4</span><span class="p">();</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If there are only two or three possible input values, the same technique can be used to improve switch statements that compiler implements using a binary search approach. If, however, the input value may vary, improving a switch performance turns into nothing more but improving a search algorithm. The programmer will have to analyze the most common set of input values, select or invent the search algorithm with better average performance or better performance for more important inputs, and manually implement the switch functionality using handcrafted if-then-else statements, creating a jump table manually (as described in chapter 3), or both.</p>

<h3>Switch vs High-Level Search</h3>

<p>Some developers occasionally get concerned whether it is better to use a switch statement or a higher-level search algorithms like, for example, a hash lookup implemented by the std::unordered_map class from C++ Standard Library.</p>

<h4>Hash Lookup</h4>

<p>Compared to dynamic hash lookup tables, statically generated lookup code for a pre-defined ranges of values will always be better than any other hash table implementation given that switch statements can only work with constant simple numeric POD types.</p>

<h4>Binary Search</h4>

<p>Ordered lookup algorithms such as those commonly used with std::map can theoretically be more efficient than a switch statement. The runtime overhead of those algorithms, however, may render them useless compared to a simple, low-level switch implementation. This may also depend on a nature of the input. Therefore, there is no general answer to this question and developers must test both implementations to determine which one is better in any particular case.</p>

<h2>If-then-else Recognition</h2>

<p>By experimenting with different switch statements we have ensured that compilers do a wonderful optimization job. It almost does not matter how programmers describe the switch it in the code — compiler will always generate nearly perfect generic lookup algorithms, rearrange code as needed, group or duplicate statements and apply other techniques to make the code most efficient.</p>

<p>C programming language is very high-level and it might seem that in many cases it should not matter how the control flow is described and the same optimization might be applied as long as a resulting program is functionally the same. This raises a question of whether compiler will do the same optimizations if programmer is using if-then-else. In theory, it might be the same, or might be different. But instead of guessing, let’s find out.</p>

<p>Below is a C program that is equivalent to our simple switch example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="n">v</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;zero</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;one</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;two</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;three</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;four</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;five</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>GCC did not generate an equivalent code to that of a switch statement. A set of compare instructions is used instead. Here is a relevant snippet of the binary code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mf">4004f</span><span class="mi">7</span><span class="o">:</span>   <span class="n">test</span>   <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>
</span><span class='line'><span class="mf">4004f</span><span class="mi">9</span><span class="o">:</span>   <span class="n">je</span>     <span class="mi">40051</span><span class="n">e</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x3e</span><span class="o">&gt;</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">b:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x1</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">e:</span>   <span class="n">xchg</span>   <span class="n">ax</span><span class="p">,</span><span class="n">ax</span>
</span><span class='line'><span class="mi">400500</span><span class="o">:</span>   <span class="n">je</span>     <span class="mi">400536</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x56</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">400502</span><span class="o">:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x2</span>
</span><span class='line'><span class="mi">400505</span><span class="o">:</span>   <span class="n">je</span>     <span class="mi">400542</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x62</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">400507</span><span class="o">:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x3</span>
</span><span class='line'><span class="mi">40050</span><span class="nl">a:</span>   <span class="n">je</span>     <span class="mi">40054</span><span class="n">e</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x6e</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">40050</span><span class="nl">c:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x4</span>
</span><span class='line'><span class="mf">40050f</span><span class="o">:</span>   <span class="n">nop</span>
</span><span class='line'><span class="mi">400510</span><span class="o">:</span>   <span class="n">je</span>     <span class="mi">40055</span><span class="n">a</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x7a</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">400512</span><span class="o">:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>
</span><span class='line'><span class="mi">400515</span><span class="o">:</span>   <span class="n">je</span>     <span class="mi">40052</span><span class="n">a</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4a</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clang compiler, on the other hand, has generated a jump table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mi">4005</span><span class="nl">a7:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">aa:</span>   <span class="n">ja</span>     <span class="mf">4005e2</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x52</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ae:</span>   <span class="n">jmp</span>    <span class="n">QWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rax</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="mh">0x4006e0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Therefore, we can draw a conclusion that compilers can and sometimes do optimize if-then-else statements the same way they optimize switch statements.</p>

<p>Whether it makes sense or not is another question. At first, it may seem like Clang has done a lot better job than GCC. However, this automatically prevents developer from performing optimizations described in the previous chapter by making it impossible to use comparison in the fast path of the program. This also prevents developers from manually providing branch prediction hints because switch cases, unlike if-then-else branches, cannot be explicitly prioritized. Since compilers cannot know for sure if switch was replaced by if-then-else statement on purpose, automatically replacing if-then-else with switch might discard programmer’s optimization efforts and worsen the runtime efficiency of the program.</p>

<h2>Summary</h2>

<p>We have learned how decent compilers transform higher-level switch statements into a low level machine code, reviewed a number of different examples along with optimization techniques applied by the compilers.</p>

<p>We also discussed a few optimization techniques that can be applied in certain situations to improve the application performance by using a special mix of switch and if-then-else statements.</p>

<p>I hope that it would helps us, developers, to better understand what switch statements are, what they can be used for and how they work, as well as adding some practical backup to some very common speculative talks about switch statement optimizations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unreasonable Effectiveness of C]]></title>
    <link href="http://741MHz.com/unreasonable-effectiveness-of-c/"/>
    <updated>2013-01-10T00:00:00-05:00</updated>
    <id>http://741MHz.com/unreasonable-effectiveness-of-c</id>
    <content type="html"><![CDATA[<p>It is always nice to run into like-minded people. Today I ran into <a href="http://damienkatz.net/">Damien Katz</a>, CTO at <a href="http://www.couchbase.com/">Couchbase</a>,  and his brilliant story about why C is a beautiful high-level language. For a big fan of C like me it would have been a crime not to share this story. If you agree that OOP is a hype and a disease or if you think that C++ is a horrible language then you will definitely enjoy it:</p>

<blockquote><p>For years I’ve tried my damnedest to get away from C. Too simple, too many details to manage, too old and crufty, too low level. I’ve had intense and torrid love affairs with Java, C++, and Erlang. I’ve built things I’m proud of with all of them, and yet each has broken my heart. They’ve made promises they couldn’t keep, created cultures that focus on the wrong things, and made devastating tradeoffs that eventually make you suffer painfully. And I keep crawling back to C.</p></blockquote>

<p><a href="http://damienkatz.net/2013/01/the_unreasonable_effectiveness_of_c.html">[Read the full story&hellip;]</a></p>

<p>While we are at it, you may also enjoy:</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Object-oriented_programming#Criticism">Object Oriented Programming Criticism</a></li>
<li><a href="http://article.gmane.org/gmane.comp.version-control.git/57918">Linus Torvalds opinion on C++</a> — you are full of bullshit!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System Program Problem Detected]]></title>
    <link href="http://741MHz.com/system-program-problem-detected/"/>
    <updated>2012-12-10T00:00:00-05:00</updated>
    <id>http://741MHz.com/system-program-problem-detected</id>
    <content type="html"><![CDATA[<p>I have just installed Ubuntu 12.10 and the first thing I ran into is tons of annoying popup windows telling me about system program problems and asking to report them:</p>

<p><img src="http://741MHz.com/images/ubuntu_system_problem/popup.png"></p>

<p>Apparently, this is a common problem that drives crazy a lot of people. What happens is some of the programs crash, and those cases are being reported by the Apport application. I highly doubt that anyone at Ubuntu is actually reading these reports. Firstly, millions of Ubuntu installations constantly have programs crashing and it must take an army of developers to investigate and fix them. Secondly, these crashes are happening for many years and they don’t seem to go away. So why bother? Here is how you disable this annoying reporting facility.</p>

<h3>Launch a terminal</h3>

<p>First, you need to open a terminal. You can do that by clicking on “Dash Home” button (on the top left of your screen), typing “Terminal”, and clicking on a Terminal application icon in order to launch it:</p>

<p><img src="http://741MHz.com/images/ubuntu_system_problem/open_terminal.png"></p>

<h3>Disable Apport</h3>

<p>In the terminal, type the following commands:</p>

<pre><code>sudo sed -i 's;^enabled=1$;enabled=0;g' /etc/default/apport
sudo service apport restart
sudo rm /var/crash/*
</code></pre>

<p>The above commands will replace “enabled=1″ with “enabled=0″ in the “/etc/default/apport” configuration file, restart the Apport application and remove old reports to save you a valuable disk space. The problem should now go away.</p>

<h3>Still having annoying popups?</h3>

<p>Be aware that in earlier versions of Ubuntu there was a bug when restarting Apport didn’t really restart it (see <a href="https://bugs.launchpad.net/ubuntu/+source/apport/+bug/292402">Bug #292402</a>). So as the last resort, simply reboot your computer.</p>

<p>Hope it helps! Good Luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Exceptions Performance]]></title>
    <link href="http://741MHz.com/exceptions-performance/"/>
    <updated>2011-07-22T00:00:00-04:00</updated>
    <id>http://741MHz.com/exceptions-performance</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>Exceptions provide a way to react to special conditions that change the normal flow of a program execution. Exception handling in general can refer to programming language construct, computer hardware mechanism, or both.</p>

<p>Many people are concerned with performance impact introduced by using exception mechanism in C++. For example, one of my colleagues believes that using exceptions should be avoided at any cost to improve execution speed of an application. Is that true or not? Let’s find out.</p>

<h3>Using exceptions</h3>

<p>It is important to understand that exception is not a general case of a program execution flow but an unexpected situation. Such situation should normally not arise at all. However, errors happen and we need to check for them. A large chunk of any good program is mostly dedicated to proper error handling. There are two fundamental approaches when dealing with error handling — return codes or exceptions. For example, let’s say we have a custom function that implements division:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">divide</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need to make sure that divisor is not zero because you cannot divide by zero (at least not with integer arithmetics). There are two ways of doing this. Let’s start from C-style error checking that will make our function look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">divide</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>C++ error checking using exceptions will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">divide</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">logic_error</span> <span class="p">(</span><span class="err">“</span><span class="n">Division</span> <span class="n">by</span> <span class="n">zero</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The use cases for these two functions will be different. For C-style function, we will always have to check for return code to make sure that operation succeeded:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">foo</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">divide</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Division was successful. Do something with “result”.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Error occurred!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The C++ use case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">foo</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">divide</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// Division was successful. Do something with “result”.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">logic_error</span> <span class="o">&amp;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Error occurred!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>C++ way with exceptions is handy when program flow is somewhat more complicated. What if we need to invoke “divide” function two times? In that case we will have to check for error twice using C-style:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">foo</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">divide</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Division was successful. Do something with “result”.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Error occurred!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">divide</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Division was successful. Do something with “result”.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Error occurred!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But in C++, one try-catch block will do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">foo</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">divide</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// Division was successful. Do something with “result”.</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">divide</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// Division was successful. Do something with “result”, again.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">logic_error</span> <span class="o">&amp;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Error occurred!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, imagine that we have to invoke “divide” function ten or hundred times. And to make it even more complex, imagine that we have multiple nested functions and every function needs to check for an error. Using exception now seems to be the ideal way to go. Well, that is what exceptions were designed for — to make things easier.</p>

<h3>Easy vs Fast</h3>

<p>There are a lot of things that will make our lives as developers easier. But sometimes our programs should be fast. And not only fast but fastest in the world, or even the whole universe. And we have to sacrifice the ease of development to achieve that. This is the case with high-frequency trading programs, for example. So if a programmer writing code for high-frequency trading will think that wrapping invocation of “divide” function with “try-catch” block will slow down his application even by a nanosecond in comparison with C-style error checking, he will choose the hardest way and check for error code every time he invokes “divide” function. Indeed, he will spend much more time to achieve his goals, but will that be a right decision?</p>

<h3>Under the hood</h3>

<p>To answer the question above, we need to dive into the implementation details and figure out how exceptions are implemented. From this point, there is a huge difference between C++ and higher-level languages such as Java, C#, Python and others. In C++, there are two methods for handling exceptions at run-time — “setjmp/longjmp” (hereinafter jumping) method and “zero-cost” exception handling.</p>

<p>Jumping method saves the context when entering a frame with an exception handler. Then when an exception is raised, the context can be restored immediately, without the need for tracking stack frames. This method provides very fast exception propagation, but introduces significant overhead for use of exception handlers, even if no exception is raised.</p>

<p>Zero-cost method generates static tables to describe exception ranges. No dynamic code is required when entering a frame containing an exception handler. When an exception is raised, the tables are used to control a back trace of the subprogram invocation stack to locate the required exception handler. This method has considerably poorer performance for the propagation of exceptions, but there is no overhead for exception handlers if no exception is raised.</p>

<p>There is always upside and downside and we have to make a choice. Taking into account that exceptions are not a part of normal execution flow, we need to optimize the most common case when exceptions are not thrown and sacrifice the speed of handling them. So many production-quality C++ compilers made that choice in favor of zero-cost method.</p>

<h3>Digging into the assembler</h3>

<p>So let’s get back to our “divide” function and compare C-style error checking with zero-cost exception handling. C-style error checking:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">divide</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">foo</span> <span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">volatile</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">28</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">divide</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">d1</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">divide</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">d2</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">d1</span> <span class="o">+</span> <span class="n">d2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="n">foo</span> <span class="p">(</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Code using exceptions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">divide</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">logic_error</span> <span class="p">(</span><span class="s">&quot;Division by zero&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">foo</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">volatile</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">28</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">divide</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">+</span> <span class="n">divide</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span> <span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">foo</span> <span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span> <span class="o">&amp;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is what will actually happen for C-style example (I removed code that won’t get executed for simplicity):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="nl">__Z6divideiiRi:</span>
</span><span class='line'>  <span class="n">pushq</span>   <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">movq</span>    <span class="o">%</span><span class="n">rsp</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">edi</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">esi</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movq</span>    <span class="o">%</span><span class="n">rdx</span><span class="p">,</span> <span class="o">-</span><span class="mi">16</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cmpl</span>    <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">jne</span> <span class="n">L2</span>
</span><span class='line'><span class="p">;;</span> <span class="n">Skipped</span> <span class="k">return</span> <span class="n">of</span> <span class="o">-</span><span class="mf">1.</span> <span class="n">We</span> <span class="n">will</span> <span class="n">always</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">L2</span>
</span><span class='line'><span class="nl">L2:</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">edx</span>
</span><span class='line'>  <span class="n">sarl</span>    <span class="err">$</span><span class="mi">31</span><span class="p">,</span> <span class="o">%</span><span class="n">edx</span>
</span><span class='line'>  <span class="n">idivl</span>   <span class="o">-</span><span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">edx</span>
</span><span class='line'>  <span class="n">movq</span>    <span class="o">-</span><span class="mi">16</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">edx</span><span class="p">,</span> <span class="p">(</span><span class="o">%</span><span class="n">rax</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">popq</span>    <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">ret</span>
</span><span class='line'>
</span><span class='line'><span class="nl">__Z3fooRi:</span>
</span><span class='line'>  <span class="n">pushq</span>   <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">movq</span>    <span class="o">%</span><span class="n">rsp</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">subq</span>    <span class="err">$</span><span class="mi">24</span><span class="p">,</span> <span class="o">%</span><span class="n">rsp</span>
</span><span class='line'>  <span class="n">movq</span>    <span class="o">%</span><span class="n">rdi</span><span class="p">,</span> <span class="o">-</span><span class="mi">24</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="err">$</span><span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="err">$</span><span class="mi">28</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">-</span><span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">ecx</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">leaq</span>    <span class="o">-</span><span class="mi">12</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rdx</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">ecx</span><span class="p">,</span> <span class="o">%</span><span class="n">esi</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">edi</span>
</span><span class='line'>  <span class="n">call</span>    <span class="n">__Z6divideiiRi</span>
</span><span class='line'>  <span class="n">cmpl</span>    <span class="err">$</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">sete</span>    <span class="o">%</span><span class="n">al</span>
</span><span class='line'>  <span class="n">testb</span>   <span class="o">%</span><span class="n">al</span><span class="p">,</span> <span class="o">%</span><span class="n">al</span>
</span><span class='line'>  <span class="n">je</span>  <span class="n">L5</span>
</span><span class='line'><span class="p">;;</span> <span class="n">Skipped</span> <span class="k">return</span> <span class="n">of</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">we</span> <span class="n">will</span> <span class="n">always</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">L5</span><span class="p">.</span>
</span><span class='line'><span class="nl">L5:</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">ecx</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">-</span><span class="mi">8</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">leaq</span>    <span class="o">-</span><span class="mi">16</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rdx</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">ecx</span><span class="p">,</span> <span class="o">%</span><span class="n">esi</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">edi</span>
</span><span class='line'>  <span class="n">call</span>    <span class="n">__Z6divideiiRi</span>
</span><span class='line'>  <span class="n">cmpl</span>    <span class="err">$</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">sete</span>    <span class="o">%</span><span class="n">al</span>
</span><span class='line'>  <span class="n">testb</span>   <span class="o">%</span><span class="n">al</span><span class="p">,</span> <span class="o">%</span><span class="n">al</span>
</span><span class='line'>  <span class="n">je</span>  <span class="n">L7</span>
</span><span class='line'><span class="p">;;</span> <span class="n">Skipped</span> <span class="k">return</span> <span class="n">of</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">always</span> <span class="n">jumping</span> <span class="n">to</span> <span class="n">L7</span><span class="p">.</span>
</span><span class='line'><span class="nl">L7:</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">-</span><span class="mi">12</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">edx</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">-</span><span class="mi">16</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">addl</span>    <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">edx</span>
</span><span class='line'>  <span class="n">movq</span>    <span class="o">-</span><span class="mi">24</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">edx</span><span class="p">,</span> <span class="p">(</span><span class="o">%</span><span class="n">rax</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">leave</span>
</span><span class='line'>  <span class="n">ret</span>
</span><span class='line'>
</span><span class='line'><span class="nl">_main:</span>
</span><span class='line'>  <span class="n">pushq</span>   <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">movq</span>    <span class="o">%</span><span class="n">rsp</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">subq</span>    <span class="err">$</span><span class="mi">16</span><span class="p">,</span> <span class="o">%</span><span class="n">rsp</span>
</span><span class='line'>  <span class="n">leaq</span>    <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">rax</span>
</span><span class='line'>  <span class="n">movq</span>    <span class="o">%</span><span class="n">rax</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span>
</span><span class='line'>  <span class="n">call</span>    <span class="n">__Z3fooRi</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">-</span><span class="mi">4</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">leave</span>
</span><span class='line'>  <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s a lot of error checking code that gets executed assuming it doesn’t happen very often! If we need to call “divide” function more, we will have to add more checking for “-1” return result, and assembly listing will get longer and longer because of that check. Let’s see how the code will look like with exception handling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="nl">__Z6divideii:</span>
</span><span class='line'>  <span class="n">pushq</span>   <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">movq</span>    <span class="o">%</span><span class="n">rsp</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">pushq</span>   <span class="o">%</span><span class="n">r12</span>
</span><span class='line'>  <span class="n">pushq</span>   <span class="o">%</span><span class="n">rbx</span>
</span><span class='line'>  <span class="n">subq</span>    <span class="err">$</span><span class="mi">32</span><span class="p">,</span> <span class="o">%</span><span class="n">rsp</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">edi</span><span class="p">,</span> <span class="o">-</span><span class="mi">36</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">esi</span><span class="p">,</span> <span class="o">-</span><span class="mi">40</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">cmpl</span>    <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">40</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">jne</span> <span class="n">L2</span>
</span><span class='line'><span class="p">;;</span> <span class="n">Skipped</span> <span class="n">the</span> <span class="n">code</span> <span class="n">that</span> <span class="n">allocates</span> <span class="n">and</span> <span class="k">throws</span> <span class="n">exception</span><span class="p">.</span> <span class="n">We</span> <span class="n">will</span> <span class="n">always</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">L2</span><span class="p">.</span>
</span><span class='line'><span class="nl">L2:</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">-</span><span class="mi">36</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">edx</span>
</span><span class='line'>  <span class="n">sarl</span>    <span class="err">$</span><span class="mi">31</span><span class="p">,</span> <span class="o">%</span><span class="n">edx</span>
</span><span class='line'>  <span class="n">idivl</span>   <span class="o">-</span><span class="mi">40</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">addq</span>    <span class="err">$</span><span class="mi">32</span><span class="p">,</span> <span class="o">%</span><span class="n">rsp</span>
</span><span class='line'>  <span class="n">popq</span>    <span class="o">%</span><span class="n">rbx</span>
</span><span class='line'>  <span class="n">popq</span>    <span class="o">%</span><span class="n">r12</span>
</span><span class='line'>  <span class="n">popq</span>    <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">ret</span>
</span><span class='line'>
</span><span class='line'><span class="nl">__Z3foov:</span>
</span><span class='line'>  <span class="n">pushq</span>   <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">movq</span>    <span class="o">%</span><span class="n">rsp</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">pushq</span>   <span class="o">%</span><span class="n">rbx</span>
</span><span class='line'>  <span class="n">subq</span>    <span class="err">$</span><span class="mi">24</span><span class="p">,</span> <span class="o">%</span><span class="n">rsp</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="err">$</span><span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">20</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="err">$</span><span class="mi">28</span><span class="p">,</span> <span class="o">-</span><span class="mi">24</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">-</span><span class="mi">24</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">edx</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">-</span><span class="mi">20</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">edx</span><span class="p">,</span> <span class="o">%</span><span class="n">esi</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">edi</span>
</span><span class='line'>  <span class="n">call</span>    <span class="n">__Z6divideii</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">ebx</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">-</span><span class="mi">20</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">edx</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">-</span><span class="mi">24</span><span class="p">(</span><span class="o">%</span><span class="n">rbp</span><span class="p">),</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">edx</span><span class="p">,</span> <span class="o">%</span><span class="n">esi</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">edi</span>
</span><span class='line'>  <span class="n">call</span>    <span class="n">__Z6divideii</span>
</span><span class='line'>  <span class="n">addl</span>    <span class="o">%</span><span class="n">ebx</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">addq</span>    <span class="err">$</span><span class="mi">24</span><span class="p">,</span> <span class="o">%</span><span class="n">rsp</span>
</span><span class='line'>  <span class="n">popq</span>    <span class="o">%</span><span class="n">rbx</span>
</span><span class='line'>  <span class="n">popq</span>    <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">ret</span>
</span><span class='line'>
</span><span class='line'><span class="nl">_main:</span>
</span><span class='line'>  <span class="n">pushq</span>   <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">movq</span>    <span class="o">%</span><span class="n">rsp</span><span class="p">,</span> <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">pushq</span>   <span class="o">%</span><span class="n">rbx</span>
</span><span class='line'>  <span class="n">subq</span>    <span class="err">$</span><span class="mi">24</span><span class="p">,</span> <span class="o">%</span><span class="n">rsp</span>
</span><span class='line'>  <span class="n">call</span>    <span class="n">__Z3foov</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">eax</span><span class="p">,</span> <span class="o">%</span><span class="n">ebx</span>
</span><span class='line'>  <span class="n">movl</span>    <span class="o">%</span><span class="n">ebx</span><span class="p">,</span> <span class="o">%</span><span class="n">eax</span>
</span><span class='line'>  <span class="n">addq</span>    <span class="err">$</span><span class="mi">24</span><span class="p">,</span> <span class="o">%</span><span class="n">rsp</span>
</span><span class='line'>  <span class="n">popq</span>    <span class="o">%</span><span class="n">rbx</span>
</span><span class='line'>  <span class="n">popq</span>    <span class="o">%</span><span class="n">rbp</span>
</span><span class='line'>  <span class="n">ret</span>
</span><span class='line'><span class="p">;;</span> <span class="n">Stack</span> <span class="n">unwinding</span> <span class="n">code</span> <span class="n">is</span> <span class="n">invoked</span> <span class="n">from</span> <span class="n">statically</span> <span class="n">generated</span> <span class="n">exception</span>
</span><span class='line'><span class="p">;;</span> <span class="n">table</span><span class="p">.</span> <span class="n">That</span> <span class="n">code</span> <span class="n">is</span> <span class="n">stripped</span> <span class="n">out</span><span class="p">,</span> <span class="n">will</span> <span class="n">never</span> <span class="n">be</span> <span class="n">reached</span> <span class="n">in</span> <span class="n">our</span> <span class="n">example</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is much better! We managed to avoid two unnecessary checks of return result. Other than that code that is being executed is exactly the same.</p>

<h3>Jumping exceptions</h3>

<p>Now, let’s say we have a compiler that is using “setjmp/longjmp” approach to implement exceptions. Even with that approach, exception handling could be faster than error checking. Consider the following example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">doContinue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">doSomeWork</span> <span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="p">(...)</span> <span class="p">{</span> <span class="cm">/* do something about it! */</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>… that will be indeed slower than this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">doContinue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">doSomeWork</span> <span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* do something about it! */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>… but how about this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">doContinue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">doSomeWork</span> <span class="p">();</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">doContinue</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(...)</span> <span class="p">{</span> <span class="cm">/* do something about it! */</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the example above, we set recovery point once and avoid checking return result of the function multiple times. Of course, that is the best-case scenario assuming that exceptional situation almost never happens. But that is a fair assumption. Otherwise that situation should be treated as normal execution flow and handled differently, without exceptions, which will be the same for both C-style and C++-style programmers. Please note that above optimization makes no sense in case with zero-cost exception mechanism.</p>

<h3>Finding out what exception mechanism is being used</h3>

<p>Unfortunately, the only way to find out what underlying mechanism is used by compiler for exception handling is to write a simple program using exceptions, compile it into assembler language and analyze results.</p>

<h3>Other performance considerations</h3>

<p>Using exceptions will make binary size bigger, no matter what mechanism is used to implement exception handling. So if program size is more important than execution speed, exceptions should not be used. And in those cases where you want to gain maximum execution speed with minimal impact on binary size, you have to do additional testing in order to find the best combination of C-style error checking and exception handling code that achieves your result.</p>

<h3>Summary</h3>

<p>Performance can mean many different things — from the speed of execution or size of the binary to the time developer spends writing code.</p>

<p>In this article we have discussed execution speed of an application using exceptions vs. an application using C-style error checking, and developer’s time needed to write the same program using these two approaches.</p>

<p>If binary size of the compiled program is the most important factor then exceptions should not be used.</p>

<p>If execution speed or ease of development (or both!) is the most important factor then programmer deciding to give up the ease of using exceptions in favor of C-style error checking will not only spend much more time writing the code, make the code more complicated, run into the problem of actually describing the error (especially in multi-threaded environment, and especially when thread local storage cannot be used due to handling of exception in different thread in case of asynchronous programming), but will also make it slower.</p>

<h3>References</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Exception_handling">Exception Handling – Wikipedia</a></li>
<li><a href="http://www.boost.org/community/error_handling.html">Error and Exception Handling by Dave Abrahams</a></li>
<li><a href="http://mentorembedded.github.io/cxx-abi/abi-eh.html">Itanium C++ ABI: Exception Handling</a></li>
<li><a href="http://gcc.gnu.org/onlinedocs/gnat_ugn_unw/Exception-Handling-Control.html">GNAT Exception Handling Control</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unique Lines Without Sorting]]></title>
    <link href="http://741MHz.com/awk-uniq/"/>
    <updated>2010-10-23T00:00:00-04:00</updated>
    <id>http://741MHz.com/awk-uniq</id>
    <content type="html"><![CDATA[<p>Today I ran into a small problem where I had a set of unsorted lines of text and wanted to remove duplicate lines without sorting the data. Both <code>uniq</code> and <code>sort -u</code> commands require data to be sorted, so they won&rsquo;t work. There is a way of doing this with AWK:</p>

<pre><code>awk '!($0 in lines) { lines[$0]; print }'
</code></pre>

<p>The above script will collect unique lines in order of their appearance and store them in array called lines that gets printed at the end. This probably won&rsquo;t work for huge data sets but works well on up to a few thousand lines of text.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Predefined Macros]]></title>
    <link href="http://741MHz.com/predefined-macros/"/>
    <updated>2010-10-17T00:00:00-04:00</updated>
    <id>http://741MHz.com/predefined-macros</id>
    <content type="html"><![CDATA[<p>Every C and C++ compiler has several object-like macros that are implicitly defined and can be used  without supplying their definitions on the command line or through including header files. Such macros are called &ldquo;predefined&rdquo; and can help figure out for what architecture you compile for, on what platform, if the source code being compiled is C or C++, and even tell the language standard of the code being used.</p>

<p>All predefined macros are described in GCC online documentation. However, not all of them are guaranteed to be defined. Sometimes it is helpful to see a list of macros defined by the compiler with their values, if any. To do that, run a preprocessor with zero input, using the following command:</p>

<pre><code>cpp -dM &lt;/dev/null
</code></pre>

<p>This will produce the output like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define __unix__ 1
</span><span class='line'>#define __x86_64 1
</span><span class='line'>#define __DBL_MIN_10_EXP__ (-307)
</span><span class='line'>#define __FINITE_MATH_ONLY__ 0
</span><span class='line'>#define __GNUC_PATCHLEVEL__ 3</span></code></pre></td></tr></table></div></figure>


<p>From the above output we can tell that code is being compiled for x86_64 architecture. The output may change depending on the platform and/or compiler settings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wait For File With Inotify]]></title>
    <link href="http://741MHz.com/inotify-wait/"/>
    <updated>2010-09-29T00:00:00-04:00</updated>
    <id>http://741MHz.com/inotify-wait</id>
    <content type="html"><![CDATA[<p>Imagine a situation where you have been asked to create a program that needs user to upload a file. It sounds easy, but there is a little problem. The program needs to wait for the file to appear, and how to do so efficiently might not be immediately obvious. The easiest and perhaps most naive implementation that comes to mind first is to check whether the file exist, wait some time using <a href="http://man7.org/linux/man-pages/man3/sleep.3.html"><code>sleep()</code></a> and repeat this loop if files still does not exist afterwards.</p>

<p>This approach has some problems. It is not clear what time the program needs to sleep. If the interval is too long, a second for example, then user may experience a second long delay. This might be unacceptable. On the other hand, having a sleep interval too short would put an extra load on the entire system — operating system will have to <a href="http://en.wikipedia.org/wiki/Schedule_(computer_science">schedule</a>) this program more frequently, the filesystem access will be performed on each loop cycle, etc. This might slow down other applications running on the same server. Either way there is a problem that cannot be solved without a proper support from operating system that can tell the program when the file is created.</p>

<p><a href="http://en.wikipedia.org/wiki/Linux">Linux</a> has introduced the <a href="http://en.wikipedia.org/wiki/Inotify"><em>inotify</em></a> subsystem that was designed to solve this and similar problems by extending the filesystem with notifications of changes that are reported to the applications. To demonstrate how it works, I wrote a simple C++ that check if the file exists and waits for it if it doesn’t:</p>

<figure class='code panel panel-default'><figcaption class='panel-heading'><h3 class='panel-title'>Wait for file using inotify (inotify_wait.cpp)</h3> <a href='http://741MHz.com/downloads/code/inotify_wait.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/inotify.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">directory</span> <span class="o">=</span> <span class="s">&quot;/tmp&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;test.txt&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">fullpath</span> <span class="o">=</span> <span class="n">directory</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">filename</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">inotify_init</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">watch</span> <span class="o">=</span> <span class="n">inotify_add_watch</span><span class="p">(</span>
</span><span class='line'>        <span class="n">fd</span><span class="p">,</span> <span class="n">directory</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">IN_MODIFY</span> <span class="o">|</span> <span class="n">IN_CREATE</span> <span class="o">|</span> <span class="n">IN_MOVED_TO</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">access</span><span class="p">(</span><span class="n">fullpath</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">F_OK</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;File %s exists.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">fullpath</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span>    <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span> <span class="o">*</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">inotify_event</span><span class="p">)</span> <span class="o">+</span> <span class="mi">16</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">ssize_t</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">bool</span>    <span class="n">is_created</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">is_created</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">length</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="n">inotify_event</span> <span class="o">*</span><span class="n">event</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">length</span><span class="p">);</span>
</span><span class='line'>             <span class="n">i</span> <span class="o">+=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">inotify_event</span><span class="p">)</span> <span class="o">+</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">event</span> <span class="o">=</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">inotify_event</span> <span class="o">*&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">filename</span> <span class="o">==</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;The file %s was created.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>                <span class="n">is_created</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">inotify_rm_watch</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">watch</span><span class="p">);</span>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we subscribe for filesystem notifications before checking if file exists. It is needed to avoid a race condition where file is created exactly after we checked for its existence and before we subscribed for notifications.</p>

<p>A similar approach is used in many applications. For example, <a href="www.bittorrent.com">BitTorrent</a> application can monitor a “Downloads” directory for new torrent files and open them automatically.</p>
]]></content>
  </entry>
  
</feed>
