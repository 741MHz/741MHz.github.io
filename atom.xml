<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ranting @ 741 MHz]]></title>
  <link href="http://741MHz.com/atom.xml" rel="self"/>
  <link href="http://741MHz.com/"/>
  <updated>2013-12-01T22:33:13-05:00</updated>
  <id>http://741MHz.com/</id>
  <author>
    <name><![CDATA[741MHz.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Read it Aloud to Yourself]]></title>
    <link href="http://741MHz.com/read-it-aloud/"/>
    <updated>2013-05-07T00:00:00-04:00</updated>
    <id>http://741MHz.com/read-it-aloud</id>
    <content type="html"><![CDATA[<p>Once in a while I like to learn a new technology, a programming language or a trick to entertain myself and, hopefully, keep the mind open. To shift the perception on programming languages a little, I’ve decided to code some Ruby. The mind shift attempt was not successful this time. The language itself didn’t really impress me a lot — it is nice, well designed, has quite a community and a lot of stuff is built around it. But that’s about all there is in it for me. Almost. One of the books about Ruby that I stumbled upon is too damn good. It is the most entertaining and interesting read about programming language that I had in quite some time. It is called “<a href="http://mislav.uniqpath.com/poignant-guide/book/">Why’s (poignant) Guide to Ruby</a>” and is freely available online under the <a href="http://creativecommons.org/licenses/by-sa/2.5/">Attribution-ShareAlike license</a>. Here is an excerpt from a beautiful introduction to Ruby on Chapter 3:</p>

<blockquote><p>My conscience won’t let me call Ruby a computer language. That would imply that the language works primarily on the computer’s terms. That the language is designed to accommodate the computer, first and foremost. That therefore, we, the coders, are foreigners, seeking citizenship in the computer’s locale. It’s the computer’s language and we are translators for the world.
But what do you call the language when your brain begins to think in that language? When you start to use the language’s own words and colloquialisms to express yourself. Say, the computer can’t do that. How can it be the computer’s language? It is ours, we speak it natively!
We can no longer truthfully call it a computer language. It is coderspeak. It is the language of our thoughts.
Read the following aloud to yourself:
5.times { print &ldquo;Odelay!&rdquo; }
In English sentences, punctuation (such as periods, exclamations, parentheses) are silent. Punctuation adds meaning to words, helps give cues as to what the author intended by a sentence. So let’s read the above as: Five times print “Odelay!”</p></blockquote>

<p>There were more examples that, if you read them aloud to yourself, totally make sense to any person:</p>

<figure class='code'><figcaption><span>Exit unless the word restaurant includes the word aura:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">exit</span> <span class="k">unless</span> <span class="s2">&quot;restaurant&quot;</span><span class="o">.</span><span class="n">include?</span> <span class="s2">&quot;aura&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>With the words ‘toast’, ‘cheese’, and ‘wine’: take each food and print it capitalized:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="s1">&#39;toast&#39;</span><span class="p">,</span> <span class="s1">&#39;cheese&#39;</span><span class="p">,</span> <span class="s1">&#39;wine&#39;</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">food</span><span class="o">|</span> <span class="nb">print</span> <span class="n">food</span><span class="o">.</span><span class="n">capitalize</span>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is not to mention beautiful Cartoon Foxes:</p>

<p><img src="http://mislav.uniqpath.com/poignant-guide/images/the.foxes-3.png"></p>

<p>For a moment I thought it was pretty cool. But then I got back to earth. You see, programming in a human language is not fun at all and we all know it. There is a good non-programming life analogy to programming in a human language. It is called “The Law”. If you don’t believe me, go read your country’s tax, labor, criminal or any other law. You could read it as much as you want but chances are that you would either not understand it at all or misinterpret it unless you have a degree from a good law school. And those laws are written in proper English that you can read aloud to yourself. The point is that when it comes to precisely describing what should happen under what circumstances, there will be a domain specific language for it, and you will have to either master it yourself or hire a professional. The language itself doesn’t make things simpler and I would probably get around the law much better if it was written in a formal <a href="http://en.wikipedia.org/wiki/Turing_completeness">Turing-complete</a> language. And after all, I don’t really think like Ruby. Perhaps I’ve been doing low-level programming for too long now, I don’t know. It is definitely not the language of my thoughts. Not even close.</p>

<p>At any rate, Ruby is still a programming language that leaves a good impression as simple, fun and powerful tool that gets a lot of things done. I really enjoyed it during my crash course and thought it would be cool to write a C++ program in a way that you could read it aloud to your friends who are not programmers and have them understand what it does. Here is what I came up with for those first three Ruby examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &quot;ruby.hh&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 5.times { print &quot;Odelay!&quot; }</span>
</span><span class='line'>    <span class="mi">5</span><span class="n">_times</span> <span class="o">^</span> <span class="n">print</span><span class="p">(</span><span class="s">&quot;Odelay!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// exit unless &quot;restaurant&quot;.include? &quot;aura&quot;</span>
</span><span class='line'>    <span class="n">exit_unless</span> <span class="o">^</span> <span class="s">&quot;restaurant&quot;</span><span class="n">_includes</span><span class="p">(</span><span class="s">&quot;aura&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// [&#39;toast&#39;, &#39;cheese&#39;, &#39;wine&#39;].each { |food| print food.capitalize  }</span>
</span><span class='line'>    <span class="n">each</span><span class="p">({</span> <span class="s">&quot;toast&quot;</span><span class="p">,</span> <span class="s">&quot;cheese&quot;</span><span class="p">,</span> <span class="s">&quot;wine&quot;</span> <span class="p">})</span> <span class="o">^</span> <span class="p">(</span><span class="n">print</span> <span class="o">|</span> <span class="n">capitalized</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And as it often happens, C++ did not come with batteries included this time, so I had to come up with a little mess consisting of lambdas, function objects, user-defined literals and initializer lists in order for this mambo-jumbo to work. Most of those are part of C++11 and without them it would have been a lot worse. Here is my terrible code turning C++ into a crazy Ruby-like thing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#ifndef RUBY_HH</span>
</span><span class='line'><span class="cp">#define RUBY_HH</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;initializer_list&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">fmt_flags</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">none</span><span class="p">,</span>
</span><span class='line'>    <span class="n">capitalized</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Repeater</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="kr">inline</span> <span class="n">Repeater</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">n</span><span class="p">)</span> <span class="o">:</span> <span class="n">n</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">F</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="k">operator</span> <span class="o">^</span> <span class="p">(</span><span class="k">const</span> <span class="n">F</span> <span class="o">&amp;</span><span class="n">f</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="n">f</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">inline</span> <span class="n">Repeater</span> <span class="k">operator</span><span class="s">&quot;&quot;</span> <span class="n">_times</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Repeater</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">printer</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">printer</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">)</span> <span class="o">:</span> <span class="n">s</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">inline</span> <span class="kt">void</span> <span class="k">operator</span><span class="p">()()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">puts</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">fmt_printer</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fmt_flags</span> <span class="n">f</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">fmt_printer</span><span class="p">(</span><span class="n">fmt_flags</span> <span class="n">f</span><span class="p">)</span> <span class="o">:</span> <span class="n">f</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">inline</span> <span class="kt">void</span> <span class="k">operator</span><span class="p">()(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">s</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">capitalized:</span>
</span><span class='line'>              <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="n">c</span> <span class="o">:</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">c</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">toupper</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>          <span class="k">case</span> <span class="nl">none:</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">puts</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">auto</span> <span class="n">print</span> <span class="o">=</span> <span class="p">[](</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">printer</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">StringIncludesCheck</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">haystack</span><span class="p">;</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">StringIncludesCheck</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">haystack</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span> <span class="n">haystack</span><span class="p">(</span><span class="n">haystack</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">inline</span> <span class="kt">bool</span> <span class="k">operator</span><span class="p">()(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">needle</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">strstr</span><span class="p">(</span><span class="n">haystack</span><span class="p">,</span> <span class="n">needle</span><span class="p">)</span> <span class="o">!=</span> <span class="n">nullptr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">inline</span> <span class="n">StringIncludesCheck</span> <span class="k">operator</span><span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">_includes</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">haystack</span><span class="p">,</span> <span class="kt">long</span> <span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">StringIncludesCheck</span><span class="p">(</span><span class="n">haystack</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">ExiterUnless</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">inline</span> <span class="kt">void</span> <span class="k">operator</span> <span class="o">^</span> <span class="p">(</span><span class="kt">bool</span> <span class="n">v</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">ExiterUnless</span> <span class="n">exit_unless</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">EachFunc</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">initializer_list</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">elems</span><span class="p">;</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">EachFunc</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">initializer_list</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">elems</span><span class="p">)</span> <span class="o">:</span> <span class="n">elems</span><span class="p">(</span><span class="n">elems</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">F</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="k">operator</span><span class="o">^</span><span class="p">(</span><span class="n">F</span> <span class="o">&amp;&amp;</span><span class="n">f</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="n">x</span> <span class="o">:</span> <span class="n">elems</span><span class="p">)</span>
</span><span class='line'>            <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">EachFunc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">each</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">initializer_list</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">elems</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EachFunc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">elems</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">fmt_printer</span> <span class="k">operator</span><span class="o">|</span><span class="p">(</span><span class="n">decltype</span><span class="p">(</span><span class="n">print</span><span class="p">)</span> <span class="n">printer</span><span class="p">,</span> <span class="n">fmt_flags</span> <span class="n">flags</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">fmt_printer</span><span class="p">(</span><span class="n">flags</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>Luckily, this kind of stuff is rarely needed in the real world C++ programming. Most folks simply code up a few classes, throw a few virtual functions on top and get the job done. But there are some good cases when such a mind-blowing complexity comes handy. <a href="http://www.boost.org/doc/libs/release/doc/html/xpressive.html">Xpressive</a> is an excellent examples — it is a template regular-expression library that pretty much builds regular expressions in compile-time. Just check this beautiful usage example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/xpressive/xpressive.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">boost</span><span class="o">::</span><span class="n">xpressive</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="s">&quot;I was born on 5/30/1973 at 7am.&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// define some custom mark_tags with names more meaningful than s1, s2, etc.</span>
</span><span class='line'>    <span class="n">mark_tag</span> <span class="n">day</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">month</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">year</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="n">delim</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// this regex finds a date</span>
</span><span class='line'>    <span class="n">cregex</span> <span class="n">date</span> <span class="o">=</span> <span class="p">(</span><span class="n">month</span><span class="o">=</span> <span class="n">repeat</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_d</span><span class="p">))</span>           <span class="c1">// find the month ...</span>
</span><span class='line'>               <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">delim</span><span class="o">=</span> <span class="p">(</span><span class="n">set</span><span class="o">=</span> <span class="sc">&#39;/&#39;</span><span class="p">,</span><span class="sc">&#39;-&#39;</span><span class="p">))</span>            <span class="c1">// followed by a delimiter ...</span>
</span><span class='line'>               <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">day</span><span class="o">=</span>   <span class="n">repeat</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_d</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="n">delim</span>  <span class="c1">// and a day followed by the same delimiter ...</span>
</span><span class='line'>               <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">year</span><span class="o">=</span>  <span class="n">repeat</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_d</span> <span class="o">&gt;&gt;</span> <span class="n">_d</span><span class="p">));</span>    <span class="c1">// and the year.</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cmatch</span> <span class="n">what</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">regex_search</span><span class="p">(</span> <span class="n">str</span><span class="p">,</span> <span class="n">what</span><span class="p">,</span> <span class="n">date</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">what</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>     <span class="o">&lt;&lt;</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span> <span class="c1">// whole match</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">what</span><span class="p">[</span><span class="n">day</span><span class="p">]</span>   <span class="o">&lt;&lt;</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span> <span class="c1">// the day</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">what</span><span class="p">[</span><span class="n">month</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span> <span class="c1">// the month</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">what</span><span class="p">[</span><span class="n">year</span><span class="p">]</span>  <span class="o">&lt;&lt;</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span> <span class="c1">// the year</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">what</span><span class="p">[</span><span class="n">delim</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span> <span class="c1">// the delimiter</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Either way, I don’t think I can make a good Ruby programmer because I tend to write my C++ as if it was C with code-generation built into the compiler and stick to dataflow programming model rather than object-oriented one. And I love it. As my buddy often say, «Cobol programmer could write a Cobol program in pretty much any programming language.»</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Like Python]]></title>
    <link href="http://741MHz.com/cpp-like-python/"/>
    <updated>2013-05-06T00:00:00-04:00</updated>
    <id>http://741MHz.com/cpp-like-python</id>
    <content type="html"><![CDATA[<p>Today I ran into a somewhat classy piece of code that was analyzing user’s answer to a <a href="https://en.wikipedia.org/wiki/Yes%E2%80%93no_question">Yes or No question</a>. The idea was to compare input to various possible answers disregarding the case. The code looked something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;strings.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">bool</span> <span class="n">positive</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;Y&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">strcasecmp</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;Yes&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">strcasecmp</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;OK&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">strcasecmp</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;True&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">strcasecmp</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;Sure&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">strcasecmp</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;Of Course&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">strcasecmp</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;Why not?&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Could you please give me $100? &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">flush</span><span class="p">;</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">getline</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">positive</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">c_str</span><span class="p">()))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Thank you!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;We don&#39;t take «No» for an answer. Did you mean «Yes»?&quot;</span>
</span><span class='line'>                      <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What I wanted was to extend that funky <code>positive()</code> function to add more possibilities and it made me sad a little. Since I am writing Python scripts once in a while, I remembered about Python’s “in” statement. If I were to write this in Python, I’d do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">answer</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&#39;Could you please give me $100? &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">answer</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;y&#39;</span><span class="p">,</span> <span class="s">&#39;yes&#39;</span><span class="p">,</span> <span class="s">&#39;ok&#39;</span><span class="p">,</span> <span class="s">&#39;true&#39;</span><span class="p">,</span> <span class="s">&#39;sure&#39;</span><span class="p">,</span> <span class="s">&#39;of course&#39;</span><span class="p">,</span> <span class="s">&#39;why not?&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Thank You!&quot;</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;We don&#39;t take «No» for an answer. Did you mean «Yes»?&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I though, “Hey, C++ is by far a lot more powerful than Python syntax-wise, does this program really have to be that long and ugly?” Challenge accepted. A minute later, it looked even shorter than my Python version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">in</span><span class="p">(</span><span class="n">lower</span><span class="p">(</span><span class="n">raw_input</span><span class="p">(</span><span class="s">&quot;Could you please give me $100? &quot;</span><span class="p">)),</span>
</span><span class='line'>           <span class="s">&quot;y&quot;</span><span class="p">,</span> <span class="s">&quot;yes&quot;</span><span class="p">,</span> <span class="s">&quot;ok&quot;</span><span class="p">,</span> <span class="s">&quot;true&quot;</span><span class="p">,</span> <span class="s">&quot;sure&quot;</span><span class="p">,</span> <span class="s">&quot;of course&quot;</span><span class="p">,</span> <span class="s">&quot;why not?&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;We don&#39;t take «No» for an answer. Did you mean «Yes»?&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Thank you!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, of course this took some “magic” to work, which went to a reusable header. The complete program is a bit larger if put into a single source file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cctype&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">raw_input</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">prompt</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">answer</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">prompt</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">flush</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">getline</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="p">,</span> <span class="n">answer</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;&amp;</span><span class="n">lower</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;&amp;</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="n">c</span> <span class="o">:</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">tolower</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">bool</span> <span class="n">in</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="n">size_t</span> <span class="n">N</span><span class="p">,</span> <span class="k">typename</span> <span class="p">...</span><span class="n">Args</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">static</span> <span class="kt">bool</span> <span class="n">in</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">arg0</span><span class="p">)[</span><span class="n">N</span><span class="p">],</span> <span class="n">Args</span> <span class="o">&amp;&amp;</span> <span class="p">...</span><span class="n">argN</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s</span> <span class="o">==</span> <span class="n">arg0</span> <span class="o">||</span> <span class="n">in</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">Args</span><span class="o">&gt;</span><span class="p">(</span><span class="n">argN</span><span class="p">)...);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">in</span><span class="p">(</span><span class="n">lower</span><span class="p">(</span><span class="n">raw_input</span><span class="p">(</span><span class="s">&quot;Could you please give me $100? &quot;</span><span class="p">)),</span>
</span><span class='line'>               <span class="s">&quot;y&quot;</span><span class="p">,</span> <span class="s">&quot;yes&quot;</span><span class="p">,</span> <span class="s">&quot;ok&quot;</span><span class="p">,</span> <span class="s">&quot;true&quot;</span><span class="p">,</span> <span class="s">&quot;sure&quot;</span><span class="p">,</span> <span class="s">&quot;of course&quot;</span><span class="p">,</span> <span class="s">&quot;why not?&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;We don&#39;t take «No» for an answer. Did you mean «Yes»?&quot;</span>
</span><span class='line'>                  <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Thank you!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://en.wikipedia.org/wiki/Variadic_templates">Variadic templates</a> and <a href="http://en.wikipedia.org/wiki/Tail_call">tail recursion</a> can do magic (and compiler unrolls everything, I’ve checked).</p>

<p>I don’t want to start a language war or anything, but my opinion is that Python’s beauty is not in its simple or powerful syntax. Not at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How constant is a constant?]]></title>
    <link href="http://741MHz.com/constant/"/>
    <updated>2013-05-01T00:00:00-04:00</updated>
    <id>http://741MHz.com/constant</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="s">&quot;Bender is always sober.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Before: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">data</span> <span class="o">+</span> <span class="mi">17</span><span class="p">,</span> <span class="s">&quot;drunk!&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;After: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do you remember those good old days of DOS when programmers used to write code like this? This trick was working like a champ back then. Today, however, you will only see this kind of code in questions asked by students burning the midnight oil learning C by examples from some really old books and perhaps in some embedded systems running on processors without a memory protection unit. The rest of code monkeys like you and me do not write this kind of code because the compilers generate a warning, the language standard says it invokes an undefined behavior and at the end of the day this is a pretty straightforward way to generate a segmentation fault and have our program bite on a <code>SIGSEGV</code> signal sent by the operating system’s kernel and take a solid core dump.</p>

<p>Why this doesn’t work now and how it used to work before? It is really simple — string literals like one used in the example are placed in a data segment of the program, the operating system then loads the program into memory and makes that memory write-protected by the means of <a href="http://en.wikipedia.org/wiki/Memory_management_unit">MMU</a>. DOS was not doing this, and so it worked fine in DOS times. It also works today if operating system doesn’t take care of this and write-protect the memory, or if the CPU has no MMU.</p>

<p>This all sounds nice and dandy but it raises one good question — are any constant objects actually constant? Ask any <a href="http://en.wikipedia.org/wiki/High-level_programming_language">HLL</a> programmer if it is possible to modify a constant string literal on a modern Intel architecture. The answer would likely be «No!» At least my colleagues said so, and all of them are brilliant developers with decades of experience. But every time I hear — «No, that’s just not possible», I take it as a challenge and cannot rest until I prove that it is. Nothing is impossible. So trust no one. The truth is that in fact it is possible. Check this out (do not try to repeat this at work):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;sys/mman.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stddef.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">take_me_back_to_DOS_times</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="s">&quot;Bender is always sober.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Before: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">take_me_back_to_DOS_times</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">data</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Time machine appears to be broken!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span> <span class="o">+</span> <span class="mi">17</span><span class="p">,</span> <span class="s">&quot;drunk!&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;After: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">take_me_back_to_DOS_times</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pagesize</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">pg_off</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">page</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pagesize</span> <span class="o">=</span> <span class="n">sysconf</span><span class="p">(</span><span class="n">_SC_PAGE_SIZE</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pagesize</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pg_off</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span><span class="p">)</span><span class="n">ptr</span> <span class="o">%</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span><span class="p">)</span><span class="n">pagesize</span><span class="p">;</span>
</span><span class='line'>    <span class="n">page</span> <span class="o">=</span> <span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">ptr</span> <span class="o">-</span> <span class="n">pg_off</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mprotect</span><span class="p">(</span><span class="n">page</span><span class="p">,</span> <span class="n">len</span> <span class="o">+</span> <span class="n">pg_off</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_EXEC</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully, the code is self-explanatory. But if in doubt — read a manual page about <a href="http://man7.org/linux/man-pages/man2/mprotect.2.html"><code>mprotect</code></a> system call. I have touched on memory protection in the beginning and how operating system is using it to make string literals constant. The above example uses the reverse approach and makes the memory writable again (just like a time machine taking the program to old good DOS times). The thing is, our commodity computers work with only two kinds of memory — <a href="http://en.wikipedia.org/wiki/Static_random-access_memory">SRAM</a> memory of CPU caches, which is fast and expensive, and a DRAM, which is slow but very cheap. Neither of those two kinds of memory is read-only. Some of the processors have neither memory protection nor memory management units, and it won’t even be possible to write-protect the memory to make it “look” constant (which can also be unprotected as well, as we have just witnessed). Therefore, there are no constants from the hardware point of view.</p>

<p>So what’s up with all those constant objects in programming languages? Theoretical computer science has a concept of <a href="http://en.wikipedia.org/wiki/Const-correctness"><em>const-correctness</em></a>, which is incorporated into many different languages. For instance, Java takes a lot of care to not allow programmers to modify constant objects. So do C and C++, for example. But the keyword here is “theoretically”.</p>

<blockquote><p>In theory, there is no difference between theory and practice. But, in practice, there is.</p>

<p>— <a href="http://en.wikiquote.org/wiki/Jan_L._A._van_de_Snepscheut">Jan L. A. van de Snepscheut</a></p></blockquote>

<p>Unlike higher-level languages like Java, both C and C++ are down to hardware and it doesn’t take a genius to simply get a memory address of some object and manipulate memory directly. And when you do that, there is nothing constant. This is not to mention that there are some legitimate cases when casting away the const is fine and well defined.</p>

<p>Don’t get me wrong. I am not saying it doesn’t make any sense or you should not use it. You definitely should. And if you violate the const-correctness rules then you are definitely taking a lot of risk. Not because it won’t work but because it may work differently from how you expect it to work. If that happens, you are the only one to blame because the standard simply say — «I told you, that’s undefined behavior!» But when it comes to theoretical computer science and const-correctness, there is one thing that bothers me — it is implemented only halfway. Consider standard C++ strings, for example. Let’s say I have a string that is declared as constant. According to C++ rules, I cannot cast away that const-ness. However, we all know that <code>std::string</code> stores its contents in dynamic memory, and therefore the string itself is originally non-constant. Now, everybody can interpret the laws and standards differently, but I find this code pretty legitimate and do not see how it is an undefined behavior:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// OK, the ”str” is constant, but the pointer to</span>
</span><span class='line'>    <span class="c1">// string it holds was never declared as constant,</span>
</span><span class='line'>    <span class="c1">// so we can cast it away and modify its contents</span>
</span><span class='line'>    <span class="c1">// using ”const_cast”:</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="kt">char</span> <span class="o">*&gt;</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="mi">17</span><span class="p">,</span> <span class="s">&quot;drunk!&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;Bender is always sober.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also don’t like the idea of having somebody else modify my constant object using <a href="http://en.cppreference.com/w/cpp/language/const_cast"><code>const_cast</code></a> when I don’t want to, but C++ still says it is legal (because the object wasn’t originally declared as “const”):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">some_bad_function_yet_legal</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// OK, the ”str” is constant, but it wasn&#39;t declared</span>
</span><span class='line'>    <span class="c1">// as such in the first place, so we can use</span>
</span><span class='line'>    <span class="c1">// “const_cast” to change it:</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span> <span class="o">=</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;&gt;</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>    <span class="n">s</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;Bender is always sober.&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Call a function that accepts a constant reference,</span>
</span><span class='line'>    <span class="c1">// who would think it modifies the string, right?</span>
</span><span class='line'>    <span class="n">some_bad_function_yet_legal</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sometimes it is legal, sometimes it is pronounced undefined behavior. Either way you end up with a broken program unless somebody took care and employed the MMU to protect your memory. It becomes even worse if it isn’t your code and you have to debug and chase the error, which could be pretty hard to do (luckily, we can have GDB <a href="http://stackoverflow.com/questions/58851/can-i-set-a-breakpoint-on-memory-access-in-gdb">break on memory access</a>). As an experiment, I wrote a little custom allocator that can protect and unprotect the memory. It makes it possible, for example, to make your string constant in a way that an attempt to modify its content would have the process receive <code>SIGSEGV</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;sys/mman.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstddef&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdexcept&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">my_allocator</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span>    <span class="n">size_type</span><span class="p">;</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">ptrdiff_t</span> <span class="n">difference_type</span><span class="p">;</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">T</span><span class="o">*</span>             <span class="n">pointer</span><span class="p">;</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">const</span> <span class="n">T</span><span class="o">*</span>       <span class="n">const_pointer</span><span class="p">;</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">T</span><span class="o">&amp;</span>             <span class="n">reference</span><span class="p">;</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span>       <span class="n">const_reference</span><span class="p">;</span>
</span><span class='line'>    <span class="k">typedef</span> <span class="n">T</span>              <span class="n">value_type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">rebind</span> <span class="p">{</span> <span class="k">typedef</span> <span class="n">my_allocator</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">other</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pointer</span> <span class="n">allocate</span><span class="p">(</span><span class="n">size_type</span> <span class="n">n</span><span class="p">,</span> <span class="n">const_pointer</span> <span class="n">hint</span> <span class="o">=</span> <span class="n">nullptr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">pagesize</span> <span class="o">=</span> <span class="n">sysconf</span><span class="p">(</span><span class="n">_SC_PAGE_SIZE</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pagesize</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">&quot;Cannot obtain a page size&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">posix_memalign</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ptr</span><span class="p">,</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="p">)</span><span class="n">pagesize</span><span class="p">,</span> <span class="n">n</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">bad_alloc</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">pointer</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">deallocate</span><span class="p">(</span><span class="n">pointer</span> <span class="n">ptr</span><span class="p">,</span> <span class="n">size_type</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">free</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="kt">void</span> <span class="n">protect</span><span class="p">(</span><span class="n">const_pointer</span> <span class="n">ptr</span><span class="p">,</span> <span class="n">size_type</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">pagesize</span> <span class="o">=</span> <span class="n">sysconf</span><span class="p">(</span><span class="n">_SC_PAGE_SIZE</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pagesize</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">&quot;Cannot obtain a page size&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">uintptr_t</span> <span class="n">pg_off</span> <span class="o">=</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">uintptr_t</span><span class="p">)</span><span class="n">ptr</span> <span class="o">%</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">uintptr_t</span><span class="p">)</span><span class="n">pagesize</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">void</span> <span class="o">*</span><span class="n">page</span> <span class="o">=</span> <span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">ptr</span> <span class="o">-</span> <span class="n">pg_off</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">mprotect</span><span class="p">(</span><span class="n">page</span><span class="p">,</span> <span class="n">len</span> <span class="o">+</span> <span class="n">pg_off</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">&quot;Can&#39;t make memory read-only!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="kt">void</span> <span class="n">unprotect</span><span class="p">(</span><span class="n">const_pointer</span> <span class="n">ptr</span><span class="p">,</span> <span class="n">size_type</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">pagesize</span> <span class="o">=</span> <span class="n">sysconf</span><span class="p">(</span><span class="n">_SC_PAGE_SIZE</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pagesize</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">&quot;Cannot obtain a page size&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">uintptr_t</span> <span class="n">pg_off</span> <span class="o">=</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">uintptr_t</span><span class="p">)</span><span class="n">ptr</span> <span class="o">%</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">uintptr_t</span><span class="p">)</span><span class="n">pagesize</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">void</span> <span class="o">*</span><span class="n">page</span> <span class="o">=</span> <span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">ptr</span> <span class="o">-</span> <span class="n">pg_off</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">mprotect</span><span class="p">(</span><span class="n">page</span><span class="p">,</span> <span class="n">len</span> <span class="o">+</span> <span class="n">pg_off</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">&quot;Can&#39;t make memory read-only!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">bool</span> <span class="k">operator</span> <span class="o">==</span> <span class="p">(</span><span class="k">const</span> <span class="n">my_allocator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">my_allocator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">bool</span> <span class="k">operator</span> <span class="o">!=</span> <span class="p">(</span><span class="k">const</span> <span class="n">my_allocator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">my_allocator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span> <span class="kt">char</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">my_allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">my_string</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">some_bad_function</span><span class="p">(</span><span class="k">const</span> <span class="n">my_string</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// OK, the ”str” is constant, but the pointer to</span>
</span><span class='line'>    <span class="c1">// string it holds was never declared as constant,</span>
</span><span class='line'>    <span class="c1">// so we can cast it away and modify its contents</span>
</span><span class='line'>    <span class="c1">// using ”const_cast”:</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="kt">char</span> <span class="o">*&gt;</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">memcpy</span><span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="mi">17</span><span class="p">,</span> <span class="s">&quot;drunk!&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">const</span> <span class="n">my_string</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;Bender is always sober.&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">my_string</span><span class="o">::</span><span class="n">allocator_type</span><span class="o">::</span><span class="n">protect</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'>        <span class="n">some_bad_function</span><span class="p">(</span><span class="n">str</span><span class="p">);</span> <span class="c1">// This call results in SIGSEGV thanks to memory protection!</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="n">my_string</span><span class="o">::</span><span class="n">allocator_type</span><span class="o">::</span><span class="n">unprotect</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;ERROR: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This of course doesn’t make it impossible to unprotect that memory. To make it so, we’d need some more sophisticated access control that possibly employs protection rings, etc. But this is as far as I am willing to go. I wish we had something like this done automatically when we declare or pass variables around as “const”. But this is not going to happen because moaning with memory protection is very expensive operation that would, if implemented, slow down the program and make it pretty much unusable. Maybe one day we’d get a special hardware that would make it a reality. But for now, let’s keep shooting ourselves in the foot. It is «<a href="http://741MHz.com/c-vs-cxx/">C/C++</a>», after all!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why C++ Member Function Pointers Are 16 Bytes Wide]]></title>
    <link href="http://741MHz.com/wide-pointers/"/>
    <updated>2013-04-28T00:00:00-04:00</updated>
    <id>http://741MHz.com/wide-pointers</id>
    <content type="html"><![CDATA[<p>When talking about pointers, we generally assume it is something that can be represented by <code>void*</code> pointer which has a size of 8 bytes on the x86_64 architecture. For instance, here is an excerpt from a <a href="http://en.wikipedia.org/wiki/X86-64#Architectural_features">Wikipedia article about x86_64</a>:</p>

<blockquote><p>Pushes and pops on the stack are always in 8-byte strides, and <strong>pointers are 8 bytes wide</strong>.</p></blockquote>

<p>From the CPU point of view, pointer is nothing but a memory address, and all memory addresses are represented by 64-bit on the x86_64, so the assumption about 8 bytes is correct. It is also not that hard to verify this by simply printing sizes of pointers of different types:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span>
</span><span class='line'>        <span class="s">&quot;sizeof(int*)      == &quot;</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>        <span class="s">&quot;sizeof(double*)   == &quot;</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>        <span class="s">&quot;sizeof(void(*)()) == &quot;</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="p">)())</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compile and run the above program, and it will tell that all pointers are of size 8:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="err">$</span> <span class="n">uname</span> <span class="o">-</span><span class="n">i</span>
</span><span class='line'><span class="n">x86_64</span>
</span><span class='line'><span class="err">$</span> <span class="n">g</span><span class="o">++</span> <span class="o">-</span><span class="n">Wall</span> <span class="p">.</span><span class="o">/</span><span class="n">example</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span>
</span><span class='line'><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span>      <span class="o">==</span> <span class="mi">8</span>
</span><span class='line'><span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span>   <span class="o">==</span> <span class="mi">8</span>
</span><span class='line'><span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="p">)())</span> <span class="o">==</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>


<p>In C++, however, there is one exception — pointer to a member function. Interestingly enough, the size of a pointer to a member function is twice the size of any other pointer. This can be easily verified with this simple program which would print “16”:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">bar</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">&amp;</span><span class="n">Foo</span><span class="o">::</span><span class="n">bar</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Does this mean that Wikipedia is wrong? No, not at all. From the hardware point of view all pointers are still 8 bytes wide. So what is a pointer to a member function then? It is a feature of the C++ language, a concept that does not map directly to hardware and is being implemented in runtime (by compilers) resulting in a slight overhead that oftentimes incurs a performance penalty. The C++ language specification is not concerned with implementation details very much and there is nothing explaining this type of pointers. Luckily, there is Itanium C++ ABI specification that devotes itself to standardizing implementation details of the C++ runtime — it explains, for example, how virtual tables, RTTI and exceptions are implemented, and it also explains member pointers in §2.3:</p>

<blockquote><p>A pointer to member function is a pair as follows:</p>

<p>ptr:</p>

<p>For a non-virtual function, this field is a simple function pointer. For a virtual function, it is 1 plus the virtual table offset (in bytes) of the function, represented as a ptrdiff_t. The value zero represents a NULL pointer, independent of the adjustment field value below.</p>

<p>adj:</p>

<p>The required adjustment to this, represented as a ptrdiff_t.</p></blockquote>

<p>So a member function pointer is 16 bytes instead of 8 because along with a simple function pointer it also must store the information about how to adjust “this” pointer (something that is always passed to non-static member functions implicitly). What ABI spec does not say is why and when such an adjustment is required. It might not be that obvious at first. Let’s take a look at the following class hierarchy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">struct</span> <span class="n">A</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">foo</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">pad0</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">B</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">bar</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">pad2</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">C</span> <span class="o">:</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span>
</span><span class='line'><span class="p">{</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both A and B have a non-static member functions and a data member. Both of those methods can access data member of their class through an implicitly passed “this” pointer. In order to access any data member, the offset from the base address of the class object containing it, represented as a ptrdiff_t, is applied to “this” pointer. Things start to get complicated with multiple inheritance. What happens when we have a class C inherit both A and B? The compiler would take A and B and place them together in memory, where B comes after A. Therefore, methods of class A and methods of class B would “see” a different value of “this” pointer. This can be easily verified in practice, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">A</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">foo</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;A&#39;s this: &quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">pad0</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">B</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">bar</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;B&#39;s this: &quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">pad2</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">C</span> <span class="o">:</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span>
</span><span class='line'><span class="p">{</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">C</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'>    <span class="n">obj</span><span class="p">.</span><span class="n">foo</span><span class="p">();</span>
</span><span class='line'>    <span class="n">obj</span><span class="p">.</span><span class="n">bar</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="err">$</span> <span class="n">g</span><span class="o">++</span> <span class="o">-</span><span class="n">Wall</span> <span class="o">-</span><span class="n">o</span> <span class="n">test</span> <span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">cc</span> <span class="o">&amp;&amp;</span> <span class="p">.</span><span class="o">/</span><span class="n">test</span>
</span><span class='line'><span class="n">A</span><span class="err">&#39;</span><span class="n">s</span> <span class="k">this</span><span class="o">:</span> <span class="mh">0x7fff57ddfb48</span>
</span><span class='line'><span class="n">B</span><span class="err">&#39;</span><span class="n">s</span> <span class="k">this</span><span class="o">:</span> <span class="mh">0x7fff57ddfb68</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, “this” pointer’s value passed to B’s method is greater than one passed to A’s method by 32 bytes – an exact size of class A. But what happens when we have the following function that calls a method of class C by pointer?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">call_by_ptr</span><span class="p">(</span><span class="k">const</span> <span class="n">C</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="n">C</span><span class="o">::*</span><span class="n">mem_func</span><span class="p">)()</span> <span class="k">const</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="o">*</span><span class="n">mem_func</span><span class="p">)();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Depending on what method is being called, a different value of “this” must be passed. But the “call_by_ptr” function doesn’t know whether it got a pointer to “foo()” or a pointer to “bar()”. The only time when this information is available is when address of either of those methods is taken. And that’s why a pointer to a member function also has information about how to adjust “this” before calling a method. Now, let’s put all of that together into a simple program that demonstrates what is going on “under the hood”:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">A</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">foo</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;A&#39;s this:</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">pad0</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">B</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">bar</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;B&#39;s this:</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="k">this</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">pad2</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">C</span> <span class="o">:</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span>
</span><span class='line'><span class="p">{</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">call_by_ptr</span><span class="p">(</span><span class="k">const</span> <span class="n">C</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="n">C</span><span class="o">::*</span><span class="n">mem_func</span><span class="p">)()</span> <span class="k">const</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">memcpy</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mem_func</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mem_func</span><span class="p">));</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;------------------------------</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>        <span class="s">&quot;Object ptr:</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">obj</span> <span class="o">&lt;&lt;</span>
</span><span class='line'>        <span class="s">&quot;</span><span class="se">\n</span><span class="s">Function ptr:</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span>
</span><span class='line'>        <span class="s">&quot;</span><span class="se">\n</span><span class="s">Pointer adj:</span><span class="se">\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="o">*</span><span class="n">mem_func</span><span class="p">)();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">C</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'>    <span class="n">call_by_ptr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">C</span><span class="o">::</span><span class="n">foo</span><span class="p">);</span>
</span><span class='line'>    <span class="n">call_by_ptr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">C</span><span class="o">::</span><span class="n">bar</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above program prints the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">------------------------------</span>
</span><span class='line'><span class="n">Object</span> <span class="nl">ptr:</span>    <span class="mh">0x7fff535dfb28</span>
</span><span class='line'><span class="n">Function</span> <span class="nl">ptr:</span>  <span class="mh">0x10c620cac</span>
</span><span class='line'><span class="n">Pointer</span> <span class="nl">adj:</span>   <span class="mi">0</span>
</span><span class='line'><span class="n">A</span><span class="err">&#39;</span><span class="n">s</span> <span class="k">this</span><span class="o">:</span>    <span class="mh">0x7fff535dfb28</span>
</span><span class='line'><span class="o">------------------------------</span>
</span><span class='line'><span class="n">Object</span> <span class="nl">ptr:</span>    <span class="mh">0x7fff535dfb28</span>
</span><span class='line'><span class="n">Function</span> <span class="nl">ptr:</span>  <span class="mh">0x10c620cfe</span>
</span><span class='line'><span class="n">Pointer</span> <span class="nl">adj:</span>   <span class="mh">0x20</span>
</span><span class='line'><span class="n">B</span><span class="err">&#39;</span><span class="n">s</span> <span class="k">this</span><span class="o">:</span>    <span class="mh">0x7fff535dfb48</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully that clears things up a little bit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Exceptions, Stack Trace and GDB Automation]]></title>
    <link href="http://741MHz.com/throw-stacktrace/"/>
    <updated>2013-04-16T00:00:00-04:00</updated>
    <id>http://741MHz.com/throw-stacktrace</id>
    <content type="html"><![CDATA[<p>The tricky part about any exception is that the stack is already unwinded by the time exception is caught and there is no easy way to figure out from which part of the code it was thrown. Have you ever caught an exception that has no information that can be used to find where the problem is? The one that says «this should never happen» or even has no text at all. Hopefully, this doesn’t happen to you very often. But if you work with a large C++ codebase with tons of different components written by different developers then sooner or later it would definitely happen. It can be quite disappointing and take a lot of time going through the pile of somebody else’s code trying to figure out what went wrong. So you must be prepared. I might be a little bit unlucky in this regard – this happened to me a lot, so I decided to share a few ways for overcoming this type of situations.</p>

<h2>Backtrace API</h2>

<p>Quite a few C runtime libraries provide a mechanism to examine the current thread’s call stack. It consists of three functions declared in <code>execinfo.h</code> header:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">backtrace</span><span class="p">(</span><span class="kt">void</span><span class="o">**</span> <span class="n">array</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span><span class="o">**</span> <span class="nf">backtrace_symbols</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="k">const</span><span class="o">*</span> <span class="n">array</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">backtrace_symbols_fd</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="k">const</span><span class="o">*</span> <span class="n">array</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fd</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using those functions, one can access the stack trace at any given point of program execution. Here is a simple example that prints the stack to standard output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;execinfo.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">callstack</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">frames</span> <span class="o">=</span> <span class="o">::</span><span class="n">backtrace</span><span class="p">(</span>
</span><span class='line'>        <span class="n">callstack</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">callstack</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">callstack</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">**</span><span class="n">symbols</span> <span class="o">=</span> <span class="o">::</span><span class="n">backtrace_symbols</span><span class="p">(</span><span class="n">callstack</span><span class="p">,</span> <span class="n">frames</span><span class="p">);</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Stack Trace:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">frames</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;\t&#39;</span> <span class="o">&lt;&lt;</span> <span class="n">symbols</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">free</span><span class="p">(</span><span class="n">symbols</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method can be used to get the stack trace before the exception is thrown and before the stack is unwinded. In order to do that, one could define a custom exception class that grabs the stack trace in its constructor. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;execinfo.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdexcept&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Exception</span> <span class="o">:</span> <span class="k">public</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Exception</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">grab_backtrace</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Exception</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">reason</span><span class="p">)</span> <span class="o">:</span> <span class="n">reason_</span><span class="p">(</span><span class="n">reason</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">reason_</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">grab_backtrace</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Exception</span><span class="p">()</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">what</span><span class="p">()</span> <span class="k">const</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">reason_</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">grab_backtrace</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="o">*</span><span class="n">callstack</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">frames</span> <span class="o">=</span> <span class="o">::</span><span class="n">backtrace</span><span class="p">(</span>
</span><span class='line'>            <span class="n">callstack</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">callstack</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">callstack</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span>
</span><span class='line'>        <span class="kt">char</span> <span class="o">**</span><span class="n">symbols</span> <span class="o">=</span> <span class="n">backtrace_symbols</span><span class="p">(</span><span class="n">callstack</span><span class="p">,</span> <span class="n">frames</span><span class="p">);</span>
</span><span class='line'>        <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">reason_</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;Stack Trace:&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">frames</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">reason_</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n\t</span><span class="s">&quot;</span><span class="p">).</span><span class="n">append</span><span class="p">(</span><span class="n">symbols</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span> <span class="o">&amp;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">free</span><span class="p">(</span><span class="n">symbols</span><span class="p">);</span>
</span><span class='line'>            <span class="k">throw</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">free</span><span class="p">(</span><span class="n">symbols</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">reason_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">do_something</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">do_something</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="o">++</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">Exception</span><span class="p">(</span><span class="s">&quot;Recursion limit exceeded&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">do_something</span><span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">std</span><span class="o">::</span><span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="n">argc</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far so good! Here is an example of running the above program:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="err">$</span> <span class="n">clang</span><span class="o">++</span> <span class="o">-</span><span class="n">Wall</span> <span class="o">-</span><span class="n">pedantic</span> <span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">cpp</span> <span class="o">&amp;&amp;</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span> <span class="mi">3</span>
</span><span class='line'><span class="n">Recursion</span> <span class="n">limit</span> <span class="n">exceeded</span>
</span><span class='line'><span class="n">Stack</span> <span class="nl">Trace:</span>
</span><span class='line'>  <span class="mi">0</span>   <span class="n">a</span><span class="p">.</span><span class="n">out</span>                <span class="mh">0x00000001034fa7af</span> <span class="n">_ZN9Exception14grab_backtraceEv</span> <span class="o">+</span> <span class="mi">63</span>
</span><span class='line'>  <span class="mi">1</span>   <span class="n">a</span><span class="p">.</span><span class="n">out</span>                <span class="mh">0x00000001034fa6f4</span> <span class="n">_ZN9ExceptionC2ERKSs</span> <span class="o">+</span> <span class="mi">116</span>
</span><span class='line'>  <span class="mi">2</span>   <span class="n">a</span><span class="p">.</span><span class="n">out</span>                <span class="mh">0x00000001034fa56d</span> <span class="n">_ZN9ExceptionC1ERKSs</span> <span class="o">+</span> <span class="mi">29</span>
</span><span class='line'>  <span class="mi">3</span>   <span class="n">a</span><span class="p">.</span><span class="n">out</span>                <span class="mh">0x00000001034fa33c</span> <span class="n">_Z12do_somethingii</span> <span class="o">+</span> <span class="mi">140</span>
</span><span class='line'>  <span class="mi">4</span>   <span class="n">a</span><span class="p">.</span><span class="n">out</span>                <span class="mh">0x00000001034fa2df</span> <span class="n">_Z12do_somethingii</span> <span class="o">+</span> <span class="mi">47</span>
</span><span class='line'>  <span class="mi">5</span>   <span class="n">a</span><span class="p">.</span><span class="n">out</span>                <span class="mh">0x00000001034fa42d</span> <span class="n">main</span> <span class="o">+</span> <span class="mi">93</span>
</span><span class='line'>  <span class="mi">6</span>   <span class="n">libdyld</span><span class="p">.</span><span class="n">dylib</span>        <span class="mh">0x00007fff935e27e1</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, there are a few problems with this approach. Firstly, there no file names and no line numbers. Secondly, this approach requires to use the “Exception” class as a base class of all exceptions in the project (well, at least for those you want to get a stack trace for), which indeed can be very problematic if not impossible. But even if all of the above is fine with you, this approach may still not work out for you because frame pointers can be omitted in optimized builds. For example, omitting frame pointers is a default behavior of recent GCC compilers for x86_64 platforms (which can also be turned on/off using <code>-fomit-frame-pointer</code> option). Our call stack becomes useless if frame pointers are omitted:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="err">$</span> <span class="n">clang</span><span class="o">++</span> <span class="o">-</span><span class="n">Wall</span> <span class="o">-</span><span class="n">fomit</span><span class="o">-</span><span class="n">frame</span><span class="o">-</span><span class="n">pointer</span> <span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">cpp</span> <span class="o">&amp;&amp;</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span> <span class="mi">3</span>
</span><span class='line'><span class="n">Recursion</span> <span class="n">limit</span> <span class="n">exceeded</span>
</span><span class='line'><span class="n">Stack</span> <span class="nl">Trace:</span>
</span><span class='line'>  <span class="mi">0</span>   <span class="n">a</span><span class="p">.</span><span class="n">out</span>                <span class="mh">0x0000000105eca82d</span> <span class="n">_ZN9Exception14grab_backtraceEv</span> <span class="o">+</span> <span class="mi">61</span>
</span></code></pre></td></tr></table></div></figure>


<p>Depending on the system, there could be other requirements in order to make this API work. For example, GNU runtime requires you to specify “-rdynamic” flag to instruct the linker to add all symbols, not only used ones, to the dynamic symbol table. So don’t forget to read a manual page for this API in your system before using this.</p>

<h2>__FILE__ and __LINE__</h2>

<p>C++ has many <a href="http://gcc.gnu.org/onlinedocs/cpp/Standard-Predefined-Macros.html">standard predefined macros</a>. <code>__FILE__</code> and <code>__LINE__</code> macros are those two that come handy in order to identify a point in a program:</p>

<p><code>__FILE__</code>  macros expands to the name of the current input file, in the form of a C string constant. This is the path by which the preprocessor opened the file, not the short name specified in ‘#include’ or as the input file name argument. For example, “/usr/local/include/myheader.h” is a possible expansion of this macros.</p>

<p><code>__LINE__</code> macros expands to the current input line number, in the form of a decimal integer constant. While we call it a predefined macro, it’s a pretty strange macro, since its “definition” changes with each new line of source code.|</p>

<p>Using the above macros, it is possible to include both file and line information along with exception’s text, or maybe as additional member fields of any given exception class. There are multiple choices. Here is an example of one of possible implementations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;stdexcept&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Exception</span> <span class="o">:</span> <span class="k">public</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">template</span> <span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">location_len</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kr">inline</span> <span class="n">Exception</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">location</span><span class="p">)[</span><span class="n">location_len</span><span class="p">],</span>
</span><span class='line'>                     <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">reason</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="n">reason</span> <span class="o">+</span> <span class="n">location</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Exception</span><span class="p">()</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MY_THROW_STR_I(Arg) #Arg</span>
</span><span class='line'><span class="cp">#define MY_THROW_STR(Arg) MY_THROW_STR_I(Arg)</span>
</span><span class='line'><span class="cp">#define MY_THROW(Type, ...)                                             \</span>
</span><span class='line'><span class="cp">    do {                                                                \</span>
</span><span class='line'><span class="cp">        throw Type(&quot; @ &quot;; __FILE__ &quot;;:&quot; MY_THROW_STR(__LINE__), ##__VA_ARGS__); \</span>
</span><span class='line'><span class="cp">    } while (0)</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">do_something</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">do_something</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="o">++</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">MY_THROW</span><span class="p">(</span><span class="n">Exception</span><span class="p">,</span> <span class="s">&quot;Recursion limit exceeded&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">do_something</span><span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">std</span><span class="o">::</span><span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="n">argc</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the exception is caught and printed, the source file name and a line numbers are included, which makes it easy to trace the origins of such an exception:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span>
</span><span class='line'><span class="n">Recursion</span> <span class="n">limit</span> <span class="n">exceeded</span> <span class="err">@</span> <span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="nl">cpp:</span><span class="mi">26</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, this does not include a stack trace. But it works if frame pointers are omitted, tail recursion optimization is applied, or even if all symbol names are stripped out of the executable. There is one problem though — it may not be useful without a stack trace in certain cases. For example, one may declare a helper function used to throw an exception, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">__attribute__</span><span class="p">((</span><span class="n">noreturn</span><span class="p">))</span> <span class="kt">void</span> <span class="n">report_error</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">reason</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MY_THROW</span><span class="p">(</span><span class="n">Exception</span><span class="p">,</span> <span class="n">reason</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In that case, the file and line of the exception origins will always be the same even if it was called from different places in the program. So this approach is also not a cure for all diseases.</p>

<h2>GDB Scripting: Automatic Backtrace on Exception Catchpoints</h2>

<p>And the last but not least method is to use <a href="http://www.gnu.org/software/gdb/">GDB debugger</a>. If you are not familiar with this debugger, you definitely should spend some time learning it. It is one of the most powerful tools out there. And it comes extremely handy when dealing with exceptions.</p>

<p><a href="http://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html">GDB provides special catch points</a>, including those to catch exceptions being thrown, caught or even unhandled. We are interested in exceptions that are being thrown and so must use <code>catch throw</code> command. Here is an example of manually using GDB in order to examine a stack trace before the exception is thrown:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="err">$</span> <span class="n">gdb</span> <span class="o">-</span><span class="n">args</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span> <span class="mi">5</span>
</span><span class='line'><span class="n">Reading</span> <span class="n">symbols</span> <span class="n">from</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span><span class="p">...</span><span class="n">done</span><span class="p">.</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="k">catch</span> <span class="k">throw</span>
</span><span class='line'><span class="n">Catchpoint</span> <span class="mi">1</span> <span class="p">(</span><span class="k">throw</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">run</span>
</span><span class='line'><span class="n">Starting</span> <span class="nl">program:</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span> <span class="mi">5</span>
</span><span class='line'><span class="n">Catchpoint</span> <span class="mi">1</span> <span class="p">(</span><span class="n">exception</span> <span class="n">thrown</span><span class="p">),</span> <span class="n">__cxxabiv1</span><span class="o">::</span><span class="n">__cxa_throw</span> <span class="p">(</span><span class="n">obj</span><span class="o">=</span><span class="mh">0x6030d0</span><span class="p">,</span> <span class="n">tinfo</span><span class="o">=</span><span class="mh">0x401420</span> <span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="mh">0x401198</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">at</span> <span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="n">libstdc</span><span class="o">++-</span><span class="n">v3</span><span class="o">/</span><span class="n">libsupc</span><span class="o">++/</span><span class="n">eh_throw</span><span class="p">.</span><span class="nl">cc:</span><span class="mi">70</span>
</span><span class='line'><span class="mi">70</span>      <span class="n">header</span><span class="o">-&gt;</span><span class="n">exc</span><span class="p">.</span><span class="n">unexpectedHandler</span> <span class="o">=</span> <span class="n">__unexpected_handler</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">backtrace</span>
</span><span class='line'><span class="cp">#0  __cxxabiv1::__cxa_throw (obj=0x6030d0, tinfo=0x401420 , dest=0x401198 )</span>
</span><span class='line'>    <span class="n">at</span> <span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="n">libstdc</span><span class="o">++-</span><span class="n">v3</span><span class="o">/</span><span class="n">libsupc</span><span class="o">++/</span><span class="n">eh_throw</span><span class="p">.</span><span class="nl">cc:</span><span class="mi">70</span>
</span><span class='line'><span class="cp">#1  0x0000000000400fee in report_error (reason=&quot;Recursion limit exceeded&quot;) at ./test.cpp:25</span>
</span><span class='line'><span class="cp">#2  0x000000000040105d in do_something (n=5, i=5) at ./test.cpp:33</span>
</span><span class='line'><span class="cp">#3  0x000000000040102e in do_something (n=5, i=5) at ./test.cpp:31</span>
</span><span class='line'><span class="cp">#4  0x000000000040102e in do_something (n=5, i=4) at ./test.cpp:31</span>
</span><span class='line'><span class="cp">#5  0x000000000040102e in do_something (n=5, i=3) at ./test.cpp:31</span>
</span><span class='line'><span class="cp">#6  0x00000000004010cb in main (argc=2, argv=0x7fffffffe1f8) at ./test.cpp:40</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="k">continue</span>
</span><span class='line'><span class="n">Continuing</span><span class="p">.</span>
</span><span class='line'><span class="n">Recursion</span> <span class="n">limit</span> <span class="n">exceeded</span> <span class="err">@</span> <span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="nl">cpp:</span><span class="mi">25</span>
</span><span class='line'><span class="p">[</span><span class="n">Inferior</span> <span class="mi">1</span> <span class="p">(</span><span class="n">process</span> <span class="mi">3865</span><span class="p">)</span> <span class="n">exited</span> <span class="n">with</span> <span class="n">code</span> <span class="mo">01</span><span class="p">]</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">quit</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first, this might sound silly because in the real world a program may encounter a lot of exceptions and manually typing “backtrace” and “continue” every type that happens is nothing but a waste of time. But there is one trick — GDB can be automated. There are two ways of doing this — use a batch mode or a more sophisticated <a href="http://sourceware.org/gdb/wiki/PythonGdbTutorial">Python scripting</a>. For our purpose, a batch script will do just fine. Here is a simple script that turns off verbose output and paging, sets up a <code>throw</code> catch point and executes <code>backtrace</code> + <code>continue</code> commands every time the event is caught:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">set</span> <span class="n">verbose</span> <span class="n">off</span>
</span><span class='line'><span class="n">set</span> <span class="n">pagination</span> <span class="n">off</span>
</span><span class='line'><span class="k">catch</span> <span class="k">throw</span>
</span><span class='line'><span class="n">commands</span>
</span><span class='line'><span class="n">backtrace</span>
</span><span class='line'><span class="k">continue</span>
</span><span class='line'><span class="n">end</span>
</span><span class='line'><span class="n">run</span>
</span><span class='line'><span class="n">quit</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save the above script into a file, and then run GDB in batch mode telling it to use that file, which in my case is called “gdb_bt_script”:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="err">$</span> <span class="n">gdb</span> <span class="o">-</span><span class="n">n</span> <span class="o">-</span><span class="n">batch</span> <span class="o">-</span><span class="n">x</span> <span class="p">.</span><span class="o">/</span><span class="n">gdb_bt_script</span> <span class="o">--</span><span class="n">args</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span> <span class="mi">5</span>
</span><span class='line'><span class="n">Catchpoint</span> <span class="mi">1</span> <span class="p">(</span><span class="k">throw</span><span class="p">)</span>
</span><span class='line'><span class="n">Catchpoint</span> <span class="mi">1</span> <span class="p">(</span><span class="n">exception</span> <span class="n">thrown</span><span class="p">),</span> <span class="n">__cxxabiv1</span><span class="o">::</span><span class="n">__cxa_throw</span> <span class="p">(</span><span class="n">obj</span><span class="o">=</span><span class="mh">0x6030d0</span><span class="p">,</span> <span class="n">tinfo</span><span class="o">=</span><span class="mh">0x401420</span> <span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="mh">0x401198</span> <span class="p">)</span> <span class="n">at</span> <span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="n">libstdc</span><span class="o">++-</span><span class="n">v3</span><span class="o">/</span><span class="n">libsupc</span><span class="o">++/</span><span class="n">eh_throw</span><span class="p">.</span><span class="nl">cc:</span><span class="mi">70</span>
</span><span class='line'><span class="mi">70</span>      <span class="n">header</span><span class="o">-&gt;</span><span class="n">exc</span><span class="p">.</span><span class="n">unexpectedHandler</span> <span class="o">=</span> <span class="n">__unexpected_handler</span><span class="p">;</span>
</span><span class='line'><span class="cp">#0  __cxxabiv1::__cxa_throw (obj=0x6030d0, tinfo=0x401420 , dest=0x401198 ) at ../../../../libstdc++-v3/libsupc++/eh_throw.cc:70</span>
</span><span class='line'><span class="cp">#1  0x0000000000400fee in report_error (reason=&quot;Recursion limit exceeded&quot;) at ./test.cpp:25</span>
</span><span class='line'><span class="cp">#2  0x000000000040105d in do_something (n=5, i=5) at ./test.cpp:33</span>
</span><span class='line'><span class="cp">#3  0x000000000040102e in do_something (n=5, i=5) at ./test.cpp:31</span>
</span><span class='line'><span class="cp">#4  0x000000000040102e in do_something (n=5, i=4) at ./test.cpp:31</span>
</span><span class='line'><span class="cp">#5  0x000000000040102e in do_something (n=5, i=3) at ./test.cpp:31</span>
</span><span class='line'><span class="cp">#6  0x00000000004010cb in main (argc=2, argv=0x7fffffffe1f8) at ./test.cpp:40</span>
</span><span class='line'><span class="n">Recursion</span> <span class="n">limit</span> <span class="n">exceeded</span> <span class="err">@</span> <span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="nl">cpp:</span><span class="mi">25</span>
</span><span class='line'><span class="p">[</span><span class="n">Inferior</span> <span class="mi">1</span> <span class="p">(</span><span class="n">process</span> <span class="mi">5849</span><span class="p">)</span> <span class="n">exited</span> <span class="n">with</span> <span class="n">code</span> <span class="mo">01</span><span class="p">]</span>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whoala! Now we get a full stack trace including function parameters, their values, and file and line numbers. If the program is optimized and has no debug symbols, however, we get a little bit less:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="err">$</span> <span class="n">gdb</span> <span class="o">-</span><span class="n">n</span> <span class="o">-</span><span class="n">batch</span> <span class="o">-</span><span class="n">x</span> <span class="p">.</span><span class="o">/</span><span class="n">gdb_bt_script</span> <span class="o">--</span><span class="n">args</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span> <span class="mi">5</span>
</span><span class='line'><span class="n">Catchpoint</span> <span class="mi">1</span> <span class="p">(</span><span class="k">throw</span><span class="p">)</span>
</span><span class='line'><span class="n">Catchpoint</span> <span class="mi">1</span> <span class="p">(</span><span class="n">exception</span> <span class="n">thrown</span><span class="p">),</span> <span class="n">__cxxabiv1</span><span class="o">::</span><span class="n">__cxa_throw</span> <span class="p">(</span><span class="n">obj</span><span class="o">=</span><span class="mh">0x6030d0</span><span class="p">,</span> <span class="n">tinfo</span><span class="o">=</span><span class="mh">0x401470</span> <span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="mh">0x401270</span> <span class="p">)</span> <span class="n">at</span> <span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="n">libstdc</span><span class="o">++-</span><span class="n">v3</span><span class="o">/</span><span class="n">libsupc</span><span class="o">++/</span><span class="n">eh_throw</span><span class="p">.</span><span class="nl">cc:</span><span class="mi">70</span>
</span><span class='line'><span class="mi">70</span>      <span class="n">header</span><span class="o">-&gt;</span><span class="n">exc</span><span class="p">.</span><span class="n">unexpectedHandler</span> <span class="o">=</span> <span class="n">__unexpected_handler</span><span class="p">;</span>
</span><span class='line'><span class="cp">#0  __cxxabiv1::__cxa_throw (obj=0x6030d0, tinfo=0x401470 , dest=0x401270 ) at ../../../../libstdc++-v3/libsupc++/eh_throw.cc:70</span>
</span><span class='line'><span class="cp">#1  0x00000000004010a8 in report_error(std::string const&amp;) ()</span>
</span><span class='line'><span class="cp">#2  0x000000000040121e in do_something(int, int) ()</span>
</span><span class='line'><span class="cp">#3  0x0000000000400ef6 in main ()</span>
</span><span class='line'><span class="n">Recursion</span> <span class="n">limit</span> <span class="n">exceeded</span> <span class="err">@</span> <span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="nl">cpp:</span><span class="mi">25</span>
</span><span class='line'><span class="p">[</span><span class="n">Inferior</span> <span class="mi">1</span> <span class="p">(</span><span class="n">process</span> <span class="mi">1877</span><span class="p">)</span> <span class="n">exited</span> <span class="n">with</span> <span class="n">code</span> <span class="mo">01</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yet still a lot more than we get using backtrace API. But the most beautiful part is that this method does not require any code changes and works for pretty much any binary.</p>

<h2>The End</h2>

<p>Those were three fundamental methods that can help to identify a place where exception is thrown from. They are not mutually exclusive. Each has its cons and pros. I personally prefer to use GDB because it doesn’t require a code change, but use other two methods as well, depending on a situation. It is up to you to decide which one to use.</p>

<p>Hope it helps and Good Luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Different Languages - C and C++]]></title>
    <link href="http://741MHz.com/c-vs-cxx/"/>
    <updated>2013-04-15T00:00:00-04:00</updated>
    <id>http://741MHz.com/c-vs-cxx</id>
    <content type="html"><![CDATA[<p>Good news everyone, we are looking for a C/C++ developer! Wait, that’s not good news at all!</p>

<p>You see, the term «C/C++» is likely to piss off those who actually know both C and C++. On the other hand, majority of C++ developers mistakenly think they know C. And it would take at least a year or two for a C developer to learn C++. Yet «C/C++» is mentioned in way too many job postings. So who exactly are we looking for?</p>

<p>Let’s start by asking a simple question — what would the main() function return in the below C/C++ program?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">extern</span> <span class="kt">int</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">T</span> <span class="p">{</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span> <span class="kt">int</span> <span class="n">b</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="sc">&#39;T&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course it depends on architecture. But let’s assume that size of int is 4 bytes and structure T has no extra padding. The code is legal in both C and C++. Yet the correct answer depends on whether this is a C or C++ program. If it is a C program then the correct answer is 8. In case of C++ the answer is 9.</p>

<h2>C is not C++</h2>

<p>C++ originated back in 1979 and at that time it was based on C. It wasn’t even called C++ — its first name was «C with Classes». The language was renamed to «C++» only in 1983. At that time, both languages were closely related. However, from that point both C and C++ took a different evolution path and today, some 30+ years later, both languages are as different as Objective-C and C++, Java and C#, Python and Ruby, OCaml and F#. There is only one catch — the basic syntax of both is very similar to such a degree that it is possible to have a program that is both legal C and legal C++, which may or may not behave differently. Generally, everyone knows that C++ has tons of features that are not available in C but any C code can be compiled as C++. Therefore, C++ developers also think that they know C. And in most cases they are dangerously mistaken. Below is a list of the most common features of C language serving as traps for C++ fellows.</p>

<h3>Casting void pointer</h3>

<p>In C, void pointer can be implicitly casted to a pointer of any other type. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="mh">0xDEADDEAD</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">i</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>C developers use this convenient feature all the time. However, any C++ compiler would choke on that and die.</p>

<h3>Implicit function declaration</h3>

<p>In C, it is not always necessary to declare a function before using it. Using an undeclared function implicitly declares it. This feature has been declared deprecated since 1999 but is still used here and there. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">foo</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A perfectly legal C program that is illegal C++:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">gcc</span> <span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="err">$</span> <span class="n">g</span><span class="o">++</span> <span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">cpp</span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">cpp</span><span class="o">:</span> <span class="n">In</span> <span class="n">function</span> <span class="err">‘</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span><span class="err">’</span><span class="o">:</span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">cpp</span><span class="o">:</span><span class="mi">3</span><span class="o">:</span> <span class="n">error</span><span class="o">:</span> <span class="err">‘</span><span class="n">foo</span><span class="err">’</span> <span class="n">was</span> <span class="n">not</span> <span class="n">declared</span> <span class="n">in</span> <span class="n">this</span> <span class="n">scope</span>
</span></code></pre></td></tr></table></div></figure>


<h3>No arguments vs any arguments</h3>

<p>In C, function prototype without parameters imply that function accepts any number of arguments and it is legal to call such a function with one or more arguments. In C++, function prototype without parameters means that function accepts no arguments and it is illegal to call such function with arguments. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">foo</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above is absolutely legal C code that won’t compile as C++. As a matter of fact, I haven’t seen many C++ developers who can tell the difference between <code>void foo();</code> and <code>void foo(void);</code></p>

<h3>Crossing initialization with goto or switch</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="nl">out:</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above is a perfectly legal C code but is rejected by C++ compiler as C++ does not allow to cross initialization:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">clang</span><span class="o">++</span> <span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">cpp</span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">cpp</span><span class="o">:</span><span class="mi">3</span><span class="o">:</span><span class="mi">5</span><span class="o">:</span> <span class="n">error</span><span class="o">:</span> <span class="k">goto</span> <span class="n">into</span> <span class="n">protected</span> <span class="n">scope</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="o">^</span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">cpp</span><span class="o">:</span><span class="mi">4</span><span class="o">:</span><span class="mi">9</span><span class="o">:</span> <span class="n">note</span><span class="o">:</span> <span class="n">jump</span> <span class="n">bypasses</span> <span class="n">variable</span> <span class="n">initialization</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="o">^</span>
</span><span class='line'><span class="mi">1</span> <span class="n">error</span> <span class="n">generated</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Keywords clash</h3>

<p>C++ would fail to compile any legal C code that happen to use C++ keywords:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">old</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">new</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>More! More! More!</h2>

<p>Oh, you knew that? If you knew all of the above and still consider yourself a “C/C++” developer, hold on a second. Name at least 10 more differences. Huh?</p>

<ul>
<li>In C++, comma operator can yield an l-value. In C it cannot.</li>
<li>C does not allow duplicate typedefs while C++ does.</li>
<li>C++ does not allow non-prototype function declarations while C does.</li>
<li>C allows struct, union and enum to be declared in function prototypes, C++ doesn’t.</li>
<li>C allows for implicit discard of pointer const qualifiers. This trick won’t work in C++.</li>
<li>In C++, struct, union and enum declarations automatically imply a typedef with the same name. This is not the case in C.</li>
<li>Character literals in C are of type int. In C++ they are of type char.</li>
<li>C++ implicitly treats any const global as file scope unless it is explicitly declared extern, unlike C in which extern is the default.</li>
<li>Functions market as “inline” in C are of file scope whereas they have external linkage by default in C++.</li>
<li>C has VLA (Variable Length Arrays) support whereas C++ does not (until C++14).</li>
</ul>


<p>And the list of technical differences/incompatibilities of C and C++ can go on and on. The list is so big that it is impossible to fit it into a blog post. But if you are interested, check out References section in the bottom of this post.</p>

<p>Aside of technical differences, it would also be a mistake not to mention the coding style. Not a formatting style or using tabs versus spaces, but coding style. For example, C++ developers would always cast a result of <code>malloc()</code> whereas C developers would almost never do that.</p>

<h2>Grammar of «C/C++»</h2>

<p>Trying to figure out the meaning behind «C/C++», I dug the usage of slash as a punctuation sign in English text. I have never learn English grammar in school so you may want to check me on this one. Anyhow, according to Wikipedia the slash is most commonly used as the word substitute for “or” which indicates a choice (often mutually-exclusive) is present.</p>

<p>If that is the case, then companies are actually looking for either C or C++ developers, not both. Which doesn’t make any sense at all. Why nobody is looking for “Cobol/Ada” or “Lisp/Verilog” developers? Looking at other industries, there seem to be no companies searching for “Linguist/Plumber”-like people.</p>

<p>So the grammar doesn’t seem to back up the usage of «C/C++» term. This leaves everyone guessing as to what it actually means and the only way to figure out is from the context.</p>

<h2>What it actually means</h2>

<p>The actual meaning of «C/C++» depends. Here are some examples of what this means according to my observations.</p>

<p>In job postings, “We are looking for C/C++ developers” generally means “We are looking for C++ developers, nobody knows C here but why not put that in a title, too?”</p>

<p>When somebody brags about being a “C/C++” developers it means they don’t really know any of those languages but learned to write a “Hello, World!” application using printf() and compile it with C++ compiler.</p>

<p>In forums, «C/C++» section is usually dedicated for C++ crowd that might as well be able to answer some C-related questions if you get lucky.</p>

<h2>Tip: Don’t Use «C/C++»</h2>

<p>If you are looking for a developer, make sure you clearly specify requirements and avoid the use of «C/C++». If it so happens that you are actually looking for someone who knows both, say «C and C++». If you are willing to spend a few years teaching C developer C++ language, say «C++ developer or C developer willing to learn C++». Using «C/C++» will only bring confusion to those reading the job posting.</p>

<p>End of rant.</p>

<h2>References</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Slash_(punctuation">Slash in English text.</a></li>
<li><a href="http://david.tribble.com/text/cdiffs.htm">Incompatibilities Between ISO C and ISO C++</a> by David R. Tribble</li>
<li><a href="http://en.wikipedia.org/wiki/Compatibility_of_C_and_C%2B%2B">Compatibility of C and C++</a></li>
<li><a href="http://c-faq.com/malloc/mallocnocast.html">What’s wrong with casting malloc’s return value?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ask Smart Questions And You Will Succeed]]></title>
    <link href="http://741MHz.com/ask-smart/"/>
    <updated>2013-03-29T22:00:00-04:00</updated>
    <id>http://741MHz.com/ask-smart</id>
    <content type="html"><![CDATA[<p>Asking is ultimately one of the most important ways for you to succeed. You shall not be afraid to ask. You shall ask often. Ask for help and for a raise, ask for an advice and ask questions. Asking is very powerful. Not only it might help you to get an answer, you may as well receive something that is a lot more valuable, something you haven’t even thought of before. Asking helps you to make your way. It helps others to understand you better. Asking connects people. In English we say, “It doesn’t hurt to ask.” Russians say, “Nobody punches your nose for asking.” I am sure that other cultures have a similar saying.</p>

<p>I have been hanging out on <a href="http://stackoverflow.com/">Stack Overflow</a>, a nice Q&amp;A site, for about two years now, and have answered some 770 questions. Not a lot, but I have enjoyed each and every question I have either answered or at least tried to answer. Yet my questions are what I am proud of the most. They were most helpful, at least for me. Sometimes, answering a question creates more questions and leads to a research, helps to learn something new — be that a programming trick, a new technology, a new interesting person that you didn’t know before. It is always better to ask than not to ask. In any case it makes you richer.</p>

<p>OK, now it sounds like a crap from a cheap inspiration book. Things cannot be that simple. Indeed there is a catch to asking — just asking doesn’t really get you anywhere. You want people to be interested in your question, you want the question to be wise, you want your question to make others think, and oftentimes you want your question to be answered.</p>

<blockquote><p>Whoever said “there’s no such thing as a bad question” clearly had never seen the Internet.<br/>
— <a href="https://twitter.com/AndrewLBarber">Andrew Barber</a></p></blockquote>

<p>There ain’t no such thing as a free lunch. And just like with everything else, in order for your questions to make you successful, some efforts from you are required. Of course nobody knows everything, and there is absolutely nothing wrong with saying, “I don’t know”. But you must at least show some efforts, some respect to those who read the question, or those who have already answered it million times over. There is a lot of great information about how to ask smart questions, and just in case you haven’t read it already, below are some links to a great tutorials about how to ask great questions. Trust me, you won’t waste your time by reading them. Those tutorials will definitely help you to succeed whatever your goals are:</p>

<ul>
<li><a href="http://www.catb.org/esr/faqs/smart-questions.html">How To Ask Questions The Smart Way</a> by Eric Steven Raymond</li>
<li><a href="http://www.forbes.com/sites/stevedenning/2011/09/11/learning-to-ask-the-right-question-2/">Learning To Ask The Right Question</a> by Steve Denning, Forbes</li>
<li><a href="http://mattgemmell.com/2008/12/08/what-have-you-tried/">What have You tried so far?</a> by Matt Gemmell</li>
<li><a href="http://www.youngbloodcoaching.com/powerful-questions.html">The Art of Asking Powerful Questions</a></li>
</ul>


<p>And if you are looking for the right place to ask your questions online, you might find one of the <a href="http://stackexchange.com/">Stack Exchange Q&amp;A sites</a> very useful. Whether you are into LEGO, Marital Arts, Politics or Physics, interested in Chemistry, or History, or the history of chemistry, or whatever that is you are interested in – there is a web site for it.</p>

<p><a href="http://stackexchange.com/"><img src="http://741MHz.com/images/stack-exchange-top-sites.png"></a></p>

<p>Hope it helps. Good Luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Evolution of Computer Networking]]></title>
    <link href="http://741MHz.com/network-evolution/"/>
    <updated>2013-03-29T21:00:00-04:00</updated>
    <id>http://741MHz.com/network-evolution</id>
    <content type="html"><![CDATA[<p>Do you remember 56k modems? Me too. The sound it used to produce when connecting still gives me a warm fuzzy feeling and a bit of excitement. The last time I have used that modem was in 2003. Fifty six thousand bits per seconds — that was a lot back then. For the sake of comparison, I went to speedtest.net to check the speed of my phone that uses 4G LTE from Verizon, and my Verizon Fios home network. Here are my results:</p>

<p><img src="http://741MHz.com/images/network-evolution/home_speed_test.jpg"></p>

<p>The phone’s Internet connection is roughly 263 faster; the home network is 821 times faster. This is just mind-blowing. But that is a simple home networking — a standard phone and a standard gigabit Ethernet adapter. The industrial networking is a lot more complicated, a lot faster, and is far ahead of technologies commonly used in our homes. In order to achieve lower latency characteristics and better bandwidth, the industry took a few large steps to get where we are now. Let’s take a quick look at what is going on there!</p>

<h2>Direct Memory Access</h2>

<p>One of the first steps was an introduction of <a href="http://en.wikipedia.org/wiki/Direct_memory_access">Direct Memory Access</a>, or <em>DMA</em>. Basically, it allowed peripheral devices to access computer’s memory without having CPU being involved in this process. I was trying to find some information about the history of DMA and found <a href="http://www.ganssle.com/articles/adma.htm">this interesting article</a> dated back to 1994. At that time, DMA was gaining popularity in embedded systems. Today, it can be found in any computer, and is used in all systems and not only embedded.</p>

<h2>Network Interface Controllers</h2>

<p>Before, computers used to access the network by communicating with the <a href="http://en.wikipedia.org/wiki/PHY_(chip">Ethernet PHY</a>) directly. Its only task is to send and receive data over a physical medium, such as famous <a href="http://en.wikipedia.org/wiki/Registered_jack">RJ-45 cable</a>.</p>

<p><img src="http://741MHz.com/images/network-evolution/phy_and_cat6.jpg"></p>

<p>The problem was in having CPU perform a lot of simple yet time-consuming operations in order to communicate over the network using just a PHY device. With the ever growing demand for better performance, engineers came up with special hardware called <a href="http://en.wikipedia.org/wiki/Network_interface_controller">Network Interface Controller</a> (NIC). Initially, it was handling tasks related to the <a href="http://en.wikipedia.org/wiki/Data_link_layer">Data Link Layer</a>, such as <a href="http://en.wikipedia.org/wiki/Media_access_control">Media Access Control</a>. This made it possible to perform many tasks on the card and not waste CPU resources. For example, NIC could filter data that was not intended for this computer (based on MAC address or IP address, for example).</p>

<h2>PCI Express 3.0</h2>

<p>The first NICs used to communicate with PC over <a href="http://en.wikipedia.org/wiki/Industry_Standard_Architecture">ISA bus</a>. ISA was later replaced with PCI and then <a href="http://en.wikipedia.org/wiki/PCI_Express#PCI_Express_3.0">PCI Express</a> (aka PCIe). The PCIe has evolved significantly since its first release. The currently used version 3 of the PCIe can handle up to 8 gigatransfers per second and provides a tremendous advantage not only to Network Interface Controllers, but general purpose computing with technologies like <a href="http://en.wikipedia.org/wiki/CUDA">CUDA</a>, <a href="http://en.wikipedia.org/wiki/OpenCL">OpenCL</a>, <a href="http://en.wikipedia.org/wiki/C%2B%2B_AMP">C++ AMP</a> etc. The version 4 of the PCIe standard is already on its way.</p>

<p><img src="http://741MHz.com/images/network-evolution/nic_in_90s.jpg"></p>

<h2>Optical Fiber, 100 Gigabit Ethernet and Special Hardware</h2>

<p>The old good copper cables got replaced with <a href="http://en.wikipedia.org/wiki/Optical_fiber">optical fiber</a> which are effectively transferring data with a speed of light. The speed at which network cards can transfer data has also increased. It jumped from 10 to 100 Mbps, then from 100 Mbps to 1 Gigabit per second – a common speed our PCs are operating at home these days. <a href="https://en.wikipedia.org/wiki/10-gigabit_Ethernet">10 Gigabit Ethernet</a> started to evolve around 2002 and over six million ports were shipped by 2010. This is the most common Ethernet speed currently used by the industry. In 2010, there were two new Ethernet standards supporting <a href="https://en.wikipedia.org/wiki/100_Gigabit_Ethernet">40 and 100 Gigabit per second</a> line rates. This technology is already being used today, powering our “Clouds” and having people ranting about “Big Data”.</p>

<p>One interesting thing about these new and crazy bandwidth capabilities is that computers cannot really handle it, so you cannot just plug a 100 GbE controller into your PCIe slot and download the whole Internet. Not at all. Simply because no general-purpose CPU can handle that amount of data, at least not yet. So far these loads can only be handled by special hardware – Ethernet ICs which are commonly implemented as <a href="http://en.wikipedia.org/wiki/Application-specific_integrated_circuit">ASICs</a>, but there are also <a href="http://en.wikipedia.org/wiki/Field-programmable_gate_array">FPGA</a> based solutions. One of the great examples of such devices are network switches. For example, Arista makes a few switches capable of handling 1.28 terabytes per second.</p>

<p>If you are a big electronics enthusiast and know how to program FPGAs, then you can make your own 100 GbE device at home. There are plenty of kits available on the market already. For example, the following Altera board looks very interesting:</p>

<p><img src="http://741MHz.com/images/network-evolution/100g_dk_stratix_v_gx.jpg"></p>

<p>Though I can think of better ways to spend $25,000. But that’s just me. Let’s get back to the software and general-purpose CPUs. Engineers from all around the world have been trying to solve a problem of having a software that can handle large amount of traffic with lowest possible latency, and there is indeed some progress.</p>

<h2>Software, Berkeley Sockets and C10K</h2>

<p><img class="right" src="http://741MHz.com/images/network-evolution/code_monkey_by_gloriouskyle.jpg"></p>

<p>The software hasn’t really changed much in the last two decades, unfortunately. Developers are still using a classic <a href="http://en.wikipedia.org/wiki/Berkeley_sockets">Berkeley Socket API</a> for network programming, as they used two decades ago. This has been a big problem because sticking to the same old programming model does not allow for a lot of great optimizations.</p>

<p>In early 2000s, Alexey Kuznetsov, Jamal Hadi Salim and Robert Olsson have developed a new technique for network packet processing called «<a href="http://en.wikipedia.org/wiki/New_API">New API</a>». It was not affecting the socket API used by the application developers. Instead, it was a modification to the device driver packet processing framework that was designed to improve the performance of high-speed networking.</p>

<p>There were also a few improvements for which programmers should be grateful and thank to NIC designers. Modern NICs provide something called «offloading» where some tasks that were done by software are now handled by the NICs. This at least includes a <a href="http://en.wikipedia.org/wiki/Large_segment_offload">Large Segment Offload</a>, <a href="http://en.wikipedia.org/wiki/Large_receive_offload">Large Receive Offload</a>, and TCP/IP, UDP and Ethernet checksum calculation. These “tricks” are very common these days and won’t surprise anyone.</p>

<p>The above improvements helped a lot but it soon turned out to be not enough. In 2003, Dan Kegel described <a href="http://www.kegel.com/c10k.html">the C10K problem</a>. It highlights that hardware is no longer a bottleneck – the software is, or at least the way it is written. And that affects everything and not only the Web. Here is a real world example from a financial industry. I remember when I first joined the company I am currently with, we had an application designed to process <a href="http://opradata.com/">OPRA data</a> – an information aggregated from participating <a href="http://en.wikipedia.org/wiki/Option_(finance">option</a>) exchanges (currently 11). The data was distributed over some 30+ multicast channels at that time, and the application was creating a <a href="http://en.wikipedia.org/wiki/Thread_(computing">thread</a>) per UDP socket/channel to handle all of that data. That was truly embarrassing, and as the amount of data increased over time, the application would just lose half of the data or even crash. Luckily, we quickly threw that crappy app away and wrote a new one that handles everything with ease even during the peak loads.</p>

<p>I was laughing out loud when a few days ago, <a href="http://www.ft.com/intl/cms/s/0/5771ec7a-90ce-11e2-862b-00144feabdc0.html">according to Mr. O’Malia</a>, the government reportedly had similar problems after deciding to regulate a swap market. After market participants started to report their activity, the government simply failed to handle the amount of data:</p>

<blockquote><p>The commission now receives data on thousands of swaps each day. So far, however, none of our computer programs loads this data without crashing.</p></blockquote>

<p>As a result of a higher awareness of this problem among <a href="https://www.youtube.com/watch?v=v4Wy7gRGgeA">code monkeys</a>, an asynchronous network I/O approach quickly gained popularity and more applications started to use it. Generally speaking, a well written application using asynchronous approach can handle a reasonable amount of traffic on a powerful multi-core server – at least enough for most of generic applications like web servers, bit torrents etc. Yet handling a constant load of anything close to 10 GbE is still beyond the imaginable. And even if CPUs could handle that, that would leave no resources to actually do something meaningful with that data. This slowly but surely becomes a problem. Luckily, there are a number of solutions aiming at solving this problem by taking the whole new approach to computer networking.</p>

<h2>What’s Trending</h2>

<p>A lot of work towards a better networking has been emerging since 2005 with a number of companies already providing industrial grade solutions today. There is not yet an official name for it, no standard, and no solutions are exactly the same. Yet they all share the same philosophy and similar implementations. There are few main points shared by all of them:</p>

<ul>
<li>Operating system kernel is a bottleneck and its use must be avoided.</li>
<li>Applications must access the NIC directly and perform DMA transactions.</li>
<li>As much work as possible must be done by the NIC hardware.</li>
</ul>


<p><img class="right" src="http://741MHz.com/images/network-evolution/modern_nic.png" title="'Modern NIC with full kernel-bypass, offload and zero-copy support as well as on-board FPGA for custom hardware logic.'" >
There are three buzz words for the above points – Kernel-Bypass, Zero-Copy and Offload respectively. Here are just a few popular solution provides that implement all of the above and provide extremely high-performance networking solutions (in no particular order):</p>

<ul>
<li><a href="http://www.6wind.com/">6WIND</a></li>
<li><a href="http://www.plda.com/index.php">PLDA</a></li>
<li><a href="http://www.napatech.com/">Napatech</a></li>
<li><a href="http://www.mellanox.com/">Mellanox</a></li>
<li><a href="http://www.myricom.com/">Myricom</a></li>
<li><a href="http://www.solarflare.com/">SolarFlare</a></li>
<li><a href="http://www.velocytech.com/">VelociTech</a></li>
<li><a href="http://www.intilop.com/">Intilop</a></li>
<li><a href="http://www.ntop.org/products/pf_ring/dna/">NTOP.ORG DNA</a></li>
</ul>


<p>Some of the technologies provided by the above companies can speed up network processing anywhere from 20 to 100 times. In order to achieve the best performance, however, a different programming model (as well as API) must be used. It is simply impossible to have a Berkeley Socket API anymore — it is way too old and does not account for many things, making it impossible to write the efficient (from hardware point of view) program.</p>

<h2>What To Expect Next</h2>

<p>Given the current trends, it would be logical to expect a few things to happen.</p>

<h3>Standard API</h3>

<p>The first thing is a consolidation of APIs. Having 10+ different ways to do the same thing just does not sound good. Sooner or later we should get a standard API that would provide developers with a stable, thought-through and efficient way to program network applications using these cutting edge technologies. This would probably be something like <a href="http://en.wikipedia.org/wiki/OpenCL">OpenCL</a> but for networking.</p>

<h3>Lower Cost</h3>

<p>To get one of those programmable network adapters of the new era today, one should pay through the nose. The price can vary anywhere from $5000 to $50000, depending on the functionality provided. We should (hopefully) see the price go down as technology gets stabilized and the sales increase in quantities. After all, creating such a device is no harder than an iPhone. Yet we don’t pay 50K for an iPhone, right?</p>

<h3>Integration</h3>

<p>Recently, the Xilinx has released the <a href="http://www.xilinx.com/publications/prod_mktg/quickpath-interconnect-ip-product-brief.pdf">worlds first FPGA running QPI</a> at full width — 21 lanes at 6.4 GHz per lane. So we can now have a motherboard that has a cutting edge Intel CPU for general-purpose processing in one socket, and a special purpose FPGA in another socket, both sharing the host memory at maximum speed and the lowest possible latency. In other words, Intel CPU will communicate with FPGA just like it communicates with other CPUs on the same board. This will indeed help to get rid of PCI Express that has always been a bottleneck when it comes to both throughput and latency. Amazing, isn’t it? Below is the video from Xilinx explaining this in more details:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/NHkpMlL0bZ8 "></iframe></div>


<p>At the same time Altera, another leading FPGA vendor, has released <a href="http://www.altera.com/corporate/news_room/releases/2012/products/nr-optical-fpga-demo.html">the worlds first optical FPGA technology</a> that was developed in conjunction with Avago Technologies, breaking through the barriers of traditional copper interconnect. To put it simple, we can now plug the optical fiber directly into the FPGA’s transceiver and achieve a bandwidth of approximately 120 gigabits per second:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/cC5g3rE9DZ8 "></iframe></div>


<p>Now, here is what I think is going to happen. In the next few years we would have an FPGA chip sitting in a CPU socket right next to the high-end Intel CPU, interconnected by QPI with the highest possible bandwidth, and lowest possible latency. The FPGA would have an optical fiber cable attached to it and beaming the data straight into the fabrics. The FPGA would then handle all of the network processing, including high-level protocols such as TCP/IP or even higher ones like <a href="https://bitcoin.it/wiki/Protocol_specification">BitCoin</a>, <a href="http://fixprotocol.org/">FIX</a>, etc.</p>

<p>Once that is done, we could take all of that and integrate it with a human’s brain :)</p>

<p>Hope it was interesting. Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stranded]]></title>
    <link href="http://741MHz.com/stranded/"/>
    <updated>2013-03-23T00:00:00-04:00</updated>
    <id>http://741MHz.com/stranded</id>
    <content type="html"><![CDATA[<p>One of the things I really love about WordPress.com is its community. The Daily Prompt movement is especially great — it helps to connect so many people together, share so many great stories, and ideas. I am relatively new to blogging in general and WordPress in particular, so most of the time I just enjoy good reads. But today’s Daily Prompt’s topic “Stranded” brought back some of my old good memories and I decided to share my story about how I got stranded in a foreign city for a few days with no money and no friends.</p>

<p>I have lived in New York area for a while now. But I am an immigrant, so I wasn’t always here. My life journey started in Illichivsk — a small half-resort, half-port city on the shores of the Black Sea, named after Vladimir Lenin. I was born there, in a country that does not exist anymore — USSR. In 1991, USSR fell apart, Ukraine got its independence, and I acquired a Ukrainian citizenship.</p>

<p>The Illichivsk is a very small town. Back in the day there was no public transportation, no universities, no businesses, no jobs, no nothing. To say that it has always been extremely hard to make a living there is to say nothing at all. Both of my parents were working from dusk till dawn, and the income was barely enough to buy groceries. Everything was pretty much dead all year around except for the summers. I loved summers. It was a great chance for me to make some pocket-money. I used to buy some ice cream in the town, put it into a backpack and rush to the beach to sell it to lazy tourists. I would make enough money to buy an ice cream for my crush. Usually boys buy movie tickets and flowers, but we had no cinemas in Illichivsk. And flowers I used to steal from somebody’s lawn.</p>

<p>One day my parents bought me a computer despite the fear that I would start playing video games all the time — they believed that computer would help me study. It worked out great — instead of playing video games I got into programming. First thing I installed on my computer was FreeBSD — operating system that somebody recommended to me in a local bookstore. It did not support my video card so I was working in console, 100% text mode. I got an English dictionary and translated manual pages word by word. That is pretty much how I learned to understand English and got my first experience with UNIX. I also bought a few Russian books about C programming and after about a year of studying day and night I started working as a freelancer taking on simple programming gigs. It was not paying a lot. But it was enough for me to quit my seasonal ice cream sales business.</p>

<p>I always knew that to achieve something in my life I had to get out of that town. And by the time I was finishing the high school I sent my résumé to pretty much every company in Ukraine that I could find. Most of them never got back. But one day I got a phone call from Miratech — a big outsourcing company with headquarters in Kiev — the capital of Ukraine. Boy was I excited. The bags got packed with a speed of light, the piggy bank crushed to finance the trip, and I hopped on the next train to Kiev to get to a job interview, before my parents could understand what is going on.</p>

<p>I was hired. I was excited. It felt great. I will never forget that moment, those overwhelming feelings, that small success, an achievement, a coincidence, a chance that I was given. There was only one small problem — you don’t get paid until the end of the month, and I haven’t even started yet. I had no money. I had no friends. I was a kid all by myself in the big city that I knew absolutely nothing about. Where do I go; what do I do? I was stranded.</p>

<p>Having no other choice, I immediately called my parents for help. They could have sent some money and have me return home. But going home was not an option for me — it would have been a huge step back. I had different goals. I wanted to show up at work next day, make a career and settle in Kiev. My parents knew that, and so they took last $300 of family money that we had and my father hopped on the next train to Kiev to help me out. The idea was to rent an apartment for $150 (for one month), buy a ticket so he can go back home. And leave the rest to me so I can buy some food and go to work.</p>

<p>Frankly speaking that was a very brave, naïve and indeed optimistic move. After my dad arrived on the scene, we spent the whole day rushing from one place to another trying to find an apartment. But nothing was up for rent for the money we had. A few apartments that we could afford were so far from the city that the only way to get to work for me would have been to drive a car, which I didn’t have. After a day of rat-running from one part of the city to another, we ended up in the middle of nowhere. It was 11 PM — too late to search for anything. We stood right there. We were hungry and freezing. We have stranded in a foreign city with no money and no friends. Where do we go; what do we do?</p>

<p>The thought of giving up and going home has crossed my mind many times. Perhaps my father thought about that too, but he never said anything like that. Instead, he was telling me not to worry, that we would find the way out. Though of course he had no idea what to do either. We were about to go to the train terminal, try to sleep there and resume our journey in the early morning.
Semiconscious, I was going through my phone’s address book looking for at least someone I could ask for help. But whom can I send an S.O.S. if I don’t know anyone who lives anywhere close? Suddenly, my eyes stopped on the entry that said “The Key”, and a phone number. What does it mean, whose phone number is that? Flashback. I remembered — a few months ago I was talking online on #rain IRC channel with a girl whose nickname was “key”. I told her that I would love to move to Kiev one day, if I ever get a chance. And she gave me her number just in case I get in trouble and would need help. I didn’t even know her name, but called the number. I said, — “Hello, this is Vlad, the kid from IRC chat. We met online, remember? I am here, uhm… I am not sure where I am exactly, I am here with my daddy, and we don’t know what to do… can you help us? Please.”</p>

<p>I don’t know if she remembered me or not. She quickly asked what do we see in order to pinpoint our location, instructed us to get on a subway, told which train to take, what stop we should get off, and promised to meet us there. When we arrived, she was waiting for us, accompanied by quite big, nice and very beautiful dog — that was for her own protection, because you never know. “Hello, I’m Dasha. Follow me,” she said. My dad and me said “Hi,” introduced ourselves and started to tell our story while walking to her apartment.</p>

<p>When we arrived, Dasha poured us some tea, regaled us with cookies, and introduced us to her dog, her husband and two beautiful kids. After hearing our story, Dasha said we could stay at her place as long as we need until we settle down. With her help, we were able to find a rental place in the next few days. My dad went back home. He left me all the money. It was enough for me to buy trolley bus tickets and buckwheat groats until I got my first paycheck.</p>

<p>This was a life changing experiences for me, and a great lesson. We have been friends with Dasha and her family ever since. I am very grateful for our friendship. She and her family have moved to U.S. recently, so we are neighbors again. Her kids have grown up now. Oh, the time is flying so quickly…</p>

<p>Catch every single moment of life.</p>

<p>Enjoy it as long as you can.</p>

<p>Never give up.</p>

<p>Help each other.</p>

<p>Be happy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OOP with ANSI C]]></title>
    <link href="http://741MHz.com/c-oop/"/>
    <updated>2013-03-20T00:00:00-04:00</updated>
    <id>http://741MHz.com/c-oop</id>
    <content type="html"><![CDATA[<p>What if I told you that Linux kernel is object-oriented? Would that surprise you? Or maybe you would think I am a lunatic, and I would understand that. After all, the Linux kernel is mostly written in C, with only a few sections written in Assembly. And everybody knows that C is not an object-oriented language. It is <a href="http://en.wikipedia.org/wiki/List_of_object-oriented_programming_languages">not even listed as such</a> on Wikipedia.</p>

<p>But crazy sometimes is not as crazy as it seems. Did you know that <a href="http://www.youtube.com/watch?v=P8DrxzkwnmA">respected professors who taught Einstein thought he was a goof-off</a>? At a time, if you told those respected scientists that Einstein is in fact a genius who would change the history, they definitely take you for a lunatic. Who would have though, right?</p>

<p>And who would have thought that C can be a used for object-oriented programming? <a href="http://www.cs.rit.edu/~ats/">Axel-Tobias Schreiner</a> did. He even went a step further and wrote a book called «Object-Oriented Programming with ANSI C». It starts like this:</p>

<blockquote><p>Object-oriented programming is the current cure-all — although it has been around for much more then ten years. At the core, there is little more to it then finally applying the good programming principles that we have been taught for more than twenty years. C++ (Eiffel, Oberon-2, Smalltalk … take your pick) is the New Language because it is object-oriented — although you need not use it that way if you do not want to (or know how to), and it turns out that you can do just as well with plain ANSI-C.</p></blockquote>

<p>This is one of the most wonderful books about programming in general, object-oriented approach, C and C++ programming languages that I have ever read. In my opinion, it hasn’t got the attention it deserves. I read it twice — the first time when I was just learning C and the second time when I was mastering C++. If you have been learning C and/or C++ — this is a must read.</p>

<p>Practically, C is a very low-level language and nobody would want to spend hours writing lots of glue code in C to implement a virtual method table — something that C++ compiler does for you automatically, unless it is required. But even if taking up on that challenge is not part of the plan, the Alex’s book is still great — it teaches the fundamental core principles that all object-oriented languages are built upon. C and C++ are there almost for the sake of examples only. Delegate? Explained. Multiple inheritance? Check. Selectors? There. After reading the book, one could basically just look at any language construct, be that C#, Java, Ruby, Python or any other language, and say, — “Yeah, I know what that does and how compiler implements it. That’s easy!”</p>

<p>As it turns out, not only you can do all of that with ANSI C, it is actually the best language to explain what is going on under the hood of other languages. And if you ever look at Linux kernel, you would see that it is one of the greatest examples object-oriented design.</p>

<p>The book <a href="http://www.lulu.com/shop/axel-schreiner/object-oriented-programming-with-ansi-c/paperback/product-17561597.html">can be purchased for $20 from Lulu</a> and it is worth every penny. You can also <a href="http://www.cs.rit.edu/~ats/books/ooc.pdf">download a free PDF version</a> from Mr. Schreiner’s website.</p>

<p>Axel-Tobias Schreiner, Thank You!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculating FIX Message Checksum]]></title>
    <link href="http://741MHz.com/fix-checksum/"/>
    <updated>2013-03-16T00:00:00-04:00</updated>
    <id>http://741MHz.com/fix-checksum</id>
    <content type="html"><![CDATA[<p>A FIX message is a stream of bytes that consists of data represented by <a href="http://en.wikipedia.org/wiki/Attribute%E2%80%93value_pair">field-value (aka key-value) pairs</a>. Those field-value pairs are delimited by <a href="http://en.wikipedia.org/wiki/Start-of-Header#SOH">SOH character</a> — a special non-printable ASCII character with hex code <code>0x01</code>. For convenience, it is usually replaced with a vertical bar (<code>|</code>) for displaying purposes. Each field-value pair consists of the field number and its value delimited by equals sign (<code>=</code>). In the code, it is represented as an escape sequence — <code>'\1'</code> or <code>"\001"</code>. Here is an example of a FIX message:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>8=FIX.4.2|9=178|35=8|49=PHLX|56=PERS|52=20071123-05:30:00.000|11=ATOMNOCCC9990900|20=3|150=E|39=E|55=MSFT|167=CS|54=1|38=15|40=2|44=15|58=PHLX EQUITY TESTING|59=0|47=C|32=0|31=0|151=15|14=0|6=0|10=128|</span></code></pre></td></tr></table></div></figure>


<p>Every FIX message must always end with a checksum field followed by SOH symbol. The field number for a checksum is 10. Therefore, the checksum part in the above message is <code>10=128|</code>.</p>

<p>There is one special requirement for the checksum field — it must always be three characters long. Not more and not less. It must be left-padded with <code>0</code> characters if needed. For example, if the checksum value is <code>13</code>, then it should appear as <code>013</code>. If it is only <code>1</code>, then it should read <code>001</code>. It can also be just <code>000</code>.</p>

<p>The checksum of a FIX message is calculated by adding every byte of the message, excluding the checksum field-value pair, as unsigned binary number, discarding any overflow bits. Therefore, the range of possible values is [0-255], the same range of values that can be represented by unsigned 8-bit integer (<code>uint8_t</code>).</p>

<p>The code for calculating FIX checksum is very simple — all it needs to do is add every byte of the input and store a result in <code>uint8_t</code>. Remember, the checksum field itself should not be used to calculate checksum. Here is an example in C:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">uint8_t</span> <span class="n">fix_checksum</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">uint8_t</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint8_t</span><span class="p">)(</span><span class="n">sum</span> <span class="o">+</span> <span class="p">(</span><span class="n">uint8_t</span><span class="p">)</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If writing in C++, <a href="http://en.cppreference.com/w/cpp/algorithm/accumulate"><code>std::accumulate()</code></a> can be used to achieve the same. Here is an example:</p>

<p>Once the checksum value is calculated, it must be added to the end of the message as an ASCII-encoded field-value pair with field number <code>10</code>, followed by SOH. As a remainder, the checksum value must always be three characters long, left padded with <code>0</code> if needed. The easiest way to convert the binary checksum value is this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">checksum</span> <span class="o">/</span> <span class="mi">100</span> <span class="o">+</span> <span class="sc">&#39;0&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">checksum</span> <span class="o">/</span> <span class="mi">10</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">+</span> <span class="sc">&#39;0&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">checksum</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">+</span> <span class="sc">&#39;0&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To sum things up, here is a C++ example program that calculates the checksum and appends it to the end, forming a complete FIX message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// --*-- C++11 --*--</span>
</span><span class='line'><span class="c1">// Compile: clang++ -std=c++11 -stdlib=libc++ -Wall ./test.cpp</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;cstdint&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;numeric&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Initial message. The SOH is an escape sequence &#39;\001&#39;.</span>
</span><span class='line'>    <span class="c1">// It does not include checksum field — the checksum must</span>
</span><span class='line'>    <span class="c1">// be calculated.</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">msg</span> <span class="o">=</span>
</span><span class='line'>        <span class="s">&quot;8=FIX.4.2</span><span class="se">\001</span><span class="s">9=178</span><span class="se">\001</span><span class="s">35=8</span><span class="se">\001</span><span class="s">49=PHLX</span><span class="se">\001</span><span class="s">56=PERS</span><span class="se">\001</span><span class="s">&quot;</span>
</span><span class='line'>        <span class="s">&quot;52=20071123-05:30:00.000</span><span class="se">\001</span><span class="s">11=ATOMNOCCC9990900</span><span class="se">\001</span><span class="s">&quot;</span>
</span><span class='line'>        <span class="s">&quot;20=3</span><span class="se">\001</span><span class="s">150=E</span><span class="se">\001</span><span class="s">39=E</span><span class="se">\001</span><span class="s">55=MSFT</span><span class="se">\001</span><span class="s">167=CS</span><span class="se">\001</span><span class="s">54=1</span><span class="se">\001</span><span class="s">38=15&quot;</span>
</span><span class='line'>        <span class="s">&quot;</span><span class="se">\001</span><span class="s">40=2</span><span class="se">\001</span><span class="s">44=15</span><span class="se">\001</span><span class="s">58=PHLX EQUITY TESTING</span><span class="se">\001</span><span class="s">59=0</span><span class="se">\001</span><span class="s">&quot;</span>
</span><span class='line'>        <span class="s">&quot;47=C</span><span class="se">\001</span><span class="s">32=0</span><span class="se">\001</span><span class="s">31=0</span><span class="se">\001</span><span class="s">151=15</span><span class="se">\001</span><span class="s">14=0</span><span class="se">\001</span><span class="s">6=0</span><span class="se">\001</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Calculate the checksum.</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">uint8_t</span> <span class="n">csum</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">accumulate</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">msg</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span>
</span><span class='line'>                        <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">uint8_t</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Append the checksum field-value to the message.</span>
</span><span class='line'>    <span class="c1">// First, add field number and field delimiter:</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;10=&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Then add checksum converted to ASCII characters,</span>
</span><span class='line'>    <span class="c1">// left-padded with zeroes:</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">csum</span> <span class="o">/</span> <span class="mi">100</span> <span class="o">+</span> <span class="sc">&#39;0&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">csum</span> <span class="o">/</span> <span class="mi">10</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">+</span> <span class="sc">&#39;0&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">csum</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">+</span> <span class="sc">&#39;0&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// And finally, complete the message by adding a final</span>
</span><span class='line'>    <span class="c1">// SOH character:</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sc">&#39;\1&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Print the message to standard output.</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">msg</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that some terminals may not be able to display SOH characters. It is possible that it would get displayed as <code>^A</code>, some other sequence, or not displayed at all. In OS X «Terminal», the above program would display the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="err">$</span> <span class="n">clang</span><span class="o">++</span> <span class="o">-</span><span class="n">std</span><span class="o">=</span><span class="n">c</span><span class="o">++</span><span class="mi">11</span> <span class="o">-</span><span class="n">stdlib</span><span class="o">=</span><span class="n">libc</span><span class="o">++</span> <span class="o">-</span><span class="n">Wall</span> <span class="o">-</span><span class="n">pedantic</span> <span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">cpp</span>
</span><span class='line'><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span>
</span><span class='line'><span class="mi">8</span><span class="o">=</span><span class="n">FIX</span><span class="mf">.4.29</span><span class="o">=</span><span class="mi">17835</span><span class="o">=</span><span class="mi">849</span><span class="o">=</span><span class="n">PHLX56</span><span class="o">=</span><span class="n">PERS52</span><span class="o">=</span><span class="mi">20071123</span><span class="o">-</span><span class="mo">05</span><span class="o">:</span><span class="mi">30</span><span class="o">:</span><span class="mf">00.00011</span><span class="o">=</span><span class="n">ATOMNOCCC999090020</span><span class="o">=</span><span class="mi">3150</span><span class="o">=</span><span class="n">E39</span><span class="o">=</span><span class="n">E55</span><span class="o">=</span><span class="n">MSFT167</span><span class="o">=</span><span class="n">CS54</span><span class="o">=</span><span class="mi">138</span><span class="o">=</span><span class="mi">1540</span><span class="o">=</span><span class="mi">244</span><span class="o">=</span><span class="mi">1558</span><span class="o">=</span><span class="n">PHLX</span> <span class="n">EQUITY</span> <span class="n">TESTING59</span><span class="o">=</span><span class="mo">047</span><span class="o">=</span><span class="n">C32</span><span class="o">=</span><span class="mo">031</span><span class="o">=</span><span class="mo">0151</span><span class="o">=</span><span class="mi">1514</span><span class="o">=</span><span class="mo">06</span><span class="o">=</span><span class="mo">010</span><span class="o">=</span><span class="mi">128</span>
</span></code></pre></td></tr></table></div></figure>


<p>So when printing a FIX message, it might be useful to replace all occurrences of <code>01</code> with something else, for example a vertical bar. It is also possible to do it with command line utility called <code>tr</code>. This does not require a code change:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span> <span class="o">|</span> <span class="n">tr</span> <span class="sc">&#39;\1&#39;</span> <span class="sc">&#39;|&#39;</span>
</span><span class='line'><span class="mi">8</span><span class="o">=</span><span class="n">FIX</span><span class="mf">.4.2</span><span class="o">|</span><span class="mi">9</span><span class="o">=</span><span class="mi">178</span><span class="o">|</span><span class="mi">35</span><span class="o">=</span><span class="mi">8</span><span class="o">|</span><span class="mi">49</span><span class="o">=</span><span class="n">PHLX</span><span class="o">|</span><span class="mi">56</span><span class="o">=</span><span class="n">PERS</span><span class="o">|</span><span class="mi">52</span><span class="o">=</span><span class="mi">20071123</span><span class="o">-</span><span class="mo">05</span><span class="o">:</span><span class="mi">30</span><span class="o">:</span><span class="mf">00.000</span><span class="o">|</span><span class="mi">11</span><span class="o">=</span><span class="n">ATOMNOCCC9990900</span><span class="o">|</span><span class="mi">20</span><span class="o">=</span><span class="mi">3</span><span class="o">|</span><span class="mi">150</span><span class="o">=</span><span class="n">E</span><span class="o">|</span><span class="mi">39</span><span class="o">=</span><span class="n">E</span><span class="o">|</span><span class="mi">55</span><span class="o">=</span><span class="n">MSFT</span><span class="o">|</span><span class="mi">167</span><span class="o">=</span><span class="n">CS</span><span class="o">|</span><span class="mi">54</span><span class="o">=</span><span class="mi">1</span><span class="o">|</span><span class="mi">38</span><span class="o">=</span><span class="mi">15</span><span class="o">|</span><span class="mi">40</span><span class="o">=</span><span class="mi">2</span><span class="o">|</span><span class="mi">44</span><span class="o">=</span><span class="mi">15</span><span class="o">|</span><span class="mi">58</span><span class="o">=</span><span class="n">PHLX</span> <span class="n">EQUITY</span> <span class="n">TESTING</span><span class="o">|</span><span class="mi">59</span><span class="o">=</span><span class="mi">0</span><span class="o">|</span><span class="mi">47</span><span class="o">=</span><span class="n">C</span><span class="o">|</span><span class="mi">32</span><span class="o">=</span><span class="mi">0</span><span class="o">|</span><span class="mi">31</span><span class="o">=</span><span class="mi">0</span><span class="o">|</span><span class="mi">151</span><span class="o">=</span><span class="mi">15</span><span class="o">|</span><span class="mi">14</span><span class="o">=</span><span class="mi">0</span><span class="o">|</span><span class="mi">6</span><span class="o">=</span><span class="mi">0</span><span class="o">|</span><span class="mi">10</span><span class="o">=</span><span class="mi">128</span><span class="o">|</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is pretty much all you need to know to successfully calculate a FIX checksum. There is also one little detail that might come handy — checksums are meant to help verify data integrity and make sure that no part of the message got corrupted during transmission from one application to another. These days, FIX messages are transmitted using TCP/IP or UDP. Both TCP/IP and UDP protocols guarantee data integrity out of the box and therefore a FIX checksum doesn’t make a lot of sense. Given that calculating FIX checksums requires a lot of CPU resources and is even likely to be the bottleneck, make sure that exchange or broker, with which you intend to communicate using FIX Protocol, require a checksum. There are a number of technically wise brokers and exchanges out there that do not require you to provide the correct checksum. If that is the case, simply put <code>10=000|</code> at the end of every message.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use free and delete correctly.]]></title>
    <link href="http://741MHz.com/free-delete/"/>
    <updated>2013-03-13T00:00:00-04:00</updated>
    <id>http://741MHz.com/free-delete</id>
    <content type="html"><![CDATA[<p>The Internet is full of programming jokes <a href="http://bash.org/?946461">like this one</a>:</p>

<blockquote><p>&lt;@joosa> how do you say float in java? just 1.5f?<br/>
&lt;@Gliptic> FloatFactoryFactory.getInstance (FloatFactoryFactory.defaultInstanceDescriptionString).getFactory (Locale.getLocale (“en-US”)).createBuilder ().setString (“1.5″).getResult ()</p></blockquote>

<p>Java people please read on, that’s only a joke! More often than not the jokes are directed at those using higher-level programming languages. This is a little unfair because C programmers (and C++ ones for that matter) write some funny code, too. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">ptr</span><span class="p">)</span>
</span><span class='line'>        <span class="n">free</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This perhaps could be a joke or maybe even an interview question. What’s wrong with the above C code (assuming everything else including the usage is correct)? It turns out that many can’t spot anything. If you do — congratulations! For those who don’t, let’s read the <a href="http://man7.org/linux/man-pages/man3/free.3.html">documentation of <code>free()</code> function</a>:</p>

<blockquote><p>The free() function frees the memory space pointed to by ptr, which must have been returned by a previous call to malloc(), calloc() or realloc(). Otherwise, or if free(ptr) has already been called before, undefined behavior occurs. If ptr is NULL, no operation is performed.</p></blockquote>

<p>In other words, there is no need to check if pointer is not NULL. The same applies to C++ programmers who often check for <strike><code>NULL</code></strike> <code>nullptr</code> before calling <code>delete</code>. If you don’t trust manual pages, check out §7.20.3/2 of the C standard that states the following:</p>

<blockquote><p>The free function causes the space pointed to by ptr to be deallocated, that is, made available for further allocation. If ptr is a null pointer, no action occurs. Otherwise, if the argument does not match a pointer earlier returned by the calloc, malloc, or realloc function, or if the space has been deallocated by a call to free or realloc, the behavior is undefined.</p></blockquote>

<p>For C++, see §5.3.5/2:</p>

<blockquote><p>… if the value of the operand of delete is the null pointer the operation has no effect.</p></blockquote>

<p>Possibly, an extra checking for NULL was a necessity some 20 years ago, according to some Internet rumors claiming that a few implementations of the standard C library had a bug back then and free() could crash the program when passed a NULL pointer. I couldn’t find any information about what it was. But no matter what was going on two decades ago — it is pretty hard to find pre-ANSI C code these days. Yet unnecessary NULL checking can be seen a lot. For example, <a href="http://krugle.org/">krugle.org</a> shows the following three projects right away:</p>

<ul>
<li><a href="http://opensearch.krugle.org/document/view_filecontent/apache_http_server1945779753/scmi_filer2-scmi.ofc.krugle.net_8799/scmi_305/tags/1.3/djg_nspr_split/src/regex/regfree.c">Apache Web Server</a></li>
<li><a href="http://opensearch.krugle.org/document/view_filecontent/apache_hadoop618243895/scmi_filer2-scmi.ofc.krugle.net_8799/scmi_528/trunk/hadoop-common-project/hadoop-common/src/main/native/src/org/apache/hadoop/security/getGroup.c">Apache Hadoop</a></li>
<li><a href="http://opensearch.krugle.org/document/view_filecontent/miranda1067994304/scmi_filer2-scmi.ofc.krugle.net_8799/scmi_705/miranda/protocols/Gadu-Gadu/ownerinfo.c">Miranda</a> (an ICQ client popular in ex-USSR countries)</li>
</ul>


<p>I thought that maybe people are worrying about performance too much and don’t want to do an extra function call (extra cycles, procedure linkage tables, etc). But then using <code>malloc()</code> and <code>free()</code> in performance critical path would have been even more silly.</p>

<p>So is it paranoia, a failure to read documentation, or maybe a thoughtless copy-paste that went too far?</p>

<p>Who knows.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux, HID and PyUSB]]></title>
    <link href="http://741MHz.com/pyusb/"/>
    <updated>2013-03-04T00:00:00-05:00</updated>
    <id>http://741MHz.com/pyusb</id>
    <content type="html"><![CDATA[<p>Today I was going through some stuff in my desk’s locker and ran into this nice toy — a big red electronic panic button. It has been there for years but I never had a chance to use it because a company making those does not have a driver for OS X, and of course I couldn’t find one for Linux either. But pushing a big red button is always fun and this time I have decided to try and make it work. So I brought it home with me into my “lab” to see what I can do.</p>

<p>After plugging it into a USB port, it immediately showed up in a list of USB devices (which you can see with lsusb tool). My Linux box has identified it as a Dream Cheeky Stress/Panic Button:</p>

<pre><code>Bus 007 Device 010: ID 04f3:04a0 Elan Microelectronics Corp. Dream Cheeky Stress/Panic Button
</code></pre>

<p>Meanwhile, the kernel has also logged a message saying that it has found a new USB device. So the magic button seemed somewhat operational and I already knew two important things about it — a vendor and a product IDs. They were <code>0x04f3</code> and <code>0x04a0</code> respectively.</p>

<h2>Writing a USB driver</h2>

<p>The only little detail missing was actually a driver. I tried to <a href="https://duckduckgo.com/">Duck Duck Go</a> it real quick but nothing showed up, and I decided to write it myself. How hard can it be, after all?</p>

<h2>Reverse Engineering</h2>

<p>In order to write a device driver, one must know what the device is doing. Obviously, I didn’t have any specification, neither I wanted to deal with Elan Microelectronics support department. So the only way to figure it out was reverse engineering. Luckily, Linux has <a href="https://www.kernel.org/doc/Documentation/usb/usbmon.txt"><em>usbmon</em></a> — a facility in the kernel that is used to collect traces of I/O on the USB bus. After a quick pick at its documentation, I loaded the module using <code>modprobe usbmon</code> command and the device showed up in <code>/sys/kernel/debug/usb/devices</code>. Since it was attached to bus #7, I traced the I/O by reading the <code>/sys/kernel/debug/usb/usbmon/7u</code> file and pushing my panic button a few times to see if anything shows up. And every time I hit the button, the device was sending the following data to the host:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ffff8801b2efc9c0 1873321198 C Ii:7:010:1 0:8 8 = 02000000 00000000
</span><span class='line'>ffff8801b2efc9c0 1873457204 C Ii:7:010:1 0:8 8 = 06000000 00000000
</span><span class='line'>ffff8801b2efc9c0 1873633203 C Ii:7:010:1 0:8 8 = 06001300 00000000
</span><span class='line'>ffff8801b2efc9c0 1873801206 C Ii:7:010:1 0:8 8 = 06000000 00000000
</span><span class='line'>ffff8801b2efc9c0 1873977211 C Ii:7:010:1 0:8 8 = 02000000 00000000</span></code></pre></td></tr></table></div></figure>


<p>Not only this proved that button itself works, it also uncovered a pattern — the device was sending <code>02000000</code> and <code>06000000</code> twice with <code>06001300</code> in between. So <code>06001300</code> seemed like a good indication of the button being pressed.</p>

<h2>Linux Kernel USB Driver</h2>

<p>The next step was to write a USB Device Driver for Linux. I dealt with PCI Express, DMA and Ethernet network drivers, but never wrote a single USB driver before. So I pulled my copy of the Linux Device Drivers book off the shelf and opened it on Chapter 13 “USB Drivers”. I have to say I got surprised — that rant is about 100 pages long. I would of course suck it up, enjoy the reading and proceed to hacking. If only it was something serious. And what I had was a simple USB button that did nothing but sending two 32-bit integers, 0x06 and 0x13, every time it gets hit. Going through the hundred pages just to read 64-bit of data off the USB cable, on Monday night, after a hard 10 hours working day… Ain’t nobody got time for that?</p>

<h2>PyUSB</h2>

<p>A bit disappointed, I tried to find an easier way and once against ducked for a few keywords like “USB”, “driver”, “read”, “HID” and so on…</p>

<blockquote><p>Ask and it will be given to you; seek and you will find; knock and the door will be opened to you.
— Matthew 7:7</p></blockquote>

<p>Turned out, it is possible to write a USB driver in just a few lines of Python. Sir <a href="http://www.micahcarrick.com/">Micah Carrick</a> have managed to make a driver for his credit card reader and wrote about his experience in <a href="http://www.micahcarrick.com/credit-card-reader-pyusb.html">this nice article</a>. Following in his footsteps, I quickly glanced at <a href="http://sourceforge.net/apps/trac/pyusb/">PyUSB</a> that he was using in his work, read a few other examples, and came up with a driver for my magic button. This is truly the shortest and simplest device driver that I have made in my life:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">usb.core</span>
</span><span class='line'>
</span><span class='line'><span class="n">dev</span> <span class="o">=</span> <span class="n">usb</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">idVendor</span><span class="o">=</span><span class="mh">0x04f3</span><span class="p">,</span> <span class="n">idProduct</span><span class="o">=</span><span class="mh">0x04a0</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">dev</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s">&quot;No Panic button found in the system&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">dev</span><span class="o">.</span><span class="n">is_kernel_driver_active</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="ow">is</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">dev</span><span class="o">.</span><span class="n">detach_kernel_driver</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="n">usb</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">USBError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s">&quot;Kernel driver won&#39;t give up control over device: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">dev</span><span class="o">.</span><span class="n">set_configuration</span><span class="p">()</span>
</span><span class='line'>    <span class="n">dev</span><span class="o">.</span><span class="n">reset</span><span class="p">()</span>
</span><span class='line'><span class="k">except</span> <span class="n">usb</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">USBError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s">&quot;Cannot set configuration the device: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">endpoint</span> <span class="o">=</span> <span class="n">dev</span><span class="p">[</span><span class="mi">0</span><span class="p">][(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">dev</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">endpoint</span><span class="o">.</span><span class="n">bEndpointAddress</span><span class="p">,</span> <span class="n">endpoint</span><span class="o">.</span><span class="n">wMaxPacketSize</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">timeout</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">data</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">6</span> <span class="ow">and</span> <span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="mi">19</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># Panic button was pressed!</span>
</span><span class='line'>                <span class="k">print</span> <span class="s">&quot;OH MY GOD! OH MY GOD! DOUBLE RAINBOW!!!&quot;</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">usb</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">USBError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">errno</span> <span class="o">!=</span> <span class="mi">110</span><span class="p">:</span> <span class="c"># 110 is a timeout.</span>
</span><span class='line'>            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s">&quot;Error readin data: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now I have my beautiful toy working!</p>

<h2>UPDATE</h2>

<p><a href="https://twitter.com/pdp7">Drew Fustini</a> have hooked this up to the BeagleBone Next-Gen and made this video:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/52b5RGd4yrE "></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic Resource Management in Programming Languages]]></title>
    <link href="http://741MHz.com/raii/"/>
    <updated>2013-02-27T00:00:00-05:00</updated>
    <id>http://741MHz.com/raii</id>
    <content type="html"><![CDATA[<p>Many high-level programming languages provide software developers with the ability to automatically cleanup resources — automatically closing an open file when it is no longer used, freeing dynamically allocated memory, or anything else for that matter. This article touches on automatic resource management features available in modern programming languages. It shows some examples demonstrating why having this feature make it easier to write code, or how not using this feature may lead to potentially critical failures of the program. The primary focus is on C++ and C (surprise!) languages.</p>

<h2>C</h2>

<p>There are a few ways to automatically clean up resources in C# — a <code>finally</code> block and a <code>using</code> statement.</p>

<p>A <code>finally</code> block is a bit lower level than a using. It guarantees that all statements inside a <code>finally</code> block will be executed when the try block exists, even if unexpected exception occurs. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">ResourceType</span> <span class="n">resource</span> <span class="p">=</span> <span class="n">expression</span><span class="p">;</span> <span class="c1">// Allocate, initialize or acquire some resource.</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Do something with it.</span>
</span><span class='line'>    <span class="n">statement</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Free, destroy or release a resource.</span>
</span><span class='line'>    <span class="c1">// This is guaranteed to happen.</span>
</span><span class='line'>    <span class="p">((</span><span class="n">IDisposable</span><span class="p">)</span><span class="n">resource</span><span class="p">).</span><span class="n">Dispose</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another and more convenient way of doing the same is to employ a <code>using</code> statement which guarantees that <code>Dispose()</code> method is called automatically upon leaving the scope of using block:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">using</span> <span class="p">(</span><span class="n">ResourceType</span> <span class="n">resource</span> <span class="p">=</span> <span class="n">expression</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">statement</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Java</h2>

<p>Java also provides a finally block similar to that seen in C#:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FileReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&quot;/dev/null&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// Do something with a file...</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">reader</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>    <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Starting from version 7 Java introduces an AutoCloseable concept along with automatic resource cleanup, which are basically the same things as IDisposable and a using statement in C#:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">(</span><span class="n">FileReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&quot;/dev/null&quot;</span><span class="o">))</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="c1">// Do something with a file...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Other Languages</h2>

<p>Since the concept of something being done automatically is quite popular, it is present in many other languages. Python has both a <a href="http://docs.python.org/2/reference/compound_stmts.html#finally"><code>finally</code> statement</a> and a <a href="http://docs.python.org/release/2.5.3/ref/with.html"><code>with</code> statement</a>. The same goes for Ruby. Of course, this is also available in derivative languages like Visual Basic that is built on top of .NET technology, Groovy that is built on Java, etc.</p>

<h2>C++ — The King of RAII</h2>

<p>As we have seen, many languages provide different syntax to do essentially the same thing. It is a great concept indeed. It changed the way programmers write code, significantly improved productivity. And behind every invention that we cannot imagine our lives without there is an author. So who is behind the automatic resource management?</p>

<p>The real name of this concept is <strong>Resource Acquisition Is Initialization</strong>, or simply <strong>RAII</strong>. It was invented by Bjarne Stroustrup, the original author of C++ programming language. And of course this concept first appeared in C++, way before C# or Java were created.</p>

<p>C++ is the king of RAII. Many concepts are built upon it. RAII is the reason why object destructors are called automatically. It is the reason why C++ developers don’t need to care much about freeing dynamically allocated memory or close a file descriptor that is no longer used. It is why, when handling an error, it is enough to simply throw an exception, or return an error code from a function, without writing tons of “cleanup” code or even thinking about the order in which resources must be cleaned up (which is usually done in opposite order of allocation). In fact, RAII should be used whenever possible to avoid serious errors or even cause a denial of service. For example, consider the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;mutex&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Data structure that is supposed to be accessed by multiple threads.</span>
</span><span class='line'><span class="k">struct</span> <span class="n">shared_resource</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">mutex</span>       <span class="n">mutex</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">foo</span><span class="p">(</span><span class="n">shared_resource</span> <span class="o">&amp;</span> <span class="n">res</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Acquire an exclusive lock to protect access to</span>
</span><span class='line'>    <span class="c1">// the object in multi-threaded environment.</span>
</span><span class='line'>    <span class="n">res</span><span class="p">.</span><span class="n">mutex</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Modify the contents of the vector by adding 10 integers into it.</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Once done changing the object, release the lock so that other threads</span>
</span><span class='line'>    <span class="c1">// can work with it. If we forget to unlock it, the process will basically</span>
</span><span class='line'>    <span class="c1">// hang trying to lock the mutex again, rendering our program useless.</span>
</span><span class='line'>    <span class="n">res</span><span class="p">.</span><span class="n">mutex</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code is a classic example of an error that could lead to serious consequences. The problem is that anything could happen in between of <code>mutex.lock()</code> and <code>mutex.unlock()</code> statements, and the <code>mutex.unlock()</code> statement may not be executed shall <code>data.emplace_back()</code> throw an exception, leaving the program in the locked-up state.</p>

<p>Taking a good care of exceptions is a concept called <strong>exception safety</strong>. The above code is indeed not exception safe. However, this is not only about exceptions. For instance, if <code>emplace_back()</code> method was not throwing an exception and return code was used to signal an error, the erroneous code could have looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">foo</span><span class="p">(</span><span class="n">shared_resource</span> <span class="o">&amp;</span> <span class="n">res</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">res</span><span class="p">.</span><span class="n">mutex</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">res</span><span class="p">.</span><span class="n">mutex</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exception safety is out of the equation, yet the code is buggy. This is why RAII should (almost) always be used. The correct code should look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">foo</span><span class="p">(</span><span class="n">shared_resource</span> <span class="o">&amp;</span> <span class="n">res</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example, <a href="http://en.cppreference.com/w/cpp/thread/lock_guard"><code>std::lock_guard</code></a> object is locking a mutex in its constructor and unlocks it in its destructor. Thanks to RAII, the destructor is guaranteed to be called when the object goes out of scope no matter what. C++ is full of such “guard” objects. Many of them are part of the standard library, but developers can always create their own.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;cctype&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">file</span><span class="p">(</span><span class="s">&quot;test.txt&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">((</span><span class="n">file</span> <span class="o">&gt;&gt;</span> <span class="n">c</span><span class="p">))</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">isalpha</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">?</span> <span class="n">c</span> <span class="o">:</span> <span class="sc">&#39;*&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example, the file object will automatically close the file. In other words, C++ clearly wins this battle over RAII with all other languages since there is no need for any finally blocks, using statements or event Java’s new <code>try()</code> blocks.</p>

<p>What is interesting is that C#, Java, Python and other similar languages did not even have “using”-like statements for a long time. There was only <em>try-catch-finally</em> construct and programmers had no choice but to write a lot of boilerplate code. Albeit some programmers have consciously suffered from the lack of proper RAII support, many didn’t know that C++ not only supports RAII but also is the only language that does it properly. One day those guys wanted to write something in C++ and of course started to look for similar self-torture methods. Not able to find it, they asked Bjarne Stroustrup why doesn’t C++ provide a <code>finally</code> construct, and <a href="http://www.stroustrup.com/bs_faq2.html#finally">here is what he had to say</a>:</p>

<blockquote><p>Because C++ supports an alternative that is almost always better: The “resource acquisition is initialization” technique (TC++PL3 section 14.4). The basic idea is to represent a resource by a local object, so that the local object’s destructor will release the resource. That way, the programmer cannot forget to release the resource.
…
In a system, we need a “resource handle” class for each resource. However, we don’t have to have an “finally” clause for each acquisition of a resource. In realistic systems, there are far more resource acquisitions than kinds of resources, so the “resource acquisition is initialization” technique leads to less code than use of a “finally” construct.</p></blockquote>

<p>Boy was he right. Most today’s languages are now trying to resemble the same.</p>

<h2>RAII in C</h2>

<p>Everyone knows that C neither support exceptions nor it has a concept of RAII. That is not entirely true, but for the most part it is. You will not find anything about those features in C89, C99 or even C11 language standard specifications. Therefore, C developers have to be careful, disciplined, and clean up after themselves. Oftentimes, especially in somewhat low-level code like device driver, we can run into the code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">pci_probe</span><span class="p">(</span><span class="k">struct</span> <span class="n">pci_dev</span> <span class="o">*</span><span class="n">pci_dev</span><span class="p">,</span>
</span><span class='line'>                     <span class="k">const</span> <span class="k">struct</span> <span class="n">pci_device_id</span> <span class="o">*</span><span class="n">dev_id</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">my_dev</span> <span class="o">*</span><span class="n">dev</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dev</span> <span class="o">=</span> <span class="n">kzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">my_dev</span><span class="p">),</span> <span class="n">GFP_KERNEL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">dev</span><span class="p">))</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">on_err</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pci_set_drvdata</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">,</span> <span class="n">dev</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dev</span><span class="o">-&gt;</span><span class="n">pci_dev</span> <span class="o">=</span> <span class="n">pci_dev</span><span class="p">;</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">pci_enable_device</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">r</span><span class="p">))</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">on_enable_err</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pci_set_master</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pci_try_set_mwi</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dev</span><span class="o">-&gt;</span><span class="n">bar0</span> <span class="o">=</span> <span class="n">ioremap_nocache</span><span class="p">(</span><span class="n">pci_resource_start</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
</span><span class='line'>                                <span class="n">pci_resource_len</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">bar0</span><span class="p">))</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">on_bar0_map_err</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dev</span><span class="o">-&gt;</span><span class="n">bar2</span> <span class="o">=</span> <span class="n">ioremap_nocache</span><span class="p">(</span><span class="n">pci_resource_start</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>                                <span class="n">pci_resource_len</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">bar2</span><span class="p">))</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">on_bar2_map_err</span><span class="p">;</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">a2gx_add_cdev</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">on_cdev_err</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">on_cdev_err:</span>
</span><span class='line'>    <span class="n">iounmap</span><span class="p">(</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">bar2</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">on_bar2_map_err:</span>
</span><span class='line'>    <span class="n">iounmap</span><span class="p">(</span><span class="n">dev</span><span class="o">-&gt;</span><span class="n">bar0</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">on_bar0_map_err:</span>
</span><span class='line'>    <span class="n">pci_disable_device</span><span class="p">(</span><span class="n">pci_dev</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">on_enable_err:</span>
</span><span class='line'>    <span class="n">kfree</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">on_err:</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Many will find the above code difficult to read, hard to write, or both. Some would love to punch the author in the face for using goto. Others may not understand what is going on in there at all. But C is not just a programming language. C is a religion. For some, C code is a lot cleaner than anything else — nothing is hiding behind the scenes, what you see is what you get. The C code is usually thought trough — you have to think twice before you write it. In fact, some wouldn’t substitute it for anything else. At any rate, C developers usually cleanup after themselves.</p>

<p>On the other hand, the benefits or RAII are also obvious and there are people who would love to see a concept of RAII in C. But it is not a part of the language specification. However, imagine a world when programmers were not using things that are not standard. That world would have been terrible. Just imagine for a second that C++ developers wouldn’t have multi-threaded programs until C++11 standard was ratified with all of its quirks and perks like <code>std::thread</code>, <code>std::mutex</code>, <em>thread local storage</em> and so on.</p>

<p>Or how about not being able to specify symbol’s visibility or use other attributes? Luckily, being a non-standard feature doesn’t restrain people from using it. And as more people use some feature, more chances it has to be standardized. That said, C++11 now allows for generalized yet compiler-specific attributes, threading, static assertions, and tons of other stuff that was available before, was used before, too, but wasn’t a part of the standard. Well, now it is.</p>

<p>That being said, C also supports RAII. However, it is not part of the standard, at least not yet. Here is how it works — it is possible to specify a cleanup function for any auto function scope variable. In order to do that, a non-standard cleanup attribute must be specified. If you remember the example of a buggy non-exception-safe C++ function that uses a <em>mutex</em>, that code would look something like this in C:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">shared_resource</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pthread_mutex_t</span>   <span class="n">mutex</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">int_vector</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">shared_resource</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pthread_mutex_t</span>   <span class="n">mutex</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">int_vector</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">int_vector_push_back</span><span class="p">(</span><span class="k">struct</span> <span class="n">int_vector</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">foo</span><span class="p">(</span><span class="k">struct</span> <span class="n">shared_resource</span> <span class="o">*</span><span class="n">res</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="cm">/* Oops, cannot lock the mutex. */</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">int_vector_push_back</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* Oops, cannot add data into the vector! */</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* All is good */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Though it is a little bit hard to imagine that C programmer could write code like that. The code would probably look more like this (which is also functionally correct this time):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">test</span><span class="p">(</span><span class="k">struct</span> <span class="n">shared_resource</span> <span class="o">*</span><span class="n">res</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="n">int_vector_push_back</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">out:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below is a RAII-like version of the code where mutex is guaranteed to be unlocked automatically, so it is possible to simply return from the function at any given point without worrying about it. This code closely resembles the behavior of a C++ example using <code>std::lock_guard</code> where <code>lock_guard_ctor</code> mimics <code>std::lock_guard::lock_guard</code> constructor that locks a <em>mutex</em>, and the <code>lock_guard_dtor</code> function is like <code>std::lock_guard::~lock_guard</code> destructor that unlocks the <em>mutex</em> (if it was locked) and is guaranteed to be called automatically:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="nf">lock_guard_ctor</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="n">mutex</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">mutex</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">lock_guard_dtor</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">**</span><span class="n">mutex_ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span> <span class="o">=</span> <span class="o">*</span><span class="n">mutex_ptr</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mutex</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">foo</span><span class="p">(</span><span class="k">struct</span> <span class="n">shared_resource</span> <span class="o">*</span><span class="n">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">lock_guard</span>
</span><span class='line'>        <span class="n">__attribute__</span><span class="p">((</span><span class="n">cleanup</span><span class="p">(</span><span class="n">lock_guard_dtor</span><span class="p">)))</span>
</span><span class='line'>        <span class="o">=</span> <span class="n">lock_guard_ctor</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">lock_guard</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">int_vector_push_back</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code can also be simplified a bit with two simple steps. Step one is to have <code>lock_guard_ctor</code> and <code>lock_guard_dtor</code> functions defined somewhere else and be reusable. Because nobody writes custom constructors and destructor for a class every time they use it. Step number two is to get rid of a lot of typing by having a macro. For example, the common code that is written once could be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="nf">lock_guard_ctor</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="nf">lock_guard_dtor</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">**</span><span class="n">mutex_ptr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define LOCK_GUARD(name, mutex)                   \</span>
</span><span class='line'><span class="cp">    pthread_mutex_t * name                        \</span>
</span><span class='line'><span class="cp">        __attribute__((cleanup(lock_guard_dtor))) \</span>
</span><span class='line'><span class="cp">        = lock_guard_ctor((mutex))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the code using this feature becomes a lot simpler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">foo</span><span class="p">(</span><span class="k">struct</span> <span class="n">shared_resource</span> <span class="o">*</span><span class="n">res</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">LOCK_GUARD</span><span class="p">(</span><span class="n">lock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">int_vector_push_back</span><span class="p">(</span><span class="o">&amp;</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are two possible ways for a compiler to implement a cleanup attribute. If exceptions are not enabled, it would generate the boilerplate code similar to that otherwise written by the programmer manually. If exceptions are enabled then compiler would generate the code that executes a cleanup function during the stack unwinding (yes, there are exceptions in C, too).</p>

<p>Note that cleanup attribute cannot be used for global variables. constructor and destructor attributes should be used instead. The constructor attribute causes the function to be called automatically before execution enters <code>main()</code>. Similarly, the destructor attribute causes the function to be called automatically after <code>main()</code> completes or <code>exit()</code> is called. Functions with these attributes are useful for initializing data that is used implicitly during the execution of the program. It is also possible to manually control the order of execution by specifying priority number (optional).</p>

<p>The techniques described above are available at least in today’s leading C compilers — GCC and Clang. Remember, the future of the language is in hands of its users. If you really like the feature and it is not standard — use it, spread the world, write a feedback to compiler developers and language standard committee. It will definitely help to make it into the next standard revision.</p>

<p>Let the force be with you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++11 Final Override]]></title>
    <link href="http://741MHz.com/final-override/"/>
    <updated>2013-02-27T00:00:00-05:00</updated>
    <id>http://741MHz.com/final-override</id>
    <content type="html"><![CDATA[<h2>Preface</h2>

<p>The alternative name for this article is “How to protect yourself from others when it comes to polymorphism.” That is pretty much the primary purpose of two brand new C++ keywords introduced in C++11 — the <code>override</code> and <code>final</code>.</p>

<p>Those who have at least some experience in team-based C++ development must be aware of at least one of many pitfalls of polymorphism and virtual methods in particular. Let’s go over some of real-world problems that could easily force developers to run a debugger or read the code over and over again trying to figure out why the program is not working as expected.</p>

<h2>A Missing Virtual Function</h2>

<p>This could happen to anyone — there was a base class with a virtual function and developer has decided to overload it for a good reason. Everything was fine and the program worked as expected. But one day after, a fresh build simply stopped working, and the reason is not obvious. After spending some time debugging the program, it turned out that a function that should have been called does not appear to be called at all. What could be wrong?</p>

<p>Consider the following code where the Foo class is written by one developer while Bar was written by someone else and could even be part of another project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">do_very_important_stuff</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Foo</span><span class="o">::</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'>        <span class="n">do_some_more_important_stuff</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few years later a new developer joins the company and accidentally removes a virtual keyword from the <code>init()</code> method’s declaration of class <em>Foo</em>. How that could even happen, you may ask? Maybe he was learning Emacs and executed a <em>replace-regexp</em> command without noticing all of the changes. Or maybe he just read the <em>Code Refactoring</em> book and decided to improve the code but couldn’t check all of the usages of class <em>Foo</em> because they were in a different repository that he didn’t have access to. Who knows? Things happen. As a result, the <code>Bar::init()</code> is no longer called because it does no longer override its base method. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;memory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Foo</span><span class="o">::</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The code is working!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="n">foo</span><span class="p">(</span><span class="k">new</span> <span class="n">Bar</span><span class="p">());</span>
</span><span class='line'>    <span class="n">foo</span><span class="o">-&gt;</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above program will not print an expected “The code is working!” line and someone would definitely waste some time trying to figure out why, especially if the project has a few million lines of code.</p>

<h2>A Million Dollars Typo</h2>

<p>Typos can also cause a lot of troubles. For example, developers can misspell the name of the method when overriding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;memory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">doSomeVeryImportantWork</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">doSomeVeryInportantWork</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The code is working!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="n">foo</span><span class="p">(</span><span class="k">new</span> <span class="n">Bar</span><span class="p">());</span>
</span><span class='line'>    <span class="n">foo</span><span class="o">-&gt;</span><span class="n">doSomeVeryImportantWork</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above program prints nothing despite the expectations and the reason is not immediately obvious.</p>

<h2>Signature Changes</h2>

<p>Signature change is another seemingly innocent change that may potentially waste a log of valuable time when not accounted for properly. For example, the base class’s <code>init()</code> function is changed from this:</p>

<pre><code>virtual void init() { }
</code></pre>

<p>… to this:</p>

<pre><code>virtual void init(int x = 0) {
}
</code></pre>

<p>The whole project still compiles just fine. Yet the program doesn’t work as expected anymore.</p>

<p>It’s also possible to accidentally override someone’s virtual function, etc. The list of such gotchas can go on and on. For those who can relate to this — you must know that you are not alone! C++ developers including myself have dealt with this and similar problems for the past few decades.</p>

<p>Luckily, since introduction of the C++11 the sun is shining on our side of the fence!</p>

<h2>We Override!</h2>

<p>Instead of using (or not using) a <code>virtual</code> keyword and assuming the base class has the method being overridden, we can now use the brand new <code>override</code> keyword. The compiler will then make sure that a method declared with that keyword really overrides the base method. And if that turns out to be not the case, the code won’t compile and the error would be caught during compilation, which is a lot better than debugging. The following is the new version of the first example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="n">override</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Foo</span><span class="o">::</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The code is working!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compilation fails if the base class`s init() method is no longer there:</p>

<pre><code>error: ‘int Bar::init()’ marked override, but does not override
</code></pre>

<h2>It’s Final!</h2>

<p>The second keyword is <code>final</code>. It is a little bit less useful but is still a good self-defense mechanism against unintended usage and/or code changes.</p>

<p>What it means is that a method marked as final is not only virtual and must override its base but that nobody else can further override it. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;memory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="o">~</span><span class="n">Bar</span><span class="p">()</span> <span class="n">override</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="n">final</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Foo</span><span class="o">::</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;This code works!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="n">foo</span><span class="p">(</span><span class="k">new</span> <span class="n">Bar</span><span class="p">());</span>
</span><span class='line'>    <span class="n">foo</span><span class="o">-&gt;</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code is sound and secure. But if somebody else would try to write a class like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">BetterBar</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Bar</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">BetterBar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="o">~</span><span class="n">BetterBar</span><span class="p">()</span> <span class="n">override</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">init</span><span class="p">()</span> <span class="n">override</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Bar</span><span class="o">::</span><span class="n">init</span><span class="p">();</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Even better init() function!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>… a compiler would tell them that they are wrong by issuing an error: </p>

<pre><code>error: virtual function ‘virtual int BetterBar::init()’
error: overriding final function ‘virtual int Bar::init()’
</code></pre>

<p>The <code>final</code> keyword can also be applied to the whole class in order to prevent further derivation from it. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="n">final</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Bar</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>If anyone tries to inherit from Bar, the compiler issues an error: </p>

<pre><code>error: cannot derive from ‘final’ base ‘Bar’ in derived type ‘BetterBar’
</code></pre>

<p>What is interesting is that almost the same effect can be achieved in a less obvious way by applying the <code>final</code> keyword to a virtual destructor of either base (which is not the same as <code>final</code> in this case because it introduces a virtual table) or any derived class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span> <span class="c1">// You cannot derive from me!</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">Foo</span><span class="p">()</span> <span class="n">final</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Template containers from the standard C++ library might be good candidates to be marked with a final keyword, as it is generally not a good idea to derive from them in almost every case.</p>

<h2>Conclusion</h2>

<p>C++11 introduces two important keywords in relation to polymorphism and inheritance — the <code>override</code> and <code>final</code>. Using those keywords should become a habit of any C++ developer. It is worth using every time except when writing a base class. This will make the code clear, maintainable, and potentially save hours that would have been otherwise wasted chasing an error in debugger.</p>

<h2>References</h2>

<ul>
<li><a href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2009/n2928.htm">N2928</a> &ndash; Explicit Virtual Overrides</li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm">N3206</a> &ndash; Override control: Eliminating Attributes</li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm">N3272</a> &ndash; Follow-up on override control</li>
<li><a href="http://clang.llvm.org/cxx_status.html">Clang C++11 Status Report</a></li>
<li><a href="http://gcc.gnu.org/projects/cxx0x.html">GCC C++11 Status Report</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Not To Write a Signal Handler]]></title>
    <link href="http://741MHz.com/signal-handler/"/>
    <updated>2013-01-15T00:00:00-05:00</updated>
    <id>http://741MHz.com/signal-handler</id>
    <content type="html"><![CDATA[<p>Back in the day, I was reading a book about UNIX® programming and have learned how to write a signal handler. It was a long time ago and I don’t remember the book, but to this day the way described in that book is something that shows up in Google’s top results when you search for “How to write a signal handler”. Here it is — a simple, elegant solution to the world’s toughest problem:</p>

<figure class='code'><figcaption><span>A simple, elegant solution to the world’s toughest problem.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">my_sig_handler</span><span class="p">(</span><span class="kt">int</span> <span class="n">signum</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Received interrupt signal!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">signal</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">my_sig_handler</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Doing useful stuff...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="cm">/* Sleep is not only useful, it is essential! */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now imagine for a second that instead of a simple invocation of <code>sleep()</code> in the body of the <code>main()</code> function, just after the <code>printf()</code>, there was some very important code running a life support system and someone’s life was really dependent on that. What would have happened? Someone would not have been alive for long — that’s for sure. And the terrible signal handling is to blame and here is why…</p>

<h2>You Have Been Warned</h2>

<p>Let’s take a quick look at Linux® manual page for a <code>signal()</code> call. You can find by typing <code>man 2 signal</code> in the command line, or by checking it out online, here — <a href="http://man7.org/linux/man-pages/man2/signal.2.html">http://man7.org/linux/man-pages/man2/signal.2.html</a>. The first sentence in the manual page introduces you to the <code>signal()</code> call. The second sentence, now in bold, warns you, and I quote:</p>

<blockquote><p>Avoid its use: use sigaction(2) instead.</p></blockquote>

<h2>Your Computer Might Take a Trip to a Grocery Store</h2>

<p>Continuing reading the manual page, the very first note under the NOTES section is this:</p>

<blockquote><p>The effects of signal() in a multithreaded process are unspecified.</p></blockquote>

<p>This is called <a href="http://en.wikipedia.org/wiki/Unspecified_behavior">Unspecified Behavior</a>. What it means is that standard does not say anything as for how the function should behave in a multi-threaded environment. Therefore, it may exhibit a different behavior on different systems including different versions of the same system, at discretion of those who implement it. Your mileage may vary.</p>

<p>Even if your code does not explicitly use multiple threads, you are still in danger — it might be used as part of a bigger program in multi-threaded environment. But even if that’s not that case — hey, tomorrow you might want to do that. Do you really want to screw yourself upfront by using this bad <code>signal()</code> function? Think twice.</p>

<h2>Asynchronicity &amp; Reentrancy</h2>

<p>Signals are asynchronous by their nature. Another signal may be delivered to the process while the previous signal is still being “processed”. Therefore, signal handler must not introduce unwanted side effects, must be fully reentrant and cannot use any non-reentrant code — neither explicitly nor implicitly. Now take a quick look at the famous example mentioned at the beginning — there is a nice <code>printf()</code> right in the signal handler code. This is a life threatening piece of code because <code>printf()</code> is non-reentrant. In other words, it is possible that <code>printf()</code> function will get interrupted before it finishes and get called again as part of another signal handler. If that case the program will simply <a href="http://en.wikipedia.org/wiki/Deadlock">deadlock</a>.</p>

<h2>Async-Signal-Safe Functions</h2>

<p>The section 7 of the manual page about signal (which you can see by typing <code>man 7 signal</code> in your terminal or read online here — <a href="http://man7.org/linux/man-pages/man7/signal.7.html">http://man7.org/linux/man-pages/man7/signal.7.html</a>) states the following:</p>

<blockquote><p><strong>Async-signal-safe functions</strong>
A signal handler function must be very careful, since processing elsewhere may be interrupted at some arbitrary point in the execution of the program. POSIX has the concept of “safe function”. If a signal interrupts the execution of an unsafe function, and handler calls an unsafe function, then the behavior of the program is undefined.</p></blockquote>

<p>And then it lists all async-signal-safe functions. So if you don’t know what functions are safe to use inside a signal handler and what functions are not — refer to that list and make sure you are not doing anything dangerous.</p>

<h2>Better Safe Than Sorry</h2>

<p>What is the best way not to become a drag addict? Not to take drugs in the first place. What is the best way to write a safe signal handler? Not to write it all. OK, I am just kidding. Seriously though — if you really want your signal handler to be safe and portable, consider not doing anything inside it except modifying a global <a href="http://en.wikipedia.org/wiki/Volatile_variable">volatile</a> variable of <a href="http://en.cppreference.com/w/cpp/utility/program/sig_atomic_t"><code>sig_atomic_t</code></a> type. Taking all of the above into account, below is an example of how a safe signal handler may look like in real life (note the absence of <code>signal()</code> function in the code):</p>

<figure class='code'><figcaption><span>Simple and safe signal handling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">volatile</span> <span class="n">sig_atomic_t</span> <span class="n">got_signal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">my_sig_handler</span><span class="p">(</span><span class="kt">int</span> <span class="n">signo</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">got_signal</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sigaction</span> <span class="n">sa</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sigaction</span><span class="p">));</span>
</span><span class='line'>    <span class="n">sa</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">my_sig_handler</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sigaction</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">perror</span><span class="p">(</span><span class="s">&quot;sigaction&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">got_signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">got_signal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Received interrupt signal!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Doing useful stuff...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="cm">/* Sleep is not only useful, it is essential! */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Modern Signal Handling</h2>

<p>It is the 2013th year in the Common Era at the moment of this writing and you might think that people should have came up with something better in terms of signal handling at this time. The truth is that they did. It is just not that well known yet due to a huge momentum of outdated information still overflowing the Internet.</p>

<h3>FreeBSD, NetBSD, OS X, iOS…</h3>

<p>In the above family of operating systems, the modern way of handling signals is to use <a href="http://en.wikipedia.org/wiki/Kqueue">Kqueue</a> — a scalable event notification mechanism. Here is an example:</p>

<figure class='code'><figcaption><span>Kqueue Signal Handling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/event.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">kq</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">kevent</span> <span class="n">ke</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">timespec</span> <span class="n">timeout</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sigaction</span> <span class="n">sa</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Block the signal we want to process with kevent first.</span>
</span><span class='line'><span class="cm">       This is needed because kevent has lower precedence. */</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sigaction</span><span class="p">));</span>
</span><span class='line'>    <span class="n">sa</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="n">SIG_IGN</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sigaction</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Create kqueue... */</span>
</span><span class='line'>    <span class="n">kq</span> <span class="o">=</span> <span class="n">kqueue</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">kq</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/* Add a signal event */</span>
</span><span class='line'>    <span class="n">EV_SET</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ke</span><span class="p">,</span> <span class="n">SIGINT</span><span class="p">,</span> <span class="n">EVFILT_SIGNAL</span><span class="p">,</span> <span class="n">EV_ADD</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">kevent</span><span class="p">(</span><span class="n">kq</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ke</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/* Set a timeout (we no longer need to use a blocking sleep(1),</span>
</span><span class='line'><span class="cm">       and this is great! */</span>
</span><span class='line'>    <span class="n">timeout</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="cm">/* To sleep for one second */</span>
</span><span class='line'>    <span class="n">timeout</span><span class="p">.</span><span class="n">tv_nsec</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Dispatch events */</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="n">kevent</span><span class="p">(</span><span class="n">kq</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ke</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">timeout</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* Got event(s) to dispatch. Note that we can do whatever the hell</span>
</span><span class='line'><span class="cm">               we want here because we are __not__ in the signal handler. */</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">ke</span><span class="p">.</span><span class="n">ident</span> <span class="o">==</span> <span class="n">SIGINT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Received interrupt signal!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* Timeout elapsed */</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Doing useful stuff...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EINTR</span><span class="p">)</span>
</span><span class='line'>                <span class="k">continue</span><span class="p">;</span> <span class="cm">/* System call interrupted - just restart */</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span> <span class="cm">/* Something went wrong. */</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Linux</h3>

<p>Linux provides <code>signalfd()</code> for handling signals. The beauty of it is that it may be used by itself, or may be combined with event notification mechanisms such as <code>epoll()</code> and friends. The manual page for <code>signalfd()</code> comes with a good example, so I don’t even have to write one. Here it is:</p>

<figure class='code'><figcaption><span>Signalfd & Epoll Signal Handling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;sys/signalfd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define handle_error(msg)                               \</span>
</span><span class='line'><span class="cp">    do { perror(msg); exit(EXIT_FAILURE); } while (0)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">sigset_t</span> <span class="n">mask</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sfd</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">signalfd_siginfo</span> <span class="n">fdsi</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ssize_t</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sigemptyset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mask</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sigaddset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mask</span><span class="p">,</span> <span class="n">SIGINT</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sigaddset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mask</span><span class="p">,</span> <span class="n">SIGQUIT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Block signals so that they aren&#39;t handled</span>
</span><span class='line'><span class="cm">       according to their default dispositions */</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sigprocmask</span><span class="p">(</span><span class="n">SIG_BLOCK</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mask</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">handle_error</span><span class="p">(</span><span class="s">&quot;sigprocmask&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sfd</span> <span class="o">=</span> <span class="n">signalfd</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mask</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sfd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">handle_error</span><span class="p">(</span><span class="s">&quot;signalfd&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">sfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">fdsi</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">signalfd_siginfo</span><span class="p">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">!=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">signalfd_siginfo</span><span class="p">))</span>
</span><span class='line'>            <span class="n">handle_error</span><span class="p">(</span><span class="s">&quot;read&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">fdsi</span><span class="p">.</span><span class="n">ssi_signo</span> <span class="o">==</span> <span class="n">SIGINT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Got SIGINT</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">fdsi</span><span class="p">.</span><span class="n">ssi_signo</span> <span class="o">==</span> <span class="n">SIGQUIT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Got SIGQUIT</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_SUCCESS</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Read unexpected signal</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Make the world a better place!</h2>

<p>Please make the world a better place by writing correct and safe signal handling code.</p>

<p>Thank you very much for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erasing Vector The Smart Way]]></title>
    <link href="http://741MHz.com/vector-erase/"/>
    <updated>2013-01-14T00:00:00-05:00</updated>
    <id>http://741MHz.com/vector-erase</id>
    <content type="html"><![CDATA[<p>In the C++ world, <a href="http://en.cppreference.com/w/cpp/container/vector"><code>std::vector</code></a> is a <a href="http://en.wikipedia.org/wiki/Sequence_container_(C%2B%2B">sequence container</a>) that encapsulates <a href="http://en.wikipedia.org/wiki/Dynamic_array">dynamic size arrays</a>. One of the main perks of the vector is the fact that elements are stored <strong>contiguously</strong>. In other words, a pointer to an element of a vector may be passed to any function that expects a pointer to an element of array. Or simply put — <code>std::vector</code> is very close to a <a href="http://www.cplusplus.com/doc/tutorial/arrays/">plain old-school C-style array</a>, yet it provides developers with a lot of C++ perks like automatic memory management, bounds checking and more. Unfortunately, <code>std::vector</code> is so great that many developers are using it without really thinking too much about the underlying implementation and its downsides.</p>

<h2>Erase Trap</h2>

<p>A common programming task is to remove one or more elements from the vector. Luckily, <code>std::vector</code> provides a wonderful method called <code>erase()</code> that does exactly that. So what’s the big deal? It’s a trap!</p>

<p>C++ is just like medicine — it is both a cure and a disease. Vector is no exception. Its contiguous memory layout may heal, or it may kill. In this case it is a serial killer. Let’s see why.</p>

<h2>The Innocent Piece of Code</h2>

<p>Let’s take a look at the real-world example that I ran into a few days ago. The goal was to remove all even numbers from a vector, leaving only odd ones. Here is how it was implemented:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">array</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">it</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">it</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">it</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="o">++</span><span class="n">it</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Logically thinking, the code is very sound — every element is being checked and removed only if it matches a given criteria. Developer even took extra care not to access invalidated iterator. Sounds like a great job. Nice, simple, and it works. Or does it?</p>

<h2>The Problem</h2>

<p>No, it does not. There is one big problem with that code that makes it totally useless. It takes about 55 seconds to run on just one million random elements. Why does that happen, you may ask? The developer  fell into a common trap! That happened because the elements of the vector are stored contiguously, in a contiguous memory and the whole vector is shifted left every time an element is erased. In other words — one does not simply erase an element that is not at the end of the vector.</p>

<h2>The Solution</h2>

<p>Here is the right way of doing this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">array</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">remove_if</span><span class="p">(</span>
</span><span class='line'>      <span class="n">array</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">array</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">v</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="n">array</span><span class="p">.</span><span class="n">end</span><span class="p">()</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code does the job in only 5 milliseconds. That is about eleven thousand times faster. What kind of sorcery is that? Very simple — <a href="http://en.cppreference.com/w/cpp/algorithm/remove"><code>std::remove_if()</code></a> does not erase elements from the vector. It does’t remove anything either. Just a good naming joke. So what the hell it does? It re-arranges elements in such a way that elements to be erased are moved towards the end of a vector. Once the job is done, all elements are erased from the vector with a single invocation of <code>erase()</code>. As a result, the whole vector is not shifted tens of thousands of times and runs a lot faster.</p>

<h2>The Conclusion</h2>

<p>There ain’t no such thing as a free lunch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Switch Statement Down to Machine Code]]></title>
    <link href="http://741MHz.com/switch/"/>
    <updated>2013-01-13T00:00:00-05:00</updated>
    <id>http://741MHz.com/switch</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Most of us know what a <a href="http://en.wikipedia.org/wiki/Switch_statement"><em>switch</em> statement</a> is and have probably been using it very often. No wonder why — switch statement is simple yet extremely expressive. It allows keeping the code compact while describing complex <a href="http://en.wikipedia.org/wiki/Control_flow">control flow</a>. Putting the <a href="http://en.wikipedia.org/wiki/Syntactic_sugar">syntactic sugar</a> aside, most developers also believe that using a switch statement results in a lot better, faster code. Not many knows if that is really true and why. The most common speculations supporting superior switch statement performance are:</p>

<ul>
<li>Compilers implement switch as a <a href="http://en.wikipedia.org/wiki/Branch_table">jump table</a> and it is faster than an average number of conditional branches that the code would have taken otherwise. Therefore, the code generated from switch expressions is executed faster than if-then-else.</li>
<li>Compilers generate a <a href="http://en.wikipedia.org/wiki/Binary_search_algorithm">binary lookup</a> table to match the input value when using switch statement. The binary search algorithm’s worst performance is O(log n). It is a faster than O(n) worst case performance of a <a href="http://en.wikipedia.org/wiki/Linear_search">linear search</a>. Therefore, switch is faster.</li>
</ul>


<p>It all sounds good in theory. Yet not many understand switch statements down to the machine code level and even less have checked what their compilers do. By the way, why cannot a compiler optimize an if-then-else code the same way it optimizes a switch? Maybe it can? Let’s find out!</p>

<p>We’ll use the two most popular production quality compilers — GCC (version 4.7.2, released 20 Sep 2012) and Clang (version 3.0, released December 01, 2011).</p>

<p>In both cases, we will be compiling the code for Intel® Xeon® <a href="http://ark.intel.com/products/47924/Intel-Xeon-Processor-E5630-12M-Cache-2_53-GHz-5_86-GTs-Intel-QPI">E5630</a> CPU with enabled compiler optimizations (either «-O2», «-O3» or «-Os»).</p>

<p>The knowledge of <a href="http://en.wikipedia.org/wiki/X86-64">x86_64</a> <a href="http://en.wikipedia.org/wiki/Assembly_language">assembly language</a> is not required but some understanding of what it is and how CPU process low-level instructions might be helpful.</p>

<h2>Simple Switch</h2>

<p>Let’s start by looking at a very simple switch statement. It has six case labels, does not have a default case, and has no fall-trough cases so each case is followed by a break statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;zero</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;one</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;two</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;three</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;four</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;five</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It would be logical to assume that the above code would be translated into a jump table. To verify this assumption, we need to disassemble the binary generated by the compiler and check how the machine code looks like.</p>

<p>Below is a disassembly of the binary generated by GCC compiler. Each line has a comment on the right that starts with <code>;</code> character:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mf">4004f</span><span class="mi">7</span><span class="o">:</span>       <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>                    <span class="p">;</span> <span class="n">Compare</span> <span class="n">the</span> <span class="n">value</span> <span class="n">with</span> <span class="mf">5.</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">a:</span>       <span class="n">ja</span>     <span class="mi">400518</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x38</span><span class="o">&gt;</span>         <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span> <span class="k">if</span> <span class="n">the</span> <span class="n">value</span> <span class="n">is</span> <span class="n">greater</span> <span class="n">than</span> <span class="mf">5.</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">c:</span>       <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>                    <span class="p">;</span> <span class="n">Clear</span> <span class="mi">32</span> <span class="n">to</span> <span class="mi">63</span> <span class="n">bits</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">e:</span>       <span class="n">xchg</span>   <span class="n">ax</span><span class="p">,</span><span class="n">ax</span>                      <span class="p">;</span> <span class="n">NOP</span>
</span><span class='line'><span class="mi">400500</span><span class="o">:</span>       <span class="n">jmp</span>    <span class="n">QWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rax</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="mh">0x400738</span><span class="p">]</span> <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">address</span> <span class="mh">0x400738</span><span class="p">[</span><span class="o">%</span><span class="n">rax</span><span class="p">]</span>
</span><span class='line'><span class="mi">400507</span><span class="o">:</span>       <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x40072c</span>               <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;five&quot;</span> <span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">40050</span><span class="nl">c:</span>       <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">400511</span><span class="o">:</span>       <span class="n">nop</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="mh">0x0</span><span class="p">]</span>        <span class="p">;</span> <span class="n">NOP</span>
</span><span class='line'><span class="mi">400518</span><span class="o">:</span>       <span class="n">xor</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>                    <span class="p">;</span> <span class="n">Zero</span> <span class="k">return</span> <span class="n">code</span><span class="p">.</span>
</span><span class='line'><span class="mi">40051</span><span class="nl">a:</span>       <span class="n">add</span>    <span class="n">rsp</span><span class="p">,</span><span class="mh">0x8</span>                    <span class="p">;</span> <span class="n">Pop</span> <span class="n">stack</span> <span class="p">(</span><span class="n">stack</span> <span class="n">grows</span> <span class="n">inward</span><span class="p">).</span>
</span><span class='line'><span class="mi">40051</span><span class="nl">e:</span>       <span class="n">ret</span>                               <span class="p">;</span> <span class="n">Return</span> <span class="n">from</span> <span class="n">the</span> <span class="n">main</span><span class="p">()</span> <span class="n">function</span><span class="p">.</span>
</span><span class='line'><span class="mf">40051f</span><span class="o">:</span>       <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400727</span>               <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;four&quot;</span> <span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">400524</span><span class="o">:</span>       <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">400529</span><span class="o">:</span>       <span class="n">jmp</span>    <span class="mi">400518</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x38</span><span class="o">&gt;</span>         <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">40052</span><span class="nl">b:</span>       <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400714</span>               <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;three&quot;</span> <span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">400530</span><span class="o">:</span>       <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">400535</span><span class="o">:</span>       <span class="n">jmp</span>    <span class="mi">400518</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x38</span><span class="o">&gt;</span>         <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400537</span><span class="o">:</span>       <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400719</span>               <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;two&quot;</span> <span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">40053</span><span class="nl">c:</span>       <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">400541</span><span class="o">:</span>       <span class="n">jmp</span>    <span class="mi">400518</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x38</span><span class="o">&gt;</span>         <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400543</span><span class="o">:</span>       <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x40071d</span>               <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;one&quot;</span> <span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">400548</span><span class="o">:</span>       <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">40054</span><span class="nl">d:</span>       <span class="n">nop</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rax</span><span class="p">]</span>            <span class="p">;</span> <span class="n">NOP</span>
</span><span class='line'><span class="mi">400550</span><span class="o">:</span>       <span class="n">jmp</span>    <span class="mi">400518</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x38</span><span class="o">&gt;</span>         <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400552</span><span class="o">:</span>       <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400721</span>               <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;zero&quot;</span> <span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">400557</span><span class="o">:</span>       <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">40055</span><span class="nl">c:</span>       <span class="n">jmp</span>    <span class="mi">400518</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x38</span><span class="o">&gt;</span>         <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">40055</span><span class="nl">e:</span>       <span class="n">xchg</span>   <span class="n">ax</span><span class="p">,</span><span class="n">ax</span>                      <span class="p">;</span> <span class="n">Unreachable</span> <span class="n">NOP</span> <span class="p">(</span><span class="n">padding</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, GCC has generated the code that uses an indirect jump transferring execution of the program to a code location depending on the input value using a combination of cmp and ja instructions. This is a simple case of a jump table.</p>

<p>To see what other compilers might do, let’s look at the disassembly of the same program compiler by Clang:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mi">4005</span><span class="nl">a7:</span> <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>                     <span class="p">;</span> <span class="n">Compare</span> <span class="n">the</span> <span class="n">value</span> <span class="n">with</span> <span class="mf">5.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">aa:</span> <span class="n">ja</span>     <span class="mf">4005e2</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x52</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span> <span class="k">if</span> <span class="n">value</span> <span class="n">is</span> <span class="o">&gt;</span> <span class="mf">5.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ac:</span> <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>                     <span class="p">;</span> <span class="n">Convert</span> <span class="mi">32</span><span class="o">-</span><span class="n">bit</span> <span class="n">to</span> <span class="mi">64</span><span class="o">-</span><span class="n">bit</span> <span class="p">(</span><span class="n">clear</span> <span class="n">upper</span> <span class="n">half</span><span class="p">).</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ae:</span> <span class="n">jmp</span>    <span class="n">QWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rax</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="mh">0x4006e0</span><span class="p">]</span>  <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">a</span> <span class="n">relative</span> <span class="n">address</span> <span class="k">using</span> <span class="o">%</span><span class="n">rax</span> <span class="n">as</span> <span class="n">the</span> <span class="n">index</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">b5:</span> <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400710</span>                <span class="p">;</span> <span class="n">Push</span> <span class="s">&quot;zero&quot;</span> <span class="n">as</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ba:</span> <span class="n">jmp</span>    <span class="mi">4005</span><span class="n">dd</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4d</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">print</span> <span class="o">&amp;</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">bc:</span> <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400715</span>                <span class="p">;</span> <span class="n">Push</span> <span class="s">&quot;one&quot;</span> <span class="n">as</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">c1:</span> <span class="n">jmp</span>    <span class="mi">4005</span><span class="n">dd</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4d</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">print</span> <span class="o">&amp;</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">c3:</span> <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400719</span>                <span class="p">;</span> <span class="n">Push</span> <span class="s">&quot;two&quot;</span> <span class="n">as</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">c8:</span> <span class="n">jmp</span>    <span class="mi">4005</span><span class="n">dd</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4d</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">print</span> <span class="o">&amp;</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ca:</span> <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x40071d</span>                <span class="p">;</span> <span class="n">Push</span> <span class="s">&quot;three&quot;</span> <span class="n">as</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">cf:</span> <span class="n">jmp</span>    <span class="mi">4005</span><span class="n">dd</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4d</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">print</span> <span class="o">&amp;</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">d1:</span> <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400723</span>                <span class="p">;</span> <span class="n">Push</span> <span class="s">&quot;four&quot;</span> <span class="n">as</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">d6:</span> <span class="n">jmp</span>    <span class="mi">4005</span><span class="n">dd</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4d</span><span class="o">&gt;</span>          <span class="p">;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">print</span> <span class="o">&amp;</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">d8:</span> <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400728</span>                <span class="p">;</span> <span class="n">Push</span> <span class="s">&quot;five&quot;</span> <span class="n">as</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">dd:</span> <span class="n">call</span>   <span class="mi">400450</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>           <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span> <span class="p">(</span><span class="n">printing</span> <span class="n">point</span><span class="p">).</span>
</span><span class='line'><span class="mf">4005e2</span><span class="o">:</span> <span class="n">xor</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>                     <span class="p">;</span> <span class="n">Zero</span> <span class="k">return</span> <span class="p">(</span><span class="n">exit</span> <span class="n">point</span><span class="p">).</span>
</span><span class='line'><span class="mf">4005e4</span><span class="o">:</span> <span class="n">pop</span>    <span class="n">rbp</span>                         <span class="p">;</span> <span class="n">Pop</span> <span class="n">stack</span> <span class="n">frame</span><span class="p">.</span>
</span><span class='line'><span class="mf">4005e5</span><span class="o">:</span> <span class="n">ret</span>                                <span class="p">;</span> <span class="n">Return</span>
</span><span class='line'><span class="mf">4005e6</span><span class="o">:</span> <span class="n">nop</span>    <span class="n">WORD</span> <span class="n">PTR</span> <span class="nl">cs:</span><span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="n">rax</span><span class="o">*</span><span class="mi">1</span><span class="o">+</span><span class="mh">0x0</span><span class="p">]</span> <span class="p">;</span> <span class="n">NOP</span> <span class="p">(</span><span class="n">alignment</span><span class="o">/</span><span class="n">padding</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>From the above example, we can immediately tell that Clang has generated a more compact code by avoiding multiple calls to puts() function.</p>

<p>Interestingly enough, GCC can also eliminate multiple calls to puts() function and generate exactly the same code for the above switch statement as Clang does. To achieve this, we must specify «-Os» flag on the command line. This flags instructs the compiler to optimize the binary for small size.</p>

<p>Apart from this small difference in optimizing function calls, both compilers used a combination of cmp and ja functions to implement a jump table. From this we can draw a conclusion that for simple cases compilers do generate a jump table.</p>

<h2>Crafting a Jump Table</h2>

<p>To get a better understanding of a jump table mechanics, let’s consider creating one manually without using a switch statement. It is possible to create a jump table manually a few different ways.</p>

<p>The first way of writing a jump table is to use an assembler language. It is low level programming language that does not have high-level constructs such as if-then-else or switch, but it allows to use processor instructions directly, making it possible to manually employ “cmp”, “ja” or other instructions to implement a functional equivalent of the code generated by compilers. This would have been very time consuming, require much higher understanding of the assembly language, result in less portable and hard to maintain code.</p>

<p>It is also possible to code a logical equivalent of a jump table in C, without using a switch statement. To do this, we could create an array that holds function pointers, and then call a function using an index to this array. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">zero</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;zero&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">one</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;one&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">two</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;two&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">table</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">zero</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">one</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">two</span> <span class="p">};</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/* Read the value of `i` from user</span>
</span><span class='line'><span class="cm">       input or other source */</span>
</span><span class='line'>    <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">]();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This, however, would only be a logical equivalent of the jump table, but not a functional one. The main difference in functionality is that jump table transfers control to a specified location directly instead of calling a function.
To achieve a functional equivalent of the jump table in C or C++, we must structure the code in such a way as to avoid function calls. We must create an array of addresses where the control is to be transferred, instead of array of functions. One of the possible ways of doing this is to label our code and create an array that store labels instead of functions. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">jump_table</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="o">&amp;&amp;</span><span class="n">print_0</span><span class="p">,</span> <span class="o">&amp;&amp;</span><span class="n">print_1</span><span class="p">,</span> <span class="o">&amp;&amp;</span><span class="n">print_2</span><span class="p">,</span>
</span><span class='line'>                <span class="o">&amp;&amp;</span><span class="n">print_3</span><span class="p">,</span> <span class="o">&amp;&amp;</span><span class="n">print_4</span><span class="p">,</span> <span class="o">&amp;&amp;</span><span class="n">print_5</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>        <span class="n">v</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">v</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>                <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>        <span class="k">goto</span> <span class="o">*</span><span class="n">jump_table</span><span class="p">[</span><span class="n">v</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nl">print_0:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;zero</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="nl">print_1:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;one</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="nl">print_2:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;two</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="nl">print_3:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;three</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="nl">print_4:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;four</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="nl">print_5:</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;five</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'><span class="nl">out:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code would result in exactly the same binary as produced by GCC for a simple switch statement example we have reviewed in the first chapter. It cannot be considered readable or easily maintainable, but it could have been used for performance reasons if C or C++ language did not have a switch statement construct.</p>

<p>Note that despite being used by low-level developers from time to time, the above code is not standard. It is neither standard C nor C++ is none of those languages support taking address of a label. Despite that, this feature is implemented as a nonstandard extension by most production grade C and C++ compilers.</p>

<h2>Trivial Switch</h2>

<p>Modern processors employ a wide variety of optimization techniques to speed up the execution of computer programs. One of those techniques is branch prediction. It tries to guess which way a branch of the logic will go before this is known for sure. In a high-level programming languages such as C, branches are formed by if-then-else structures, goto instructions, different kinds of loop statements, switch statement and other constructs.</p>

<p>How processors implement branch prediction is largely a trade secret. It is well known, however, that this technique is less efficient if processor runs into indirect branch instruction, such as that used in jump tables code. In other words, a single indirect jump instruction is relatively more expensive than a simple branch, such as generated by if-then construct.</p>

<p>This means that for some architectures, it is possible that a simple if-then-else statement with a few comparisons and direct jump instructions might theoretically execute faster than a single indirect jump instruction. In other words, if compilers always generate a jump table for a switch statement, then we could write a more efficient code (from execution time perspective) by avoiding using a switch and resorting to if-then-else.</p>

<p>The cost ratio of compare and jump instructions to indirect jump instruction is not known without experimentation. How much if-then-else branches can we take before its execution time would be slower than that of a single indirect jump? It is also not clear whether compilers take care of this or not. To find out, we must experiment. Since our initial switch statement had six case labels, we must keep reducing the number of labels, disassemble the resulting binary on every stage and compare the results to see if the generated code is functionally different.</p>

<h3>Five Cases</h3>

<p>The first step is to remove a single label from the switch, effectively reducing a number of case labels to five. By doing so, nothing has changed regarding how compilers handle switch statement in case with both GCC and Clang compilers.</p>

<h3>Four Cases</h3>

<p>Reducing a number of cases further results in some interesting changes. With only four cases in a switch, Clang continues to generate a jump table as in all previous cases. GCC, on the other hand, stops using a jump table and resorts to simple comparison equivalent to if-then-else. Below is a disassembled binary demonstrating what GCC does in this case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mf">4004f</span><span class="mi">4</span><span class="o">:</span>  <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x1</span>             <span class="p">;</span> <span class="n">Compare</span> <span class="n">value</span> <span class="n">with</span> <span class="mf">1.</span>
</span><span class='line'><span class="mf">4004f</span><span class="mi">7</span><span class="o">:</span>  <span class="n">je</span>     <span class="mi">400514</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x34</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">If</span> <span class="n">value</span> <span class="n">is</span> <span class="mi">1</span><span class="p">,</span> <span class="n">go</span> <span class="n">there</span>
</span><span class='line'><span class="mf">4004f</span><span class="mi">9</span><span class="o">:</span>  <span class="n">jg</span>     <span class="mi">400501</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x21</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">If</span> <span class="n">value</span> <span class="n">is</span> <span class="n">greater</span> <span class="n">than</span> <span class="mi">1</span><span class="p">,</span> <span class="n">compare</span> <span class="n">more</span><span class="p">.</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">b:</span>  <span class="n">test</span>   <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>             <span class="p">;</span> <span class="n">Could</span> <span class="n">be</span> <span class="o">&lt;=</span> <span class="mf">0.</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mf">0.</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">d:</span>  <span class="n">je</span>     <span class="mi">40050</span><span class="n">d</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x2d</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Go</span> <span class="n">ptint</span> <span class="s">&quot;zero&quot;</span> <span class="k">if</span> <span class="n">matched</span> <span class="n">or</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">exit</span>
</span><span class='line'><span class="mf">4004ff</span><span class="o">:</span>  <span class="n">jmp</span>    <span class="mi">40052</span><span class="n">c</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4c</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Jump</span> <span class="n">to</span> <span class="n">exit</span> <span class="p">(</span><span class="n">value</span> <span class="n">was</span> <span class="n">not</span> <span class="n">zero</span><span class="p">)</span>
</span><span class='line'><span class="mi">400501</span><span class="o">:</span>  <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x2</span>             <span class="p">;</span> <span class="n">Value</span> <span class="n">was</span> <span class="o">&gt;</span> <span class="mf">1.</span> <span class="n">Compare</span> <span class="n">it</span> <span class="n">with</span> <span class="mf">2.</span>
</span><span class='line'><span class="mi">400504</span><span class="o">:</span>  <span class="n">je</span>     <span class="mi">40051</span><span class="n">b</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x3b</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Matched</span><span class="p">,</span> <span class="n">go</span> <span class="n">print</span> <span class="n">and</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400506</span><span class="o">:</span>  <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x3</span>             <span class="p">;</span> <span class="n">Was</span> <span class="o">!=</span> <span class="mf">2.</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mf">3.</span>
</span><span class='line'><span class="mi">400509</span><span class="o">:</span>  <span class="n">jne</span>    <span class="mi">40052</span><span class="n">c</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4c</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">exit</span> <span class="k">if</span> <span class="n">not</span> <span class="n">matched</span><span class="p">.</span>
</span><span class='line'><span class="mi">40050</span><span class="nl">b:</span>  <span class="n">jmp</span>    <span class="mi">400522</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x42</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Value</span> <span class="n">is</span> <span class="n">three</span><span class="o">!!!</span> <span class="n">Go</span> <span class="n">print</span> <span class="n">it</span><span class="p">.</span>
</span><span class='line'><span class="mi">40050</span><span class="nl">d:</span>  <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x4006e4</span>        <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;zero&quot;</span> <span class="n">as</span> <span class="n">parameter</span><span class="p">.</span>
</span><span class='line'><span class="mi">400512</span><span class="o">:</span>  <span class="n">jmp</span>    <span class="mi">400527</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x47</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Go</span> <span class="n">call</span> <span class="s">&quot;puts()&quot;</span> <span class="n">and</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400514</span><span class="o">:</span>  <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x4006e9</span>        <span class="p">;</span> <span class="n">End</span> <span class="n">up</span> <span class="n">here</span> <span class="k">if</span> <span class="n">value</span> <span class="n">is</span> <span class="mf">1.</span>
</span><span class='line'><span class="mi">400519</span><span class="o">:</span>  <span class="n">jmp</span>    <span class="mi">400527</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x47</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Go</span> <span class="n">call</span> <span class="s">&quot;puts()&quot;</span> <span class="n">and</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">40051</span><span class="nl">b:</span>  <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x4006ed</span>        <span class="p">;</span> <span class="n">Value</span> <span class="n">was</span> <span class="mf">2.</span> <span class="n">Set</span><span class="p">...</span>
</span><span class='line'><span class="mi">400520</span><span class="o">:</span>  <span class="n">jmp</span>    <span class="mi">400527</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x47</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="p">...</span> <span class="s">&quot;two&quot;</span> <span class="n">as</span> <span class="n">parameter</span> <span class="n">and</span> <span class="n">go</span> <span class="n">print</span><span class="p">.</span>
</span><span class='line'><span class="mi">400522</span><span class="o">:</span>  <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x4006f1</span>        <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;three&quot;</span> <span class="n">as</span> <span class="n">argument</span> <span class="n">to</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">400527</span><span class="o">:</span>  <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>   <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">40052</span><span class="nl">c:</span>  <span class="n">xor</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>             <span class="p">;</span> <span class="n">Zero</span> <span class="k">register</span> <span class="n">with</span> <span class="k">return</span> <span class="n">value</span><span class="p">.</span>
</span><span class='line'><span class="mi">40052</span><span class="nl">e:</span>  <span class="n">pop</span>    <span class="n">rdx</span>                 <span class="p">;</span> <span class="n">Pop</span> <span class="n">stack</span>
</span><span class='line'><span class="mf">40052f</span><span class="o">:</span>  <span class="n">ret</span>                        <span class="p">;</span> <span class="n">Return</span> <span class="n">control</span> <span class="n">to</span> <span class="n">the</span> <span class="n">caller</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, there is no longer an indirect jump. Instead, the input is compared with every possible value using a set of compare and jump instructions.</p>

<h3>Three and Less Cases</h3>

<p>With only three cases in a switch, Clang starts generating the same code as GCC does starting at four — comparison instructions are used instead of a jump table.
By reducing a number of cases further down to one, the same result is observed with both compilers.</p>

<h3>Note on GCC</h3>

<p>GCC compiler allows users to control the cutoff between doing switch statements as a series of if-then-else statements and using a jump table since version 4.7. The threshold controlling this behavior can be specified as a command line option.</p>

<h3>Conclusion</h3>

<p>From the above experiments, we can conclude that both GCC and Clang compilers are well aware that indirect jumps are relatively expensive.</p>

<p>Both compilers are trying to avoid a jump table if the number of case labels in the switch is small enough to justify using a chain of compare and jump instructions.</p>

<p>The only difference between the two compilers is they use a different cost ratio when deciding on using a jump table. GCC drops the idea of jump table starting at 4 case labels down to 1. Clang drops the jump table approach at 3 swithc cases and below.</p>

<p>This of course is purely an implementation detail and can change from one platform to another, or between different versions of the compiler.</p>

<h2>Default Case</h2>

<p>Does having a switch statement with a default case affect the mechanism used to implement a switch statement in machine code?</p>

<p>Unlike hardware description languages like Verilog where there could be no default case in a switch, the software logic always has a default case that transfers a control flow further. It might be explicitly specified with a special default case label, or be implicitly generated by a compiler.</p>

<p>Therefore, the presence or absence of an explicit default case does not make a difference. The only case when not specifying a default case explicitly is beneficial is when switch is performed on enumeration. In that case, compiler may warn a programmer if switch does not handle all possible values of enumeration. This is strictly a static analysis feature that is helpful to developers but does not affect compiler’s decision about the implementation mechanism of a switch statement in any way.</p>

<h2>Large Values</h2>

<p>Not all switch cases have their values starting at 0. Some may have them start at one, two or even a million. Since jump tables are essentially represented as arrays, and all arrays in both C and C++ languages start with 0. We certainly cannot create an array of 101 elements only to have the last entry at index 100 to hold a valid jump address. So how does having large values in the switch affect the generated code?</p>

<h3>Continuous Range</h3>

<p>Let’s first take a look at a very simple example where all case values of a switch are continues:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1986000</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;zero</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1986001</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;one</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1986002</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;two</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1986003</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;three</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1986004</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;four</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1986005</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;five</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the minimum value in the switch is 198,600,000. Some programmers think that, because compiler build a jump table from case values and the input to a switch statement might be used as an index to a jump table, having large values will not work and result in less efficient code. So what they are trying to help the compiler optimize the code by writing it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">rand</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1986000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;zero</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;one</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;two</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;three</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;four</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;five</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In other words, they subtract N from input value to make the resulting range start from 0. Is this a good optimization?</p>

<p>Both GCC and Clang are production grade compilers. It is extremely rare to run into a situation where programmer needs to optimize such a simple case manually, unless programmer knows something that compiler cannot possibly guess from context. Therefore, it would be logical to assume that both GCC and Clang should handle the above optimization automatically. To verify this, below is a disassembled binary code generated by GCC from the code without a manual optimization:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mf">4004f</span><span class="mi">2</span><span class="o">:</span>       <span class="n">call</span>   <span class="mi">4004</span><span class="n">d0</span> <span class="o">&lt;</span><span class="n">rand</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span> <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;rand()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mf">4004f</span><span class="mi">7</span><span class="o">:</span>       <span class="n">sub</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x1e4dd0</span>      <span class="p">;</span> <span class="n">Subtract</span> <span class="s">&quot;1986000&quot;</span> <span class="n">from</span> <span class="n">the</span> <span class="n">result</span><span class="p">.</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">c:</span>       <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>           <span class="p">;</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mi">5</span> <span class="n">and</span> <span class="k">do</span> <span class="n">the</span> <span class="n">rest</span> <span class="n">as</span> <span class="n">before</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code generated by the Clang looks exactly the same:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mi">4005</span><span class="nl">a2:</span>       <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">rand</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span> <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;rand()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">a7:</span>       <span class="n">add</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0xffe1b230</span>    <span class="p">;</span> <span class="n">Add</span> <span class="s">&quot;4292981296&quot;</span> <span class="n">to</span> <span class="n">the</span> <span class="n">result</span><span class="p">.</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ac:</span>       <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>           <span class="p">;</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mi">5</span> <span class="n">and</span> <span class="k">do</span> <span class="n">the</span> <span class="n">rest</span> <span class="n">as</span> <span class="n">before</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This proves that compilers are smart enough to perform basic optimization on switch statements whose values are not starting with 0.</p>

<h3>Sparse Values</h3>

<p>So far we have looked at simple switch statements whose case values were continuous. They either started from 0 or other numbers and incremented continuously without gaps in between.</p>

<p>The Wikipedia article on switch statement quotes a research paper:</p>

<blockquote><p>To optimize a switch statement, the programmer must use a very compact range of possible values to test.</p></blockquote>

<p>What happens if that is not possible or if programmer does something differently? Does it mean that a switch statement would not be optimized in any way?</p>

<p>There are two common types of values distribution in sparse switches. The first is when values can still be grouped together. For example, values of 10, 11, 12, 100 and 101 can grouped into two compact ranges, [10-12] and [100-101]. The second case is when no grouping can be done whatsoever.</p>

<p>Let’s test those two cases and find out what optimizations are performed by the compiler, if any.</p>

<h4>Distant Ranges</h4>

<p>Consider the following switch statement with values in [0-5] and [10000-10002] ranges:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;zero</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;one</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;two</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;three</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;four</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;five</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10000</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10001</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10002</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;10K!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below is the disassembled binary code generated for the above code by GCC:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mf">4004f</span><span class="mi">7</span><span class="o">:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x3</span>             <span class="p">;</span> <span class="n">Comparison</span> <span class="err">#</span><span class="mi">1</span><span class="o">:</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mf">3.</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">a:</span>   <span class="n">je</span>     <span class="mi">40056</span><span class="n">e</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x8e</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">It</span> <span class="n">is</span> <span class="mi">3</span><span class="o">!</span> <span class="n">Print</span> <span class="o">&amp;</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">c:</span>   <span class="n">nop</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rax</span><span class="o">+</span><span class="mh">0x0</span><span class="p">]</span>
</span><span class='line'><span class="mi">400500</span><span class="o">:</span>   <span class="n">jle</span>    <span class="mf">40051f</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x3f</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Is</span> <span class="n">it</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">?</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">comparison</span> <span class="err">#</span><span class="mf">3.</span>
</span><span class='line'><span class="mi">400502</span><span class="o">:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>             <span class="p">;</span> <span class="n">Comparison</span> <span class="err">#</span><span class="mi">2</span><span class="o">:</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mf">4.</span>
</span><span class='line'><span class="mi">400505</span><span class="o">:</span>   <span class="n">je</span>     <span class="mi">400553</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x73</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">It</span> <span class="n">is</span> <span class="mi">4</span><span class="o">!</span> <span class="n">Print</span> <span class="o">&amp;</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400507</span><span class="o">:</span>   <span class="n">jl</span>     <span class="mi">400537</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x57</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Is</span> <span class="n">it</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">?</span> <span class="n">Goto</span> <span class="n">comparison</span> <span class="err">#</span><span class="mf">4.</span>
</span><span class='line'><span class="mi">400509</span><span class="o">:</span>   <span class="n">sub</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x2710</span>          <span class="p">;</span> <span class="n">Subtract</span> <span class="mf">10000.</span>
</span><span class='line'><span class="mi">40050</span><span class="nl">e:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x2</span>             <span class="p">;</span> <span class="n">Comparison</span> <span class="err">#</span><span class="mi">5</span><span class="o">:</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mf">2.</span>
</span><span class='line'><span class="mi">400511</span><span class="o">:</span>   <span class="n">ja</span>     <span class="mi">400530</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x50</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">It</span> <span class="n">is</span> <span class="o">&gt;</span><span class="mf">2.</span> <span class="n">Just</span> <span class="n">exit</span> <span class="p">(</span><span class="n">no</span> <span class="n">match</span><span class="p">).</span>
</span><span class='line'><span class="mi">400513</span><span class="o">:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400741</span>        <span class="p">;</span> <span class="n">Set</span> <span class="s">&quot;10K!&quot;</span> <span class="n">as</span> <span class="n">a</span> <span class="n">parameter</span>
</span><span class='line'><span class="mi">400518</span><span class="o">:</span>   <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>   <span class="p">;</span> <span class="n">Call</span> <span class="s">&quot;puts()&quot;</span><span class="p">.</span>
</span><span class='line'><span class="mi">40051</span><span class="nl">d:</span>   <span class="n">jmp</span>    <span class="mi">400530</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x50</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mf">40051f</span><span class="o">:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x1</span>             <span class="p">;</span> <span class="n">Comparison</span> <span class="err">#</span><span class="mi">3</span><span class="o">:</span> <span class="n">Compare</span> <span class="n">with</span> <span class="mf">1.</span>
</span><span class='line'><span class="mi">400522</span><span class="o">:</span>   <span class="n">je</span>     <span class="mi">400562</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x82</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">It</span> <span class="n">is</span> <span class="mi">1</span><span class="o">!</span> <span class="n">Go</span> <span class="n">print</span> <span class="n">it</span><span class="p">.</span>
</span><span class='line'><span class="mi">400524</span><span class="o">:</span>   <span class="n">jle</span>    <span class="mi">400543</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x63</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">It</span> <span class="n">is</span> <span class="n">less</span> <span class="n">than</span> <span class="mf">1.</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">comparison</span> <span class="err">#</span><span class="mf">6.</span>
</span><span class='line'><span class="mi">400526</span><span class="o">:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x40072d</span>        <span class="p">;</span> <span class="n">The</span> <span class="n">value</span> <span class="n">is</span> <span class="mi">2</span> <span class="p">(</span><span class="n">by</span> <span class="n">exclusion</span><span class="p">),</span>
</span><span class='line'><span class="mi">40052</span><span class="nl">b:</span>   <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>   <span class="p">;</span> <span class="p">...</span> <span class="n">print</span> <span class="s">&quot;2&quot;</span> <span class="n">and</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400530</span><span class="o">:</span>   <span class="n">xor</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>
</span><span class='line'><span class="mi">400532</span><span class="o">:</span>   <span class="n">add</span>    <span class="n">rsp</span><span class="p">,</span><span class="mh">0x8</span>
</span><span class='line'><span class="mi">400536</span><span class="o">:</span>   <span class="n">ret</span>
</span><span class='line'><span class="mi">400537</span><span class="o">:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400737</span>
</span><span class='line'><span class="mi">40053</span><span class="nl">c:</span>   <span class="n">call</span>   <span class="mi">400490</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">400541</span><span class="o">:</span>   <span class="n">jmp</span>    <span class="mi">400530</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x50</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">400543</span><span class="o">:</span>   <span class="n">test</span>   <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>             <span class="p">;</span> <span class="n">Comparison</span> <span class="err">#</span><span class="mi">6</span>
</span><span class='line'><span class="mi">400545</span><span class="o">:</span>   <span class="n">jne</span>    <span class="mi">400530</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x50</span><span class="o">&gt;</span>  <span class="p">;</span> <span class="n">Nope</span><span class="p">.</span> <span class="n">No</span> <span class="n">match</span> <span class="n">here</span><span class="p">.</span> <span class="n">Go</span> <span class="n">to</span> <span class="n">exit</span><span class="p">.</span>
</span><span class='line'><span class="mi">400547</span><span class="o">:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400724</span>        <span class="p">;</span> <span class="n">Print</span> <span class="s">&quot;zero&quot;</span> <span class="n">and</span> <span class="n">exit</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, the generated code seems to be less efficient compared to that of jump table. By looking closer at the program flow we can see that GCC has implemented a binary search algorithm. It is still well optimized compared to a simple chain of compare and jump instructions generated by if-then-else.</p>

<p>Clang takes a different approach in handling the above code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mi">4005</span><span class="nl">a7:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x270f</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ac:</span>   <span class="n">jg</span>     <span class="mf">4005e6</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x56</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ae:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">b1:</span>   <span class="n">ja</span>     <span class="mf">4005f</span><span class="n">b</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x6b</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">b3:</span>   <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">b5:</span>   <span class="n">jmp</span>    <span class="n">QWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rax</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="mh">0x4006f0</span><span class="p">]</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">bc:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400720</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">c1:</span>   <span class="n">jmp</span>    <span class="mf">4005f</span><span class="mi">6</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x66</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">c3:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400725</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">c8:</span>   <span class="n">jmp</span>    <span class="mf">4005f</span><span class="mi">6</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x66</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ca:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400729</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">cf:</span>   <span class="n">jmp</span>    <span class="mf">4005f</span><span class="mi">6</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x66</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">d1:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x40072d</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">d6:</span>   <span class="n">jmp</span>    <span class="mf">4005f</span><span class="mi">6</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x66</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">d8:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400733</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">dd:</span>   <span class="n">jmp</span>    <span class="mf">4005f</span><span class="mi">6</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x66</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">df:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x400738</span>
</span><span class='line'><span class="mf">4005e4</span><span class="o">:</span>   <span class="n">jmp</span>    <span class="mf">4005f</span><span class="mi">6</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x66</span><span class="o">&gt;</span>
</span><span class='line'><span class="mf">4005e6</span><span class="o">:</span>   <span class="n">lea</span>    <span class="n">eax</span><span class="p">,[</span><span class="n">rax</span><span class="o">-</span><span class="mh">0x2710</span><span class="p">]</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ec:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x3</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ef:</span>   <span class="n">jae</span>    <span class="mf">4005f</span><span class="n">b</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x6b</span><span class="o">&gt;</span>
</span><span class='line'><span class="mf">4005f</span><span class="mi">1</span><span class="o">:</span>   <span class="n">mov</span>    <span class="n">edi</span><span class="p">,</span><span class="mh">0x40073d</span>
</span><span class='line'><span class="mf">4005f</span><span class="mi">6</span><span class="o">:</span>   <span class="n">call</span>   <span class="mi">400450</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>
</span><span class='line'><span class="mf">4005f</span><span class="nl">b:</span>   <span class="n">xor</span>    <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>
</span><span class='line'><span class="mf">4005f</span><span class="nl">d:</span>   <span class="n">pop</span>    <span class="n">rbp</span>
</span><span class='line'><span class="mf">4005f</span><span class="nl">e:</span>   <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code generated by Clang is a little bit more tricky compared to GCC. First it compares the input value with 9999. If the value is greater, it normalizes it by subtracting 10000 using “lea“ instruction, and then checks if the value is within [0-3) range. If it is, the “10K” is then printed. Otherwise, the function returns. If value is less than 9999, it ensures the value is in [0-5] range and uses a jump table. Very clever, isn’t it?</p>

<h4>Sparse Values</h4>

<p>The second common switch pattern is when values are sparse enough so that they cannot be grouped together. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">rand</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">50</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;50!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">100</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;100!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">150</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;150!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">200</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;200!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">250</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;250!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">300</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Spartans!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">350</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;350!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">400</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;400!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">450</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;400!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">500</span><span class="o">:</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;400!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10000</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10001</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10002</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10003</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10004</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">10005</span><span class="o">:</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;10K!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the above code, both GCC and Clang compilers have generated a binary search algorithm.
Changing the order of case labels in the switch did not affect the generated code — both compilers have analyzed all the specified values before making optimization decisions.</p>

<h2>Fall Through Switch</h2>

<p>So far we have looked at switch statements with no fall through cases, where each case had a trivial code. There are of course more complex scenarios.</p>

<p>What happens if we introduce fall through switch? What if we make each case statement to have complex control flows? What if we do both of the above?</p>

<p>The answer is simple — it does not fundamentally change the way compilers implement switch statements. The same approach of mixing comparison, range checking, binary search and jump table logic is still used.</p>

<p>What it affects, however, is how compiler rearranges the control flow. It may group some logic together, or split it. Redundant code might be reduced, or it might get duplicated intentionally to reduce a number of jump instructions. The code might be placed at different addresses, compiler might also generate different jump instructions to achieve the most compact and fast code. All those optimizations techniques are not unique to switch statements and are being used with other language constructs.</p>

<h2>Outsmarting Compilers</h2>

<p>Every discussion about code micro-optimization, which switch statements are usually part of, shall start with a word of warning. Outsmarting a production quality compiler these days is a nearly impossible task. A programmer should not even try to optimize the code that is not proven to be a bottleneck by carefully profiling the whole program. If a piece of code is proven to be slow and there is an obvious optimization that compiler has failed to perform, shop for a better compiler. Start by optimizing the logic and not the code — doing less steps where possible, avoiding chaotic dynamic memory manipulations, using well designed data structures will pay off more than any micro-optimization.</p>

<p>If, however, a switch statement turns out to be one of the biggest bottlenecks of the code, there might be ways to improve it. To do that, it is vital to know more information about the possible values passed into a switch than compiler knows about or may figure out from context. If there is nothing known about the input value — don’t bother optimizing, there is no way of implementing a general case better than a compiler.</p>

<h3>Improving a Switch</h3>

<p>Consider the following example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">switch</span> <span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>      <span class="n">do_very_important_stuff_0</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>      <span class="n">do_not_important_stuff_1</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>      <span class="n">do_not_important_stuff_2</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>      <span class="n">do_not_important_stuff_3</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>      <span class="n">do_not_important_stuff_4</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>      <span class="n">do_very_important_stuff_5</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above switch statement will be implemented using a jump table. It is impossible to do better unless it is known that most of the time the value is either 0 or 5, and can turn out to be 1, 2 or 3 only in some rare conditions that almost never happen. If that is the case, there is no way that compiler may know about it (unless of course we use profiler feedback optimization, which is not always possible). So how to optimize this for that particular case?</p>

<p>We remember that an indirect call is more expensive than two-three comparisons, at least for our given platform. This was proven during our earlier experiments with reducing a number of cases in a switch. Given that our critical path in the above examples consists of only two values — 0 and 5, the code can be optimized by not using those two statements in a switch case to avoid an expensive indirect jump. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">do_very_important_stuff_0</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">do_very_important_stuff_5</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>          <span class="n">do_not_important_stuff_1</span><span class="p">();</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>          <span class="n">do_not_important_stuff_2</span><span class="p">();</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>          <span class="n">do_not_important_stuff_3</span><span class="p">();</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>          <span class="n">do_not_important_stuff_4</span><span class="p">();</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If there are only two or three possible input values, the same technique can be used to improve switch statements that compiler implements using a binary search approach. If, however, the input value may vary, improving a switch performance turns into nothing more but improving a search algorithm. The programmer will have to analyze the most common set of input values, select or invent the search algorithm with better average performance or better performance for more important inputs, and manually implement the switch functionality using handcrafted if-then-else statements, creating a jump table manually (as described in chapter 3), or both.</p>

<h3>Switch vs High-Level Search</h3>

<p>Some developers occasionally get concerned whether it is better to use a switch statement or a higher-level search algorithms like, for example, a hash lookup implemented by the std::unordered_map class from C++ Standard Library.</p>

<h4>Hash Lookup</h4>

<p>Compared to dynamic hash lookup tables, statically generated lookup code for a pre-defined ranges of values will always be better than any other hash table implementation given that switch statements can only work with constant simple numeric POD types.</p>

<h4>Binary Search</h4>

<p>Ordered lookup algorithms such as those commonly used with std::map can theoretically be more efficient than a switch statement. The runtime overhead of those algorithms, however, may render them useless compared to a simple, low-level switch implementation. This may also depend on a nature of the input. Therefore, there is no general answer to this question and developers must test both implementations to determine which one is better in any particular case.</p>

<h2>If-then-else Recognition</h2>

<p>By experimenting with different switch statements we have ensured that compilers do a wonderful optimization job. It almost does not matter how programmers describe the switch it in the code — compiler will always generate nearly perfect generic lookup algorithms, rearrange code as needed, group or duplicate statements and apply other techniques to make the code most efficient.</p>

<p>C programming language is very high-level and it might seem that in many cases it should not matter how the control flow is described and the same optimization might be applied as long as a resulting program is functionally the same. This raises a question of whether compiler will do the same optimizations if programmer is using if-then-else. In theory, it might be the same, or might be different. But instead of guessing, let’s find out.</p>

<p>Below is a C program that is equivalent to our simple switch example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="n">v</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;zero</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;one</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;two</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;three</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;four</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;five</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>GCC did not generate an equivalent code to that of a switch statement. A set of compare instructions is used instead. Here is a relevant snippet of the binary code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mf">4004f</span><span class="mi">7</span><span class="o">:</span>   <span class="n">test</span>   <span class="n">eax</span><span class="p">,</span><span class="n">eax</span>
</span><span class='line'><span class="mf">4004f</span><span class="mi">9</span><span class="o">:</span>   <span class="n">je</span>     <span class="mi">40051</span><span class="n">e</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x3e</span><span class="o">&gt;</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">b:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x1</span>
</span><span class='line'><span class="mf">4004f</span><span class="nl">e:</span>   <span class="n">xchg</span>   <span class="n">ax</span><span class="p">,</span><span class="n">ax</span>
</span><span class='line'><span class="mi">400500</span><span class="o">:</span>   <span class="n">je</span>     <span class="mi">400536</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x56</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">400502</span><span class="o">:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x2</span>
</span><span class='line'><span class="mi">400505</span><span class="o">:</span>   <span class="n">je</span>     <span class="mi">400542</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x62</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">400507</span><span class="o">:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x3</span>
</span><span class='line'><span class="mi">40050</span><span class="nl">a:</span>   <span class="n">je</span>     <span class="mi">40054</span><span class="n">e</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x6e</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">40050</span><span class="nl">c:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x4</span>
</span><span class='line'><span class="mf">40050f</span><span class="o">:</span>   <span class="n">nop</span>
</span><span class='line'><span class="mi">400510</span><span class="o">:</span>   <span class="n">je</span>     <span class="mi">40055</span><span class="n">a</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x7a</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">400512</span><span class="o">:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>
</span><span class='line'><span class="mi">400515</span><span class="o">:</span>   <span class="n">je</span>     <span class="mi">40052</span><span class="n">a</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x4a</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clang compiler, on the other hand, has generated a jump table:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="mi">4005</span><span class="nl">a7:</span>   <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x5</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">aa:</span>   <span class="n">ja</span>     <span class="mf">4005e2</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x52</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4005</span><span class="nl">ae:</span>   <span class="n">jmp</span>    <span class="n">QWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rax</span><span class="o">*</span><span class="mi">8</span><span class="o">+</span><span class="mh">0x4006e0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Therefore, we can draw a conclusion that compilers can and sometimes do optimize if-then-else statements the same way they optimize switch statements.</p>

<p>Whether it makes sense or not is another question. At first, it may seem like Clang has done a lot better job than GCC. However, this automatically prevents developer from performing optimizations described in the previous chapter by making it impossible to use comparison in the fast path of the program. This also prevents developers from manually providing branch prediction hints because switch cases, unlike if-then-else branches, cannot be explicitly prioritized. Since compilers cannot know for sure if switch was replaced by if-then-else statement on purpose, automatically replacing if-then-else with switch might discard programmer’s optimization efforts and worsen the runtime efficiency of the program.</p>

<h2>Summary</h2>

<p>We have learned how decent compilers transform higher-level switch statements into a low level machine code, reviewed a number of different examples along with optimization techniques applied by the compilers.</p>

<p>We also discussed a few optimization techniques that can be applied in certain situations to improve the application performance by using a special mix of switch and if-then-else statements.</p>

<p>I hope that it would helps us, developers, to better understand what switch statements are, what they can be used for and how they work, as well as adding some practical backup to some very common speculative talks about switch statement optimizations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unreasonable Effectiveness of C]]></title>
    <link href="http://741MHz.com/unreasonable-effectiveness-of-c/"/>
    <updated>2013-01-10T00:00:00-05:00</updated>
    <id>http://741MHz.com/unreasonable-effectiveness-of-c</id>
    <content type="html"><![CDATA[<p>It is always nice to run into like-minded people. Today I ran into <a href="http://damienkatz.net/">Damien Katz</a>, CTO at <a href="http://www.couchbase.com/">Couchbase</a>,  and his brilliant story about why C is a beautiful high-level language. For a big fan of C like me it would have been a crime not to share this story. If you agree that OOP is a hype and a disease or if you think that C++ is a horrible language then you will definitely enjoy it:</p>

<blockquote><p>For years I’ve tried my damnedest to get away from C. Too simple, too many details to manage, too old and crufty, too low level. I’ve had intense and torrid love affairs with Java, C++, and Erlang. I’ve built things I’m proud of with all of them, and yet each has broken my heart. They’ve made promises they couldn’t keep, created cultures that focus on the wrong things, and made devastating tradeoffs that eventually make you suffer painfully. And I keep crawling back to C.</p></blockquote>

<p><a href="http://damienkatz.net/2013/01/the_unreasonable_effectiveness_of_c.html">[Read the full story&hellip;]</a></p>

<p>While we are at it, you may also enjoy:</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Object-oriented_programming#Criticism">Object Oriented Programming Criticism</a></li>
<li><a href="http://article.gmane.org/gmane.comp.version-control.git/57918">Linus Torvalds opinion on C++</a> — you are full of bullshit!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System Program Problem Detected]]></title>
    <link href="http://741MHz.com/system-program-problem-detected/"/>
    <updated>2012-12-10T00:00:00-05:00</updated>
    <id>http://741MHz.com/system-program-problem-detected</id>
    <content type="html"><![CDATA[<p>I have just installed Ubuntu 12.10 and the first thing I ran into is tons of annoying popup windows telling me about system program problems and asking to report them:</p>

<p><img src="http://741MHz.com/images/ubuntu_system_problem/popup.png"></p>

<p>Apparently, this is a common problem that drives crazy a lot of people. What happens is some of the programs crash, and those cases are being reported by the Apport application. I highly doubt that anyone at Ubuntu is actually reading these reports. Firstly, millions of Ubuntu installations constantly have programs crashing and it must take an army of developers to investigate and fix them. Secondly, these crashes are happening for many years and they don’t seem to go away. So why bother? Here is how you disable this annoying reporting facility.</p>

<h3>Launch a terminal</h3>

<p>First, you need to open a terminal. You can do that by clicking on “Dash Home” button (on the top left of your screen), typing “Terminal”, and clicking on a Terminal application icon in order to launch it:</p>

<p><img src="http://741MHz.com/images/ubuntu_system_problem/open_terminal.png"></p>

<h3>Disable Apport</h3>

<p>In the terminal, type the following commands:</p>

<pre><code>sudo sed -i 's;^enabled=1$;enabled=0;g' /etc/default/apport
sudo service apport restart
sudo rm /var/crash/*
</code></pre>

<p>The above commands will replace “enabled=1″ with “enabled=0″ in the “/etc/default/apport” configuration file, restart the Apport application and remove old reports to save you a valuable disk space. The problem should now go away.</p>

<h3>Still having annoying popups?</h3>

<p>Be aware that in earlier versions of Ubuntu there was a bug when restarting Apport didn’t really restart it (see <a href="https://bugs.launchpad.net/ubuntu/+source/apport/+bug/292402">Bug #292402</a>). So as the last resort, simply reboot your computer.</p>

<p>Hope it helps! Good Luck!</p>
]]></content>
  </entry>
  
</feed>
